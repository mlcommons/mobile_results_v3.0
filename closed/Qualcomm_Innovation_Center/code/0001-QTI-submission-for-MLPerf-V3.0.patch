From e65802917fe2c6f5b95760b11487105b4a94216d Mon Sep 17 00:00:00 2001
From: Mohit Mundhra <quic_mmundhra@quicinc.com>
Date: Thu, 30 Mar 2023 14:20:02 +0530
Subject: [PATCH] QTI submission for MLPerf V3.0

Devices submitted: SD8G2, SD_Mobile, SD8CXG3

Co-authored by: Aasheesh Tiwari <quic_aasheesh@quicinc.com>
Co-authored-by: Mohit Mundhra <quic_mmundhra@quicinc.com>
Co-authored-by: Utkarsh Mirshra <quic_utkarshm@quicinc.com>
---
 .bazelrc                                      |   19 +
 WORKSPACE                                     |   12 +-
 datasets/Makefile                             |   17 +-
 datasets/docker/Dockerfile                    |    4 +-
 docs/environment-setup/env-setup-windows.md   |    5 +
 flutter/android/android-docker.mk             |    7 +
 flutter/android/android.mk                    |   32 +
 flutter/cpp/binary/main.cc                    |    3 +-
 flutter/cpp/c/dll_export.def                  |    2 +
 flutter/windows/windows.mk                    |   42 +
 mobile_back_qti/BUILD                         |   45 +-
 mobile_back_qti/DLC/Makefile                  |  506 ++-
 mobile_back_qti/DLC/util/snusr/rgb8_to_raw.py |   42 +
 mobile_back_qti/README.md                     |  117 +-
 mobile_back_qti/cpp/backend_mock_qti/BUILD    |    9 +
 mobile_back_qti/cpp/backend_qti/BUILD         |   64 +-
 mobile_back_qti/cpp/backend_qti/acpitabl.h    | 3941 +++++++++++++++++
 mobile_back_qti/cpp/backend_qti/allocator.cc  |    5 +-
 mobile_back_qti/cpp/backend_qti/allocator.h   |    4 +-
 mobile_back_qti/cpp/backend_qti/cpuctrl.cc    |   31 +-
 mobile_back_qti/cpp/backend_qti/cpuctrl.h     |    4 +-
 .../cpp/backend_qti/mlperf_helper.h           |   34 +-
 .../cpp/backend_qti/qti_backend_helper.cc     |  504 ++-
 .../cpp/backend_qti/qti_backend_helper.h      |   73 +-
 mobile_back_qti/cpp/backend_qti/qti_c.cc      |   56 +-
 .../cpp/backend_qti/qti_settings.h            |  651 +--
 .../cpp/backend_qti/qti_settings_sd7g1.h      |  144 +
 .../cpp/backend_qti/qti_settings_sd7pg2.h     |  149 +
 .../cpp/backend_qti/qti_settings_sd8cxg3.h    |  137 +
 .../cpp/backend_qti/qti_settings_sd8g1.h      |  149 +
 .../cpp/backend_qti/qti_settings_sd8g2.h      |  149 +
 .../cpp/backend_qti/qti_settings_sd8pg1.h     |  149 +
 .../cpp/backend_qti/qti_settings_sdm778.h     |  144 +
 .../cpp/backend_qti/qti_settings_sdm888.h     |  144 +
 mobile_back_qti/cpp/backend_qti/rpcmem.cc     |    9 +-
 mobile_back_qti/cpp/backend_qti/rpcmem.h      |    4 +-
 .../cpp/backend_qti/soc_utility.cc            |  117 +-
 mobile_back_qti/cpp/backend_qti/soc_utility.h |   11 +-
 mobile_back_qti/cpp/backend_qti/tflite_c.cc   |   40 +-
 mobile_back_qti/cpp/backend_qti/tflite_c.h    |    2 +-
 .../docker/mlperf_snusr/Dockerfile            |   94 +
 mobile_back_qti/make/qti_backend.mk           |   27 +-
 mobile_back_qti/run_accuracy_tests.bat        |  101 +
 mobile_back_qti/run_accuracy_tests.sh         |  102 +
 mobile_back_qti/run_performance_tests.bat     |  113 +
 mobile_back_qti/run_performance_tests.sh      |  114 +
 mobile_back_qti/variables.bzl                 |   38 +-
 patches/TF-Changes-to-add-windows_arm64.patch | 1183 +++++
 ...cpuinfo-changes-to-add-windows_arm64.patch |   69 +
 platform.bzl                                  |   20 +
 50 files changed, 8329 insertions(+), 1109 deletions(-)
 mode change 100755 => 100644 datasets/Makefile
 create mode 100644 mobile_back_qti/DLC/util/snusr/rgb8_to_raw.py
 create mode 100644 mobile_back_qti/cpp/backend_qti/acpitabl.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd7g1.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd7pg2.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd8cxg3.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd8g1.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd8g2.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sd8pg1.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sdm778.h
 create mode 100644 mobile_back_qti/cpp/backend_qti/qti_settings_sdm888.h
 create mode 100644 mobile_back_qti/docker/mlperf_snusr/Dockerfile
 create mode 100644 mobile_back_qti/run_accuracy_tests.bat
 create mode 100644 mobile_back_qti/run_accuracy_tests.sh
 create mode 100644 mobile_back_qti/run_performance_tests.bat
 create mode 100644 mobile_back_qti/run_performance_tests.sh
 create mode 100644 patches/TF-Changes-to-add-windows_arm64.patch
 create mode 100644 patches/cpuinfo-changes-to-add-windows_arm64.patch
 create mode 100644 platform.bzl

diff --git a/.bazelrc b/.bazelrc
index a66dc40..d3c565f 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -20,6 +20,7 @@ build:verbose_logs --output_filter=
 build:android --copt=-w
 build:ios --copt=-w
 build:windows --copt=/W0
+build:windows_arm64 --copt=/W0
 
 # Build in C++ 14 mode.
 build:android --cxxopt=-std=c++14
@@ -29,6 +30,8 @@ build:ios --host_cxxopt=-std=c++14
 build:ios --cxxopt=-xobjective-c++
 build:windows --cxxopt=/std:c++14
 build:windows --host_cxxopt=/std:c++14
+build:windows_arm64 --cxxopt=/std:c++14
+build:windows_arm64 --host_cxxopt=/std:c++14
 
 # Android configs
 build:android --crosstool_top=//external:android/crosstool
@@ -53,15 +56,25 @@ build:windows --copt=-DWIN32_LEAN_AND_MEAN
 build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
 build:windows --copt=-DNOGDI
 build:windows --host_copt=-DNOGDI
+build:windows_arm64 --copt=-DWIN32_LEAN_AND_MEAN
+build:windows_arm64 --host_copt=-DWIN32_LEAN_AND_MEAN
+build:windows_arm64 --copt=-DNOGDI
+build:windows_arm64 --host_copt=-DNOGDI
+build:windows_arm64 --cpu=x64_arm64_windows
+build:windows_arm64 --fat_apk_cpu=x64_arm64_windows
 
 # Tensorflow uses M_* math constants that only get defined by MSVC headers if
 # _USE_MATH_DEFINES is defined.
 build:windows --copt=/D_USE_MATH_DEFINES
 build:windows --host_copt=/D_USE_MATH_DEFINES
+build:windows_arm64 --copt=/D_USE_MATH_DEFINES
+build:windows_arm64 --host_copt=/D_USE_MATH_DEFINES
 
 # See https://docs.microsoft.com/en-us/cpp/preprocessor/preprocessor-experimental-overview
 build:windows --copt=/Zc:preprocessor
 build:windows --host_copt=/Zc:preprocessor
+build:windows_arm64 --copt=/Zc:preprocessor
+build:windows_arm64 --host_copt=/Zc:preprocessor
 
 build:windows --linkopt=/DEBUG
 build:windows --host_linkopt=/DEBUG
@@ -69,6 +82,12 @@ build:windows --linkopt=/OPT:REF
 build:windows --host_linkopt=/OPT:REF
 build:windows --linkopt=/OPT:ICF
 build:windows --host_linkopt=/OPT:ICF
+build:windows_arm64 --linkopt=/DEBUG
+build:windows_arm64 --host_linkopt=/DEBUG
+build:windows_arm64 --linkopt=/OPT:REF
+build:windows_arm64 --host_linkopt=/OPT:REF
+build:windows_arm64 --linkopt=/OPT:ICF
+build:windows_arm64 --host_linkopt=/OPT:ICF
 
 # Address sanitizer
 build:asan --strip=never
diff --git a/WORKSPACE b/WORKSPACE
index e40e40d..eef99ac 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -33,12 +33,22 @@ http_archive(
     patch_args = ["-p1"],
     patches = [
         "//patches:cpuinfo-bazel-patch.diff",
+        "//patches:cpuinfo-changes-to-add-windows_arm64.patch",
     ],
     sha256 = "3389494589a97122779cd8d57fbffb1ac1e1ca3e795981c1d8d71b92281ae8c4",
     strip_prefix = "cpuinfo-8ec7bd91ad0470e61cf38f618cc1f270dede599c",
     url = "https://github.com/pytorch/cpuinfo/archive/8ec7bd91ad0470e61cf38f618cc1f270dede599c.tar.gz",
 )
 
+
+load("//:platform.bzl", "tf_patch_finder")
+tf_patch_finder(
+    name = "tf_patch_finder",
+    workspace_dir = __workspace_dir__,
+)
+
+load("@tf_patch_finder//:patch_win_arm64.bzl", "PATCH_FILE")
+
 http_archive(
     name = "org_tensorflow",
     patch_args = ["-p1"],
@@ -50,7 +60,7 @@ http_archive(
         "//:flutter/third_party/tflite_coreml_delegate_memory_leak.patch",
         "//:flutter/third_party/tensorflow-fix-llvm.patch",
         "//patches:feature_level.diff",
-    ],
+        ] + PATCH_FILE,
     sha256 = "d2948c066a0bc3f45cb8072def03c85f50af8a75606bbdff91715ef8c5f2a28c",
     strip_prefix = "tensorflow-2.8.0",
     urls = [
diff --git a/datasets/Makefile b/datasets/Makefile
old mode 100755
new mode 100644
index 9f3d2a2..91e9cbd
--- a/datasets/Makefile
+++ b/datasets/Makefile
@@ -39,7 +39,6 @@ C_TARGS := $(patsubst $(C_SRC_DIR)/%.jpg,$(C_DEST_DIR)/%.jpg,$(C_SRC))
 S_DEST_DIR := ${BUILDDIR}/output/calibration_set/squad
 
 all: ${BUILDDIR}/output/state/datasets.stamp ${BUILDDIR}/output/state/calibration.stamp
-
 print-% : ; @echo $* = $($*)
 
 ${BUILDDIR}/output/state/datasets.stamp: ${BUILDDIR}/output/state/ade20k.stamp ${BUILDDIR}/output/state/coco.stamp \
@@ -47,7 +46,21 @@ ${BUILDDIR}/output/state/datasets.stamp: ${BUILDDIR}/output/state/ade20k.stamp $
 	touch $@
 
 ${BUILDDIR}/output/state/calibration.stamp: ${BUILDDIR}/output/state/ade20k_calibration.stamp ${BUILDDIR}/output/state/coco_calibration.stamp \
-			${BUILDDIR}/output/state/imagenet_calibration.stamp ${BUILDDIR}/output/state/squad_calibration.stamp
+			${BUILDDIR}/output/state/imagenet_calibration.stamp ${BUILDDIR}/output/state/squad_calibration.stamp ${BUILDDIR}/output/state/snusr_calibration.stamp
+	touch $@
+	
+snusr_calibration : ${BUILDDIR}/output/state/snusr_calibration.stamp
+
+${BUILDDIR}/output/state/snusr_calibration.stamp: ${BUILDDIR}/downloads/snusr/SNUSR.zip
+	mkdir -p ${BUILDDIR}/output/snusr
+	unzip $< -d ${BUILDDIR}/output/snusr
+	mkdir -p ${BUILDDIR}/output/state
+	touch $@
+
+${BUILDDIR}/downloads/snusr/SNUSR.zip: 
+	# Fetching SNUSR.zip
+	mkdir -p ${BUILDDIR}/downloads/snusr
+	curl -o $@ -L https://github.com/mlcommons/mobile_models/raw/main/v3_0/datasets/snusr_lr.zip
 	touch $@
 
 # Ade20k
diff --git a/datasets/docker/Dockerfile b/datasets/docker/Dockerfile
index 49a58ae..45e038c 100644
--- a/datasets/docker/Dockerfile
+++ b/datasets/docker/Dockerfile
@@ -11,12 +11,12 @@ RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y && \
     apt-get install -y --no-install-recommends \
        python3 python3-pip libpython3.6-dev python3.6-venv libgl1-mesa-glx libglib2.0 cython3 gcc make curl unzip libc++1-8 \
        git locales openssh-client ca-certificates tar gzip parallel \
-       zip bzip2 gnupg wget python3-six python3-pip libncurses5 openjdk-11-jdk-headless clang-format-10 golang-1.13-go
+       zip bzip2 gnupg wget python3-six python3-pip libncurses5 openjdk-11-jdk-headless clang-format-10 golang-1.13-go build-essential
 
 RUN pip3 install pip==19.3.1 setuptools==31.0.1
 RUN pip3 install tensorflow-cpu==1.15
 RUN pip3 install Pillow opencv-python setuptools matplotlib tensorflow_hub tf-slim \
-                 absl-py numpy
+                 absl-py numpy pyyaml
 
 RUN ln -s /usr/bin/python3 /usr/bin/python
 RUN apt-get clean
diff --git a/docs/environment-setup/env-setup-windows.md b/docs/environment-setup/env-setup-windows.md
index d55a1e2..8cba75e 100644
--- a/docs/environment-setup/env-setup-windows.md
+++ b/docs/environment-setup/env-setup-windows.md
@@ -25,6 +25,7 @@ However, using Chocolatey greatly simplifies installation.
   * `choco install -y msys2`
   * `choco install -y flutter`
   * `choco install -y protoc`
+  * `dart pub global activate protoc_plugin`
 * Configure python
   * You must have command `python3` in your PATH.  
   Python installed via Chocolatey provides only `python.exe` file, so you will need to create `python3` yourself.  
@@ -45,6 +46,10 @@ However, using Chocolatey greatly simplifies installation.
   * This option should be located in `Update & Security` → `For developers`.
   * Or you can open this page from command line: `start ms-settings:developers`
 
+**Note**: Keep the bazel base path short, because some of the commands during tflite compilation
+can become very long and throw some error. You can change the path by
+using --output_base=<some\short\path>
+
 **Note**: If you have a WSL distro installed on your PC, you may need to set `BAZEL_SH` environment variable.
 Without it bazel could call `bash` provided by WSL instead of MSYS2's one.
 Put path to the `bash` command from MSYS2 there.
diff --git a/flutter/android/android-docker.mk b/flutter/android/android-docker.mk
index 3f1b001..12e2d9b 100644
--- a/flutter/android/android-docker.mk
+++ b/flutter/android/android-docker.mk
@@ -65,3 +65,10 @@ docker/flutter/android/release: flutter/check-release-env flutter/android/docker
 	MSYS2_ARG_CONV_EXCL="*" docker run \
 		${flutter_common_docker_flags} \
 		make flutter/android/release
+
+
+.PHONY: docker/cmdline/android/release
+docker/cmdline/android/release: flutter/check-release-env flutter/android/docker/image
+	MSYS2_ARG_CONV_EXCL="*" docker run \
+		${flutter_common_docker_flags} \
+		make cmdline/android/bins/release
diff --git a/flutter/android/android.mk b/flutter/android/android.mk
index 7f7fb7a..488150f 100644
--- a/flutter/android/android.mk
+++ b/flutter/android/android.mk
@@ -18,6 +18,7 @@ include flutter/android/android-docker.mk
 flutter/android: flutter/android/libs
 flutter/android/release: flutter/check-release-env flutter/android flutter/prepare flutter/android/apk
 flutter/android/libs: flutter/android/libs/checksum flutter/android/libs/build flutter/android/libs/copy
+cmdline/android/bins/release: cmdline/android/bins/build cmdline/android/bins/copy
 # run `make flutter/android/apk` before `flutter/android/test-apk`
 flutter/android/test-apk: flutter/android/test-apk/main flutter/android/test-apk/helper
 
@@ -44,6 +45,37 @@ flutter/android/libs/build:
 		${backend_samsung_android_target} \
 		//flutter/cpp/flutter:libbackendbridge.so
 
+.PHONY: cmdline/android/bins/build
+cmdline/android/bins/build:
+	bazel ${BAZEL_ARGS_GLOBAL} ${sonar_bazel_startup_options} \
+		build ${BAZEL_CACHE_ARG} ${bazel_links_arg} ${sonar_bazel_build_args} \
+		--config=android_arm64 \
+		${backend_tflite_android_target} \
+		${backend_mediatek_android_target} \
+		${backend_pixel_android_target} \
+		${backend_qti_android_target} \
+		${backend_samsung_android_target} \
+		//flutter/cpp/flutter:libbackendbridge.so \
+		//flutter/cpp/binary:main
+
+cmdline_android_bin_release_path=output/cmdline_bins/release
+.PHONY: cmdline/android/bins/copy
+cmdline/android/bins/copy:
+	rm -rf ${cmdline_android_bin_release_path}
+	mkdir -p ${cmdline_android_bin_release_path}
+	@# macos doesn't support --target-directory flag
+	cp -f \
+		${backend_tflite_android_files} \
+		${backend_mediatek_android_files} \
+		${backend_pixel_android_files} \
+		${backend_qti_cmdline_files} \
+		${backend_samsung_android_files} \
+		${BAZEL_LINKS_PREFIX}bin/flutter/cpp/flutter/libbackendbridge.so \
+		${BAZEL_LINKS_PREFIX}bin/flutter/cpp/binary/main \
+		${cmdline_android_bin_release_path}
+		@# macos doesn't support --recursive flag
+		chmod -R 777 ${cmdline_android_bin_release_path}
+
 flutter_android_libs_folder=flutter/android/app/src/main/jniLibs/arm64-v8a
 .PHONY: flutter/android/libs/copy
 flutter/android/libs/copy:
diff --git a/flutter/cpp/binary/main.cc b/flutter/cpp/binary/main.cc
index 3ce57ba..a6110f3 100644
--- a/flutter/cpp/binary/main.cc
+++ b/flutter/cpp/binary/main.cc
@@ -30,6 +30,7 @@ limitations under the License.
 #include "flutter/cpp/mlperf_driver.h"
 #include "flutter/cpp/proto/mlperf_task.pb.h"
 #include "flutter/cpp/utils.h"
+#include "google/protobuf/text_format.h"
 #include "tensorflow/lite/tools/command_line_flags.h"
 
 namespace mlperf {
@@ -169,7 +170,7 @@ int Main(int argc, char *argv[]) {
             benchmark_id = "natural_language_processing";
             break;
           case DatasetConfig::ADE20K:
-            benchmark_id = "image_segmentation_v1";
+            benchmark_id = "image_segmentation_v2";
             break;
           case DatasetConfig::SNUSR:
             benchmark_id = "super_resolution";
diff --git a/flutter/cpp/c/dll_export.def b/flutter/cpp/c/dll_export.def
index ec6da03..aaad83e 100644
--- a/flutter/cpp/c/dll_export.def
+++ b/flutter/cpp/c/dll_export.def
@@ -13,3 +13,5 @@ EXPORTS
     mlperf_backend_get_output_count
     mlperf_backend_get_output_type
     mlperf_backend_get_output
+    mlperf_backend_get_buffer
+    mlperf_backend_release_buffer
diff --git a/flutter/windows/windows.mk b/flutter/windows/windows.mk
index de76cfd..92ea576 100644
--- a/flutter/windows/windows.mk
+++ b/flutter/windows/windows.mk
@@ -33,6 +33,48 @@ flutter/windows/libs:
 		${BAZEL_LINKS_PREFIX}bin/flutter/cpp/flutter/backend_bridge.dll
 	chmod 777 --recursive ${flutter_windows_libs_folder}
 
+flutter_windows_cmdline_folder=output/flutter-windows/cmdline
+.PHONY: flutter/windows/cmdline
+flutter/windows/cmdline:
+	bazel ${BAZEL_OUTPUT_ROOT_ARG} --output_base=C:\\b_cache1\\ build ${BAZEL_CACHE_ARG} ${bazel_links_arg} \
+		--config=windows_arm64 \
+		--cpu=x64_arm64_windows --worker_verbose\
+		${backend_tflite_windows_target} \
+		${backend_qti_windows_target} \
+		//flutter/cpp/binary:main
+	rm -rf ${flutter_windows_cmdline_folder}
+	mkdir -p ${flutter_windows_cmdline_folder}
+	cp -f --target-directory ${flutter_windows_cmdline_folder} \
+		${backend_tflite_windows_files} \
+		${backend_qti_windows_files} \
+		${BAZEL_LINKS_PREFIX}bin/flutter/cpp/binary/main.exe
+	chmod 777 --recursive ${flutter_windows_cmdline_folder}
+
+# set parameters before running `make flutter/windows/cmdline/release`
+FLUTTER_MSVC_ARM_DLLS?=
+flutter_windows_cmd_releases=output/flutter-windows-releases
+.PHONY: flutter/windows/cmdline/release
+flutter/windows/cmdline/release: \
+	flutter/windows/cmdline/release/prepare-dlls \
+	flutter/windows/cmdline \
+	flutter/windows/cmdline/release/copy-dlls
+
+flutter_windows_arm_dlls_path=output/flutter-windows/win-redist-dlls
+flutter_windows_arm_dlls_list=msvcp140.dll vcruntime140.dll vcruntime140_1.dll msvcp140_codecvt_ids.dll
+.PHONY: flutter/windows/cmdline/release/prepare-dlls
+flutter/windows/cmdline/release/prepare-dlls:
+	@[ -n "${FLUTTER_MSVC_ARM_DLLS}" ] || (echo FLUTTER_MSVC_ARM_DLLS env must be set; exit 1)
+
+	rm -rf ${flutter_windows_arm_dlls_path}
+	mkdir -p ${flutter_windows_arm_dlls_path}
+	currentDir=$$(pwd) && cd "${FLUTTER_MSVC_ARM_DLLS}" && \
+		cp  --target-directory $$currentDir/${flutter_windows_arm_dlls_path} ${flutter_windows_arm_dlls_list}
+
+.PHONY: flutter/windows/cmdline/release/copy-dlls
+flutter/windows/cmdline/release/copy-dlls:
+	currentDir=$$(pwd) && cd "${flutter_windows_arm_dlls_path}" && \
+		cp  --target-directory $$currentDir/${flutter_windows_cmdline_folder} ${flutter_windows_arm_dlls_list}
+
 # set parameters before running `make flutter/windows/release`
 FLUTTER_MSVC_DLLS?=
 FLUTTER_RELEASE_NAME?=
diff --git a/mobile_back_qti/BUILD b/mobile_back_qti/BUILD
index 2594697..0f80bdc 100644
--- a/mobile_back_qti/BUILD
+++ b/mobile_back_qti/BUILD
@@ -1,4 +1,4 @@
-# Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+# Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -25,11 +25,31 @@ config_setting(
     values = {"cpu": "arm64-v8a"},
 )
 
+cc_import(
+  name = "snpewindowslib",
+  hdrs = glob([
+    SNPE_VERSION + "/include/zdl/**/*.hpp",
+    SNPE_VERSION + "/include/zdl/**/*.h",
+  ]),
+  interface_library = SNPE_VERSION + "/lib/aarch64-windows-vc19/SNPE.lib",
+  shared_library = SNPE_VERSION + "/lib/aarch64-windows-vc19/SNPE.dll",
+)
+
+cc_library(
+    name = "snpe_depsdll",
+    srcs = [
+        SNPE_VERSION + "/lib/aarch64-windows-vc19/SNPE.dll",
+        SNPE_VERSION + "/lib/aarch64-windows-vc19/SnpeHtpV68Stub.dll",
+        SNPE_VERSION + "/lib/dsp/libSnpeHtpV68Skel.so",
+    ],
+    deps = [":snpewindowslib",],
+    linkstatic = 0,
+)
+
 cc_library(
     name = "snpe",
     srcs = [
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSNPE.so",
-        SNPE_VERSION + "/lib/aarch64-android-clang8.0/libhta.so",
     ],
     hdrs = glob([
         SNPE_VERSION + "/include/zdl/**/*.hpp",
@@ -43,14 +63,14 @@ cc_library(
     name = "snpe_deps",
     srcs = [
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libhta.so",
-        SNPE_VERSION + "/lib/aarch64-android-clang8.0/libsnpe_dsp_domains_v2.so",
+        SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSnpeHtpV73Stub.so",
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSnpeHtpV69Stub.so",
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSnpeHtpV68Stub.so",
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSNPE.so",
         SNPE_VERSION + "/lib/aarch64-android-clang8.0/libSnpeHtpPrepare.so",
-        SNPE_VERSION + "/lib/dsp/libsnpe_dsp_v66_domains_v2_skel.so",
         SNPE_VERSION + "/lib/dsp/libSnpeHtpV69Skel.so",
         SNPE_VERSION + "/lib/dsp/libSnpeHtpV68Skel.so",
+        SNPE_VERSION + "/lib/dsp/libSnpeHtpV73Skel.so",
     ],
 )
 
@@ -72,3 +92,20 @@ cc_library(
         ],
     }),
 )
+
+cc_library(
+    name = "qtibackenddll",
+    srcs = select({
+        "//conditions:default": [
+            "//mobile_back_qti/cpp/backend_mock_qti:libqtibackend.dll",
+        ],
+        ":android_arm64": [
+            "//mobile_back_qti/cpp/backend_qti:libqtibackend.dll",
+        ],
+    }),
+    deps = [
+        ":snpewindowslib",
+        ":snpe_depsdll",
+        ],
+    linkstatic = 0,
+)
diff --git a/mobile_back_qti/DLC/Makefile b/mobile_back_qti/DLC/Makefile
index dec0932..cd155d3 100644
--- a/mobile_back_qti/DLC/Makefile
+++ b/mobile_back_qti/DLC/Makefile
@@ -1,4 +1,4 @@
-# Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+# Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -22,19 +22,22 @@ DATASETS_OUT:=${DATASETS}/output
 CALIBRATION_DATA:=${DATASETS_OUT}/calibration_set
 MLPERF_DATASETS:=${DATASETS_OUT}/mlperf_datasets
 
-all: ${DATASETS_OUT}/state/calibration.stamp hta-dlc htp-dlc
+all: ${DATASETS_OUT}/state/calibration.stamp htp-dlc
 
 # Download and build datasets and calibration files
 ${DATASETS_OUT}/state/calibration.stamp:
 	@(cd ${TOPDIR}/datasets && make)
 
-.PHONY: hta-dlc htp-dlc dependencies gen-hta-dlc-info gen-htp-dlc-info clean
+.PHONY: htp-quantized-dlc htp-dlc dependencies gen-hta-dlc-info gen-htp-dlc-info clean
 
 DLCBUILDDIR=${BUILDDIR}/DLC
 MODEL_BASE_PATH=${DLCBUILDDIR}/mobile
 MOBILENETEDGETPU_MODEL_PATH=${MODEL_BASE_PATH}/vision/mobilenet/models_and_code/checkpoints/float
 MOBILEBERT_MODEL_PATH=${MODEL_BASE_PATH}/language/bert/models_and_code/checkpoints/quant/
 MOBILEMOSAIC_MODEL_PATH=${MODEL_BASE_PATH}/vision/mosaic/models_and_checkpoints/R4/
+SNUSR_MODEL_PATH = ${MODEL_BASE_PATH}/vision/edsr/models_and_checkpoints/checkpoints/f32b5/ckpt_qat/
+SNUSR_CALIBRATION_PATH=${MODEL_BASE_PATH}/calibration/OpenImages
+MLPERF_MODELS_PATH = ${DLCBUILDDIR}/mlperf_models/
 
 ${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp:
 	# Building mlperf_mobile docker
@@ -48,9 +51,11 @@ ${DLCBUILDDIR}/mlperf_mosaic_docker.stamp:
 	mkdir -p ${DLCBUILDDIR}
 	touch $@
 
-hta-dlc: ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_hta.stamp \
-	${DLCBUILDDIR}/ssd_mobiledet_qat_hta.stamp \
-	${DLCBUILDDIR}/mobile_mosaic_hta.stamp \
+${DLCBUILDDIR}/mlperf_snusr_docker.stamp:
+	# Building snusr docker
+	docker image build -t mlperf_snusr:1.0 $(dir $(abspath ${TOPDIR}/mobile_back_qti/docker/mlperf_snusr/Dockerfile))
+	mkdir -p ${DLCBUILDDIR}
+	touch $@
 
 htp-dlc: ${DLCBUILDDIR}/mobilebert_htp.stamp \
 	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.stamp \
@@ -58,28 +63,47 @@ htp-dlc: ${DLCBUILDDIR}/mobilebert_htp.stamp \
 	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.stamp \
 	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp \
 	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.stamp \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.stamp \
 	${DLCBUILDDIR}/mobile_mosaic_htp.stamp \
+	${DLCBUILDDIR}/snusr_htp.stamp
 
 mobilenet_edgetpu_batched: \
 	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.stamp \
     ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp \
+    ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.stamp \
+    ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.stamp \
    	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp
 
+8pg1: \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp
+
+7g1: \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp
+
+8g2: \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.stamp
+
+sd8cxg3: \
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.stamp
+
 mosaic: \
-	${DLCBUILDDIR}/mobile_mosaic_htp.stamp \
-	${DLCBUILDDIR}/mobile_mosaic_hta.stamp
+	${DLCBUILDDIR}/mobile_mosaic_htp.stamp
 
 mobilenet_edgetpu: \
-	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.stamp \
-	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_hta.stamp
+	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.stamp
 
 mobiledet: \
-	${DLCBUILDDIR}/ssd_mobiledet_qat_hta.stamp \
 	${DLCBUILDDIR}/ssd_mobiledet_qat_htp.stamp
 
 mobilebert: \
 	${DLCBUILDDIR}/mobilebert_htp.stamp
 
+snusr : \
+	${DLCBUILDDIR}/snusr_htp.stamp
+
+mlperf_models: \
+	${DLCBUILDDIR}/mlperf_models.stamp
 
 ${BUILDDIR}/datasets.stamp:
 	(cd ../datasets && make)
@@ -91,9 +115,15 @@ ${DLCBUILDDIR}/mobile/.stamp:
 	(cd ${DLCBUILDDIR} && git clone --depth=1 https://github.com/mlcommons/mobile_open.git mobile)
 	touch $@
 
+${DLCBUILDDIR}/mlperf_models.stamp:
+	# Creating folder to store required models
+	(mkdir -p ${MLPERF_MODELS_PATH})
+	touch $@
+
 ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float.dlc: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# Mobilenetedge TPU model conversion ....
 	# Float model
 	mkdir -p ${DLCBUILDDIR}
@@ -112,33 +142,30 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float.dlc: \
 ${DLCBUILDDIR}/imagenet/imagenet_image_list.txt: ${DLCBUILDDIR}/imagenet/state/quantdata.stamp
 	cat ${TOPDIR}/datasets/downloads/imagenet/cal_image_list_option_1.txt | sed "s!^!quantdata/!" | sed "s!JPEG!raw!" > $@
 
-${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_hta.stamp: \
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
-		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float.dlc
-	# Quantization of MobilenetEdgeTPU DLC for HTA
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float.dlc \
+		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt
+	# Quantization of MobilenetEdgeTPU DLC for HTP
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
 		-v ${SNPE_SDK}:/snpe_sdk \
 		-v ${DLCBUILDDIR}:/output \
-		-v ${DLCBUILDDIR}/imagenet:/imagenet-out \
-		-w /imagenet-out \
+		-v ${DLCBUILDDIR}/imagenet:/imagenet \
+		-w /imagenet \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float.dlc \
 			--input_list=imagenet_image_list.txt \
-			--output_dlc=/output/mobilenet_edgetpu_224_1.0_hta.dlc \
-			--enable_hta
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant.dlc \
 	# Mobilenetedge TPU model conversion completed
-	touch $@
 
 ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float.dlc \
-		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt
-	# Quantization of MobilenetEdgeTPU DLC for HTP
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant.stamp \
+	# Offline prepare of MobilenetEdgeTPU DLC for HTP
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
@@ -148,18 +175,18 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.stamp: \
 		-w /imagenet \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
-			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float.dlc \
-			--input_list=imagenet_image_list.txt \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant.dlc \
 			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp.dlc \
-			--enable_htp \
-			--htp_socs sm8350,sm7325,sm8450
+            --htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
 	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched.dlc: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# Mobilenetedge TPU model conversion ....
 	# Batched Float model
 	mkdir -p ${DLCBUILDDIR}
@@ -175,7 +202,7 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched.dlc: \
 			-d input "3,224,224,3" --out_node "MobilenetEdgeTPU/Predictions/Softmax" \
 			-o /output/mobilenet_edgetpu_224_1.0_float_batched.dlc
 
-${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.stamp: \
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
 		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched.dlc
@@ -189,18 +216,35 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.stamp: \
 		-w /imagenet-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float_batched.dlc \
 			--input_list=imagenet_image_list.txt \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched.dlc
+	# Mobilenetedge TPU model conversion completed
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched.stamp
+	# Offline prepare of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched.dlc \
 			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp_batched.dlc \
-			--enable_htp \
-			--htp_socs sm8350,sm7325,sm8450
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
 	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd7g1.dlc: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# Mobilenetedge TPU model conversion ....
 	# Batched Float model
 	mkdir -p ${DLCBUILDDIR}
@@ -216,7 +260,7 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd7g1.dlc: \
 			-d input "4,224,224,3" --out_node "MobilenetEdgeTPU/Predictions/Softmax" \
 			-o /output/mobilenet_edgetpu_224_1.0_float_batched_sd7g1.dlc
 
-${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp: \
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd7g1.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
 		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd7g1.dlc
@@ -230,18 +274,35 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp: \
 		-w /imagenet-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float_batched_sd7g1.dlc \
 			--input_list=imagenet_image_list.txt \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd7g1.dlc
+	# Mobilenetedge TPU model conversion completed
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd7g1.stamp
+	# Offline prepare of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd7g1.dlc \
 			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.dlc \
-			--enable_htp \
-			--htp_socs sm7450
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
 	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8pg1.dlc: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# Mobilenetedge TPU model conversion ....
 	# Batched Float model
 	mkdir -p ${DLCBUILDDIR}
@@ -257,7 +318,7 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8pg1.dlc: \
 			-d input "4,224,224,3" --out_node "MobilenetEdgeTPU/Predictions/Softmax" \
 			-o /output/mobilenet_edgetpu_224_1.0_float_batched_sd8pg1.dlc
 
-${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp: \
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8pg1.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
 		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8pg1.dlc
@@ -271,18 +332,151 @@ ${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp: \
 		-w /imagenet-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float_batched_sd8pg1.dlc \
 			--input_list=imagenet_image_list.txt \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8pg1.dlc
+	# Mobilenetedge TPU model conversion completed
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8pg1.stamp
+	# Offline prepare of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8pg1.dlc \
 			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc \
-			--enable_htp \
-			--htp_socs sm8475
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
+	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc ${MLPERF_MODELS_PATH}
+	touch $@
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8g2.dlc: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
+	# Mobilenetedge TPU model conversion ....
+	# Batched Float model
+	mkdir -p ${DLCBUILDDIR}
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${MOBILENETEDGETPU_MODEL_PATH}:/models \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-tensorflow-to-dlc \
+			-i /models/frozen_graph_tf1x_transform.pb \
+			-d input "3,224,224,3" --out_node "MobilenetEdgeTPU/Predictions/Softmax" \
+			-o /output/mobilenet_edgetpu_224_1.0_float_batched_sd8g2.dlc
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8g2.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8g2.dlc
+	# Quantization of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-v ${DLCBUILDDIR}/imagenet:/imagenet-out \
+		-w /imagenet-out \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float_batched_sd8g2.dlc \
+			--input_list=imagenet_image_list.txt \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8g2.dlc
 	# Mobilenetedge TPU model conversion completed
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8g2.stamp
+	# Offline prepare of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8g2.dlc \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.dlc \
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
+	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.dlc ${MLPERF_MODELS_PATH}
+	touch $@
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8cxg3.dlc: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
+	# Mobilenetedge TPU model conversion ....
+	# Batched Float model
+	mkdir -p ${DLCBUILDDIR}
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${MOBILENETEDGETPU_MODEL_PATH}:/models \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-tensorflow-to-dlc \
+			-i /models/frozen_graph_tf1x_transform.pb \
+			-d input "8,224,224,3" --out_node "MobilenetEdgeTPU/Predictions/Softmax" \
+			-o /output/mobilenet_edgetpu_224_1.0_float_batched_sd8cxg3.dlc
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8cxg3.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/imagenet/imagenet_image_list.txt \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_float_batched_sd8cxg3.dlc
+	# Quantization of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-v ${DLCBUILDDIR}/imagenet:/imagenet-out \
+		-w /imagenet-out \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_float_batched_sd8cxg3.dlc \
+			--input_list=imagenet_image_list.txt \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8cxg3.dlc
+	# Mobilenetedge TPU model conversion completed
+
+${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.stamp: \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_quant_batched_sd8cxg3.stamp
+	# Offline prepare of MobilenetEdgeTPU Batched DLC for HTP
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilenet_edgetpu_224_1.0_quant_batched_sd8cxg3.dlc \
+			--output_dlc=/output/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.dlc \
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
+	# Mobilenetedge TPU model conversion completed
+	cp	${DLCBUILDDIR}/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/ssd_mobiledet_qat.dlc: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
@@ -302,52 +496,48 @@ ${DLCBUILDDIR}/ssd_mobiledet_qat.dlc: \
 ${DLCBUILDDIR}/coco/coco_image_list.txt: ${DLCBUILDDIR}/coco/state/quantdata.stamp
 	cat ${TOPDIR}/datasets/util/coco/coco_calibration_files.txt | sed "s!^!quantdata/!" | sed "s!jpg!raw!" > ${DLCBUILDDIR}/coco/coco_image_list.txt
 
-${DLCBUILDDIR}/ssd_mobiledet_qat_hta.stamp: \
+${DLCBUILDDIR}/ssd_mobiledet_qat_quant.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DLCBUILDDIR}/coco/coco_image_list.txt \
 		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp \
 		${DLCBUILDDIR}/ssd_mobiledet_qat.dlc
-	# Quantization of MobileDET SSD DLC for HTA
+	# Quantization of MobileDET SSD DLC for HTP
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
 		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${MOBILEDETSSDQAT_MODEL_PATH}:/models \
 		-v ${DLCBUILDDIR}:/output \
 		-v ${DLCBUILDDIR}/coco:/coco-out \
 		-w /coco-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/ssd_mobiledet_qat.dlc \
 			--input_list=coco_image_list.txt \
-			--output_dlc=/output/ssd_mobiledet_qat_hta.dlc \
-			--enable_hta --hta_partitions sm8250
-	# SSD MobileDET model conversion for HTA completed
-	touch $@
+			--output_dlc=/output/ssd_mobiledet_qat_quant.dlc
+	# SSD MobileDET model quantization completed
+
 
 ${DLCBUILDDIR}/ssd_mobiledet_qat_htp.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/coco/coco_image_list.txt \
-		${DLCBUILDDIR}/mobile/.stamp \
-		${DLCBUILDDIR}/ssd_mobiledet_qat.dlc
-	# Quantization of MobileDET SSD DLC for HTP
+		${DLCBUILDDIR}/ssd_mobiledet_qat_quant.stamp
+	# Offline prepare of MobileDET SSD DLC for HTP
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
 		-v ${SNPE_SDK}:/snpe_sdk \
-		-v ${MOBILEDETSSDQAT_MODEL_PATH}:/models \
 		-v ${DLCBUILDDIR}:/output \
-		-v ${DLCBUILDDIR}/coco:/coco-out \
-		-w /coco-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
-			--input_dlc=/output/ssd_mobiledet_qat.dlc \
-			--input_list=coco_image_list.txt \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/ssd_mobiledet_qat_quant.dlc \
 			--output_dlc=/output/ssd_mobiledet_qat_htp.dlc \
-			--enable_htp \
-			--htp_socs sm8350,sm7325,sm8450
-	# SSD MobileDET model conversion for HTP completed
+			--set_output_layers=Postprocessor/BatchMultiClassNonMaxSuppression \
+			--htp_socs=sm8350,sm7325,sm8450,sm8550,sm7475
+	# SSD MobileDET model offline prepare for HTP completed
+	cp	${DLCBUILDDIR}/ssd_mobiledet_qat_htp.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/ade20k/ade20k_image_list.txt: ${DLCBUILDDIR}/ade20k/state/quantdata.stamp
@@ -356,7 +546,8 @@ ${DLCBUILDDIR}/ade20k/ade20k_image_list.txt: ${DLCBUILDDIR}/ade20k/state/quantda
 
 ${DLCBUILDDIR}/mobilebert_quant.pb: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# MobileBERT quant model freeze ....
 	mkdir -p ${DLCBUILDDIR}
 	docker run \
@@ -378,7 +569,8 @@ ${DLCBUILDDIR}/mobilebert_float.dlc: \
 		${DLCBUILDDIR}/mobilebert_quant.pb \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DATASETS_OUT}/state/calibration.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# MobileBERT TF to DLC conversion
 	mkdir -p ${DLCBUILDDIR}
 	docker run \
@@ -389,7 +581,6 @@ ${DLCBUILDDIR}/mobilebert_float.dlc: \
 		-v ${DLCDIR}:/dlc \
 		-v ${MOBILEBERT_MODEL_PATH}:/models \
 		-u ${USERID}:${GROUPID} \
-		-w /output \
 		mlperf_mobile:1.1 \
 		/snpe_sdk/bin/x86_64-linux-clang/snpe-tensorflow-to-dlc \
 			--input_network /output/mobilebert_quant.pb \
@@ -403,8 +594,7 @@ ${DLCBUILDDIR}/mobilebert_float.dlc: \
 			-o /output/mobilebert_float.dlc
 	# MobileBERT Float DLC conversion completed
 
-
-${DLCBUILDDIR}/mobilebert_htp.stamp: \
+${DLCBUILDDIR}/mobilebert_quant.stamp: \
 		${DLCBUILDDIR}/mobilebert_float.dlc \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DATASETS}/output/state/squad_calibration.stamp
@@ -419,21 +609,38 @@ ${DLCBUILDDIR}/mobilebert_htp.stamp: \
 		-w /squad-out \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobilebert_float.dlc \
 			--input_list=input_list.txt \
 			--weights_bitwidth 8 \
 			--act_bitwidth 8 \
-			--enable_htp \
-			--htp_socs sm7325,sm8350,sm8450 \
-			--use_encoding_optimizations \
-			--output_dlc=/output/mobilebert_quantized_htp.dlc
+			--override_params \
+			--output_dlc=/output/mobilebert_quant.dlc
+
+${DLCBUILDDIR}/mobilebert_htp.stamp: \
+		${DLCBUILDDIR}/mobilebert_quant.stamp \
+		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+	# MobileBERT quant model offline prepare ...
+	mkdir -p ${DLCBUILDDIR}
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobilebert_quant.dlc \
+			--output_dlc=/output/mobilebert_quantized_htp.dlc \
+			--set_output_layers=transpose \
+			--htp_socs=sm7325,sm8350,sm8450,sm8550,sm7475
+	cp	${DLCBUILDDIR}/mobilebert_quantized_htp.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
 ${DLCBUILDDIR}/mobile_mosaic_float.dlc: \
 		${DLCBUILDDIR}/mobile/.stamp \
 		${DLCBUILDDIR}/mlperf_mosaic_docker.stamp \
-		${DLCBUILDDIR}/mobile/.stamp
+		${DLCBUILDDIR}/mlperf_models.stamp
 	# Mobile Mosaic model conversion ....
 	# Mobile Mosaic QAT model
 	docker run \
@@ -451,7 +658,7 @@ ${DLCBUILDDIR}/mobile_mosaic_float.dlc: \
 			-o /output/mobile_mosaic_float.dlc
 	# Generated DLC from mobile Mosaic QAT model
 
-${DLCBUILDDIR}/mobile_mosaic_htp.stamp: \
+${DLCBUILDDIR}/mobile_mosaic_quant.stamp: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		${DLCBUILDDIR}/ade20k/ade20k_image_list.txt \
 		${DLCBUILDDIR}/mobile_mosaic_float.dlc
@@ -465,47 +672,119 @@ ${DLCBUILDDIR}/mobile_mosaic_htp.stamp: \
 		-w /ade20k \
 		-u ${USERID}:${GROUPID} \
 		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
 			--input_dlc=/output/mobile_mosaic_float.dlc \
 			--input_list=ade20k_image_list.txt \
+			--output_dlc=/output/mobile_mosaic_quant.dlc \
+			--optimizations cle
+	#Mobile Mosaic model quantization completed
+
+${DLCBUILDDIR}/mobile_mosaic_htp.stamp: \
+        ${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
+		${DLCBUILDDIR}/mobile_mosaic_quant.stamp \
+	# Offline prepare of Mobile Mosaic DLC
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_mobile:1.1 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/mobile_mosaic_quant.dlc \
 			--output_dlc=/output/mobile_mosaic_htp.dlc \
-			--enable_htp \
-			--optimizations cle \
-			--optimizations bc \
-			--use_encoding_optimizations \
-			--htp_socs sm8450,sm8350,sm7325
-	#Mobile Mosaic HTP model conversion completed
+			--htp_socs=sm7325,sm8350,sm8450,sm8550,sm7475
+	#Mobile Mosaic HTP model offline prepare completed
+	cp	${DLCBUILDDIR}/mobile_mosaic_htp.dlc ${MLPERF_MODELS_PATH}
 	touch $@
 
-${DLCBUILDDIR}/mobile_mosaic_hta.stamp: \
-		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		${DLCBUILDDIR}/ade20k/ade20k_image_list.txt \
-		${DLCBUILDDIR}/mobile_mosaic_float.dlc
-	# Quantization of Mobile Mosaic DLC
+${DLCBUILDDIR}/snusr_float.dlc: \
+		${DLCBUILDDIR}/mlperf_snusr_docker.stamp \
+		${DLCBUILDDIR}/mobile/.stamp \
+		${DLCBUILDDIR}/mlperf_models.stamp
+	# SNUSR model conversion ....
+	# Float model
+	mkdir -p ${DLCBUILDDIR}
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNUSR_MODEL_PATH}:/models \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_snusr:1.0 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-tensorflow-to-dlc \
+			-i /models \
+			-d input_1 "1,540,960,3" --out_node "lambda_1" \
+			-o /output/snusr_float.dlc
+	# SNUSR float DLC completed		
+	touch $@
+
+${DLCBUILDDIR}/snusr_quant.stamp: \
+        ${DLCBUILDDIR}/mlperf_snusr_docker.stamp \
+		${DLCBUILDDIR}/snusr_float.dlc \
+		${DLCBUILDDIR}/snusr_calibration_list.txt
+	# Offline prepare of SNUSR DLC
 	docker run \
 		-e PYTHONPATH=/snpe_sdk/lib/python \
 		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
 		-v ${SNPE_SDK}:/snpe_sdk \
 		-v ${DLCBUILDDIR}:/output \
-		-v ${DLCBUILDDIR}/ade20k:/ade20k \
-		-w /ade20k \
+		-v ${DLCBUILDDIR}/snusr/:/snusr \
+		-w /snusr \
+		-v ${TOPDIR}:/dir \
 		-u ${USERID}:${GROUPID} \
-		mlperf_mobile:1.1 \
-		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quantize \
-			--input_dlc=/output/mobile_mosaic_float.dlc \
-			--input_list=ade20k_image_list.txt \
-			--output_dlc=/output/mobile_mosaic_hta.dlc \
-			--enable_hta \
-			--optimizations cle \
-			--optimizations bc
-	#Mobile Mosaic HTA model conversion completed
+		mlperf_snusr:1.0 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-quant \
+			--input_dlc=/output/snusr_float.dlc \
+			--input_list=snusr_calibration_list.txt \
+			--output_dlc=/output/snusr_quant.dlc \
+	#SNUSR offline prepare completed
 	touch $@
 
+${DLCBUILDDIR}/snusr_htp.stamp: \
+        ${DLCBUILDDIR}/mlperf_snusr_docker.stamp \
+		${DLCBUILDDIR}/snusr_quant.stamp \
+		${DLCBUILDDIR}/snusr_calibration_list.txt
+	#HTP Graph prepare of SNUSR DLC
+	docker run \
+		-e PYTHONPATH=/snpe_sdk/lib/python \
+		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
+		-v ${SNPE_SDK}:/snpe_sdk \
+		-v ${DLCBUILDDIR}:/output \
+		-u ${USERID}:${GROUPID} \
+		mlperf_snusr:1.0 \
+		/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-graph-prepare \
+			--input_dlc=/output/snusr_quant.dlc \
+			--output_dlc=/output/snusr_htp.dlc \
+			--htp_socs=sm7325,sm8350,sm8450,sm8550,sm7475
+	#HTP Graph prepare of SNUSR model completed
+	cp	${DLCBUILDDIR}/snusr_htp.dlc ${MLPERF_MODELS_PATH}
+	touch $@
 
 ####################################################################################
 # CALIBRATION / QUANTIZATION
 ####################################################################################
 
+# OpenSR calibration data preprocessing
+${DLCBUILDDIR}/snusr_calibration_list.txt: \
+			${DLCBUILDDIR}/mlperf_snusr_docker.stamp \
+			${DATASETS}/output/state/snusr_calibration.stamp 
+	# Preparing SNUSR dataset
+	mkdir -p ${DATASETS}/output/snusr/_raws
+	docker run \
+		-v ${TOPDIR}/mobile_back_qti/DLC/util/:/util \
+		-v ${DATASETS}/output/snusr/:/snusr \
+		-v ${SNUSR_CALIBRATION_PATH}:/calibration \
+		-u ${USERID}:${GROUPID} \
+		mlperf_snusr:1.0 \
+		python3 /util/snusr/rgb8_to_raw.py /snusr/ /calibration/OpenImages_calibration_rgb8.txt
+	mkdir -p ${DLCBUILDDIR}/snusr
+	mv ${DATASETS}/output/snusr/_raws ${DLCBUILDDIR}/snusr/ 
+	touch ${DLCBUILDDIR}/snusr/snusr_calibration_list.txt
+	ls ${DLCBUILDDIR}/snusr/_raws | sed "s!^!_raws/!" > ${DLCBUILDDIR}/snusr/snusr_calibration_list.txt
+	touch $@
+
 # ADE20K calibration data preprocessing
 ${DLCBUILDDIR}/ade20k/state/resized.stamp: \
 		${DATASETS_OUT}/state/calibration.stamp \
@@ -611,24 +890,12 @@ ${DLCBUILDDIR}/coco/state/quantdata.stamp: \
 ${DATASETS}/output/state/squad_calibration.stamp:
 	(cd ${DATASETS} && make squad_calibration)
 
+${DATASETS}/output/state/snusr_calibration.stamp:
+	(cd ${DATASETS} && make snusr_calibration)
+
 ####################################################################################
 # DLC Info
 ####################################################################################
-gen-hta-dlc-info: \
-		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
-		hta-dlc
-	docker run \
-		-e PYTHONPATH=/snpe_sdk/lib/python \
-		-e LD_LIBRARY_PATH=/snpe_sdk/lib/x86_64-linux-clang \
-		-v ${SNPE_SDK}:/snpe_sdk \
-		-v ${DLCBUILDDIR}:/dlc \
-		-u ${USERID}:${GROUPID} \
-		mlperf_mobile:1.1 \
-		/bin/bash -c '\
-			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_hta.dlc && \
-			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/ssd_mobiledet_qat_htp.dlc && \
-			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobile_mosaic_hta.dlc'
-
 gen-htp-dlc-info: \
 		${DLCBUILDDIR}/mlperf_mobile_docker_1_1.stamp \
 		htp-dlc
@@ -643,9 +910,12 @@ gen-htp-dlc-info: \
 			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp.dlc && \
 			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/ssd_mobiledet_qat_htp.dlc && \
 			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched.dlc && \
-			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.stamp && \
-            /snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.stamp && \
+			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.dlc && \
+            /snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc && \
+            /snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.dlc && \
+            /snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilenet_edgetpu_224_1.0_htp_batched_sd8cxg3.dlc && \
 			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobile_mosaic_htp.dlc && \
+			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/snusr_htp.dlc && \
 			/snpe_sdk/bin/x86_64-linux-clang/snpe-dlc-info -i /dlc/mobilebert_quantized_htp.dlc'
 
 ####################################################################################
diff --git a/mobile_back_qti/DLC/util/snusr/rgb8_to_raw.py b/mobile_back_qti/DLC/util/snusr/rgb8_to_raw.py
new file mode 100644
index 0000000..73723ae
--- /dev/null
+++ b/mobile_back_qti/DLC/util/snusr/rgb8_to_raw.py
@@ -0,0 +1,42 @@
+#!/bin/bash
+# Copyright (c) 2022-2023 Qualcomm Innovation Center, Inc. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+##########################################################################
+
+import os 
+import sys
+import numpy as np
+from os import listdir
+from os.path import isfile, join, isdir
+from io import BytesIO
+from PIL import Image
+
+model_name = sys.argv[1]
+calibration_path = sys.argv[2]
+DATA_PATH = model_name
+RAW_DATA_PATH = model_name + "_raws"
+
+calibration_list = []
+with open(calibration_path, 'r') as g:
+	calibration_list = [line.rstrip() for line in g.readlines()]
+image_list = [f for f in calibration_list if isfile(join(DATA_PATH, f))]
+for image in image_list:
+    src = DATA_PATH + '/' + image
+    dst = RAW_DATA_PATH + '/' + image
+    with open(src, 'rb') as f:
+        path_str = np.fromfile(f,np.uint8).astype(np.float32)
+    npimage = np.asarray(path_str).astype(np.float32)
+    img_ndarray = np.array(npimage)
+    f_name = dst[:-4] + '.raw'
+    npimage.astype(np.float32).tofile(f_name)
diff --git a/mobile_back_qti/README.md b/mobile_back_qti/README.md
index f3a7a4b..657c7f9 100644
--- a/mobile_back_qti/README.md
+++ b/mobile_back_qti/README.md
@@ -1,29 +1,21 @@
-# MLPerf Mobile App SNPE Backend
+# MLPerf app for Android and Windows on Arm with SNPE Backend
 
-This subdirectory contains the QTI backend for the MLPerf mobile app, an app-based
-implementationn of [MLPerf Inference](https://github.com/mlperf/inference) tasks.
+This subdirectory contains the QTI backend for the MLPerf app, an app-based
+implementation of [MLPerf Inference](https://github.com/mlperf/inference) tasks.
 
-## Overview
+## MLPerf Flutter app for mobile
 
-This repository builds the libqtibackend.so backend and prepares the libraries and
-SNPE DLC files for integration with the MLPerf app. These DLC files have been
+Following instructions build the libqtibackend.so backend and prepares the libraries and
+SNPE DLC files for integration with the MLPerf flutter app. These DLC files have been
 uploaded with the other submission files to here: `<path where needs to be uploaded>`
 
 ## Requirements
 
 <!-- markdown-link-check-disable-next-line -->
-* [SNPE SDK](https://developer.qualcomm.com/downloads/qualcomm-neural-processing-sdk-ai-v1650)
-  * Version 1.65.0
+* [SNPE SDK](https://developer.qualcomm.com/software/qualcomm-neural-processing-sdk/tools)
+  * Version 2.7.0
 * Linux machine capable of running Ubuntu 18.04 docker images
 
-After downloading and unzipping the SNPE SDK, make sure to set SNPE_SDK to its location:
-
-```shell
-cd /opt
-unzip snpe-1.65.0_rc2_3676.zip
-export SNPE_SDK=/opt/snpe-1.65.0.3676
-```
-
 ### Optional
 
 If you wish to rebuild the DLC files yourself, you will have these additional requirements:
@@ -40,13 +32,16 @@ export GITHUB_TOKEN=<your-personal-access-token>
 cd DLC/ && make
 ```
 
-It will take 5-6 hours on an 8-core Xeon workstation to generate the DLC files.
+It will take 2 hours on an 8-core Xeon workstation to generate the DLC files.
 
 ## Building the MLPerf app with the QTI backend
+Clone mlperf_app_open
+```shell
+git clone https://github.com/mlcommons/mobile_app_open
+cd mobile_app_open
+```
 
-Manual steps:
-
-* Extract the SNPE SDK (from Requirements above) and set SNPE_SDK to its location.
+* Download and extract the SNPE SDK (from Requirements above) to mobile_app_open/mobile_back_qti
 
 * If you have an HTTP proxy, you may need the following
 
@@ -55,15 +50,22 @@ sudo apt install ca-certificates-java
 export USE_PROXY_WORKAROUND=1
 ```
 
-Clone mlperf_app_open and build with the following build commands.
+Build with the following build command.
 
 ```shell
-git clone https://github.com/mlcommons/mobile_app_open
-cd mobile_app_open
-make WITH_QTI=1 docker/flutter/android/apk
+make OFFICIAL_BUILD=true FLUTTER_BUILD_NUMBER=1  WITH_QTI=1 docker/flutter/android/release
 ```
 
-This will build the QTI backend into the MLPerf app.
+This will generate the MLPerf flutter app with QTI backend in ```mobile_app_open/output/android-apks/release.apk```
+
+## Building the QTI backend lib
+
+To build only the QTI backend:
+
+```shell
+git clone https://github.com/mlcommons/mobile_app_open
+make WITH_QTI=1 libqtibackend
+```
 
 ## Backend Specific Task Config file
 
@@ -71,18 +73,71 @@ The task config settings are embedded in libqtibackend.so. These settings contai
 backend specific data for each task to be run. This backend assumes a few things about
 the settings:
 
-1. All the models use "SNPE" for the configuration name and use "snpe_aip", "snpe_dsp",
-   "psnpe_aip", or "psnpe_dsp" for the accelerator value when using SNPE / PSNPE.
+1. All the models use "SNPE" for the configuration name and use "snpe_dsp" or "psnpe_dsp" for the accelerator value when using SNPE / PSNPE.
 
-## FAQ
+## MLPerf Commandline app for Windows on Arm
 
-### Do I need to build the DLC files?
+Following instructions build the libqtibackend backend and prepares the binaries for running the MLPerf commandline app on Windows. The DLC files have been
+uploaded with the other submission files to here: `<path where needs to be uploaded>`
+
+## Requirements
+
+<!-- markdown-link-check-disable-next-line -->
+* [SNPE windows SDK] (https://developer.qualcomm.com/software/qualcomm-neural-processing-sdk/tools)
+  * Version 2.7.0
+* Windows x86 machine
+## Setting up the environment
 
-No, the information to build the DLC files is only to show how they are created. But if you want, you may.
+* Install Visual Studio (atleast 2019): <https://visualstudio.microsoft.com/vs/> with ARM compilers. 
+* Visual Studio Community: <https://learn.microsoft.com/en-us/visualstudio/releases/2019/release-notes> is also supported.
+* Add 2019 in the name of the BAZEL_VC path
+* Follow the windows setup intructions from [here](https://github.com/mlcommons/mobile_app_open/blob/master/docs/environment-setup/env-setup-windows.md) 
+    * Flutter and protoc installation is not required
+    * Make sure to install the tested environment library versions `Use --version during choco install`
+
+
+## Building the MLPerf commandline app for Windows on Arm
+Clone mlperf_app_open
+```shell
+git clone https://github.com/mlcommons/mobile_app_open
+cd mobile_app_open
+git checkout <Qualcomm's branch>
+```
+
+Download and extract the SNPE SDK (from Requirements above) to mobile_app_open/mobile_back_qti
+
+Build with the following build command.
+
+```shell
+make WITH_QTI=1 WITH_TFLITE=0 FLUTTER_MSVC_ARM_DLLS=<path to arm64 RT files> flutter/windows/cmdline/release
+```
+```shell
+Sample path to arm64RT files: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Redist\MSVC\14.29.30133\arm64\Microsoft.VC142.CRT"
+```
+This will generate binary files in output\flutter-windows\cmdline
+
+## Running the commandline app on Windows on Arm
+* push all the command line files in to the Windows device.
+* push all the datasets to the device to C:\Dropbox\lite_datasets and complete datasets to C:\Dropbox\mlperf_datasets
+* push all the models to the device to C:\Dropbox\mlperf_models
+* open powershell on the device. CD to the cmdline folder on the device.
+
+Run performance mode with following command
+```shell
+.\run_performance_tests.bat --models <path to mlperf_models> --dataset <path to mlperf_lite_datasets>
+```
+Run accuracy mode with following command
+```shell
+.\run_accuracy_test.bat --models <path to mlperf_models> --dataset <path to mlperf_datasets>
+```
+* see the results in accuracy_results.txt and performance_results.txt
+
+
+## FAQ
 
 ### What devices does this backend support?
 
-This backend only supports SDM865/SDM865 Pro ,SDM888/SDM888 Pro, SDM778G, SD7G1, SD8G1, SD8Pro G1 devices.
+This backend only supports SDM888/SDM888 Pro, SDM778G, SD7G1, SD8G1, SD8Pro G1, SD8G2 devices.
 Other Snapdragon based devices will not run the MLPerf app. Future updates of the app will provide
 additional device support.
 
diff --git a/mobile_back_qti/cpp/backend_mock_qti/BUILD b/mobile_back_qti/cpp/backend_mock_qti/BUILD
index 1c52ab0..fbb1681 100644
--- a/mobile_back_qti/cpp/backend_mock_qti/BUILD
+++ b/mobile_back_qti/cpp/backend_mock_qti/BUILD
@@ -47,3 +47,12 @@ tflite_jni_binary(
     linkscript = "//flutter/cpp/c:version_script.lds",
     deps = [":qti_mock"],
 )
+
+cc_binary(
+    name = "libqtibackend.dll",
+    linkshared = 1,
+    win_def_file = "//android/cpp/c:dll_export.def",
+    deps = [
+        ":qti_mock",
+    ],
+)
diff --git a/mobile_back_qti/cpp/backend_qti/BUILD b/mobile_back_qti/cpp/backend_qti/BUILD
index 3fa182b..96e568b 100644
--- a/mobile_back_qti/cpp/backend_qti/BUILD
+++ b/mobile_back_qti/cpp/backend_qti/BUILD
@@ -1,4 +1,4 @@
-# Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+# Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -34,6 +34,11 @@ config_setting(
     values = {"cpu": "arm64-v8a"},
 )
 
+config_setting(
+    name = "windows_arm64",
+    values = {"cpu": "x64_arm64_windows"},
+)
+
 string_flag(
     name = "with_qti",
     build_setting_default = "1",
@@ -54,17 +59,35 @@ snpe_copts = [
     "-lc++_shared",
 ]
 
+cc_library(
+	name = "qti_settings",
+	srcs = [],
+	hdrs = [
+		"qti_settings.h",
+		"qti_settings_sd8cxg3.h",
+		"qti_settings_sd7g1.h",
+		"qti_settings_sd8g1.h",
+		"qti_settings_sd8g2.h",
+		"qti_settings_sd8pg1.h",
+		"qti_settings_sdm778.h",
+		"qti_settings_sdm888.h",
+		"qti_settings_sd7pg2.h",
+	],
+)
+
 cc_library(
     name = "qti_rpcmem",
     srcs = ["rpcmem.cc"],
     hdrs = [
         "cpuctrl.h",
-        "qti_settings.h",
         "rpcmem.h",
         "soc_utility.h",
     ],
     copts = tflite_copts() + snpe_copts,
-    deps = ["@org_tensorflow//tensorflow/core:tflite_portable_logging"],
+    deps = [
+            "@org_tensorflow//tensorflow/core:tflite_portable_logging",
+            ":qti_settings",
+    ],
     alwayslink = 1,
 )
 
@@ -93,25 +116,26 @@ cc_library(
 
 cc_library(
     name = "qti_c",
-    srcs = select({
-        "android_arm64": [
+    srcs = [
             "qti_c.cc",
             "cpuctrl.cc",
             "tflite_c.cc",
             "qti_backend_helper.cc",
             "soc_utility.cc",
         ],
-    }),
-    hdrs = [] + select({
-        "android_arm64": [
-            "qti_settings.h",
+    hdrs = [
             "cpuctrl.h",
             "tflite_c.h",
             "qti_backend_helper.h",
             "mlperf_helper.h",
             "soc_utility.h",
-        ],
-    }),
+        ] + select({
+            "android_arm64": [],
+            "windows_arm64": [
+                "acpitabl.h"
+            ],
+            "//conditions:default": [],
+        }),
     copts = tflite_copts() + snpe_copts,
     local_defines = ["SNPE_VERSION_STRING=" + SNPE_VERSION] +
                     select({
@@ -121,14 +145,19 @@ cc_library(
     deps = [
         "//flutter/cpp/c:headers",
         ":qti_allocator",
+        ":qti_settings",
+        "@org_tensorflow//tensorflow/core:tflite_portable_logging",
     ] + select({
         "android_arm64": [
+            "@org_tensorflow//tensorflow/lite/delegates/gpu:delegate",
             "@org_tensorflow//tensorflow/lite/c:c_api",
             "@org_tensorflow//tensorflow/lite/c:common",
-            "@org_tensorflow//tensorflow/lite/delegates/gpu:delegate",
-            "@org_tensorflow//tensorflow/core:tflite_portable_logging",
             "//mobile_back_qti:snpe",
         ],
+        "windows_arm64": [
+            "//mobile_back_qti:snpewindowslib",
+        ],
+        "//conditions:default": [],
     }),
     alwayslink = 1,
 )
@@ -141,6 +170,15 @@ tflite_jni_binary(
     ],
 )
 
+cc_binary(
+    name = "libqtibackend.dll",
+    linkshared = 1,
+    win_def_file = "//flutter/cpp/c:dll_export.def",
+    deps = [
+        ":qti_c",
+    ],
+)
+
 cc_binary(
     name = "qti_backend_test",
     srcs = [] + select({
diff --git a/mobile_back_qti/cpp/backend_qti/acpitabl.h b/mobile_back_qti/cpp/backend_qti/acpitabl.h
new file mode 100644
index 0000000..4f0b2f7
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/acpitabl.h
@@ -0,0 +1,3941 @@
+//==============================================================================
+//
+//  Copyright (c) 2020 Qualcomm Technologies, Inc.
+//  All Rights Reserved.
+//  Confidential and Proprietary - Qualcomm Technologies, Inc.
+//
+//==============================================================================
+
+#ifndef _ACPITABL_H
+#define _ACPITABL_H
+
+#pragma once
+
+#ifdef ASL_ASSEMBLER
+#undef PHYSICAL_ADDRESS
+#define PHYSICAL_ADDRESS ULONGLONG
+#endif
+
+#ifndef PHYSICAL_ADDRESS
+typedef LARGE_INTEGER PHYSICAL_ADDRESS, *PPHYSICAL_ADDRESS;
+#endif
+
+//
+// These map to bios provided structures, so turn on 1 byte packing
+//
+
+#include <pshpack1.h>
+
+// Generic Register Address Structure
+
+typedef struct _GEN_ADDR {
+    UCHAR               AddressSpaceID;
+    UCHAR               BitWidth;
+    UCHAR               BitOffset;
+    UCHAR               AccessSize;
+    PHYSICAL_ADDRESS    Address;
+} GEN_ADDR, *PGEN_ADDR;
+
+#define RSDP_SIGNATURE 0x2052545020445352       // "RSD PTR "
+
+typedef struct  _RSDP {     // Root System Description Table Pointer Structure
+    ULONGLONG       Signature;  // 8 UCHAR table signature 'RSD PTR '
+    UCHAR           Checksum;   // checksum for first 20 bytes of table (entire ACPI 1.0 table)
+    UCHAR           OEMID[6];   //      String that uniquely ID's the OEM
+    UCHAR           Revision;   // 0 - ACPI 1.0;  2 - ACPI 2.0
+    ULONG           RsdtAddress;// physical address of Root System Description Table  (1.0 table ended here)
+    ULONG           Length;     // Length of the table in bytes
+    PHYSICAL_ADDRESS XsdtAddress;// physical address of XSDT
+    UCHAR           XChecksum;  // checksum for entire table
+    UCHAR           Reserved[3];
+} RSDP, *PRSDP;
+
+#define RSDP_SEARCH_RANGE_BEGIN         0xE0000         // physical address where we begin searching for the RSDP
+#define RSDP_SEARCH_RANGE_END           0xFFFFF
+#define RSDP_SEARCH_RANGE_LENGTH        (RSDP_SEARCH_RANGE_END-RSDP_SEARCH_RANGE_BEGIN+1)
+#define RSDP_SEARCH_INTERVAL            16      // search on 16 byte boundaries
+
+//
+// Maximum lengths in bytes
+//
+
+#define ACPI_MAX_SIGNATURE       4
+#define ACPI_MAX_OEM_ID          6
+#define ACPI_MAX_TABLE_ID        8
+#define ACPI_MAX_CREATOR_ID      4
+
+typedef struct _DESCRIPTION_HEADER {        // Header structure appears at the beginning of each ACPI table
+    ULONG   Signature;                      //      Signature used to identify the type of table
+    ULONG   Length;                         //      Length of entire table including the DESCRIPTION_HEADER
+    UCHAR   Revision;                       //      Minor version of ACPI spec to which this table conforms
+    UCHAR   Checksum;                       //      sum of all bytes in the entire TABLE should = 0
+    CHAR    OEMID[ACPI_MAX_OEM_ID];         //      String that uniquely ID's the OEM
+    CHAR    OEMTableID[ACPI_MAX_TABLE_ID];  //      String that uniquely ID's this table (used for table patching and replacement).
+    ULONG   OEMRevision;                    //      OEM supplied table revision number.  Bigger number = newer table.
+    CHAR    CreatorID[ACPI_MAX_CREATOR_ID]; //      Vendor ID of utility which created this table.
+    ULONG   CreatorRev;                     //      Revision of utility that created the table.
+} DESCRIPTION_HEADER, *PDESCRIPTION_HEADER;
+
+#define FACS_SIGNATURE  0x53434146      // "FACS"
+
+typedef enum _ACPI_GENERIC_ADDRESS_TYPE {
+    AcpiGenericSpaceMemory = 0,
+    AcpiGenericSpaceIO,
+    AcpiGenericSpacePciConfig,
+    AcpiGenericSpaceEC,
+    AcpiGenericSpaceSMBus,
+    AcpiGenericSpacePcc = 0x0a,
+    AcpiGenericSpaceFixedFunction = 0x7F
+} ACPI_GENERIC_ADDRESS_TYPE, *PACPI_GENERIC_ADDRESS_TYPE;
+
+typedef enum _ACPI_GENERIC_ACCESS_SIZE {
+    AcpiGenericAccessSizeLegacy = 0,
+    AcpiGenericAccessSizeByte,
+    AcpiGenericAccessSizeWord,
+    AcpiGenericAccessSizeDWord,
+    AcpiGenericAccessSizeQWord
+} ACPI_GENERIC_ACCESS_SIZE, *PACPI_GENERIC_ACCESS_SIZE;
+
+typedef struct _FACS    {       // Firmware ACPI Control Structure.  Note that this table does not have a header, it is pointed to by the FADT
+    ULONG           Signature;      //      'FACS'
+    ULONG           Length;         //      Length of entire firmware ACPI control structure (must be 64 bytes or larger)
+    ULONG           HardwareSignature;
+    ULONG           pFirmwareWakingVector;  // physical address of location where the OS needs to put the firmware waking vector
+    ULONG           GlobalLock;     // 32 bit structure used for sharing Embedded Controller
+    ULONG           Flags;
+    PHYSICAL_ADDRESS x_FirmwareWakingVector; // 64-bit capable firmware vector
+    UCHAR           version;
+    UCHAR           Reserved[31];
+} FACS, *PFACS;
+
+// FACS.GlobalLock bit field definitions
+
+#define         GL_PENDING_BIT          0x00
+#define         GL_PENDING                      (1 << GL_PENDING_BIT)
+
+#define         GL_OWNER_BIT            0x01
+#define         GL_OWNER                        (1 << GL_OWNER_BIT)
+
+#define GL_NON_RESERVED_BITS_MASK       (GL_PENDING+GL_OWNED)
+
+// FACS Flags definitions
+
+#define         FACS_S4BIOS_SUPPORTED_BIT   0   // flag indicates whether or not the BIOS will save/restore memory around S4
+#define         FACS_S4BIOS_SUPPORTED       (1 << FACS_S4BIOS_SUPPORTED_BIT)
+
+
+#define FADT_SIGNATURE  0x50434146      // "FACP"
+
+typedef struct _FADT    {               // Fixed ACPI description table
+
+DESCRIPTION_HEADER      Header;
+
+ULONG           facs;                   // Physical address of the Firmware ACPI Control Structure
+ULONG           dsdt;                   // Physical address of the Differentiated System Description Table
+UCHAR           int_model;              // System's Interrupt mode, 0=Dual PIC, 1=Multiple APIC, >1 reserved
+UCHAR           pm_profile;             // System's preferred power profile
+USHORT          sci_int_vector;         // Vector of SCI interrupt.
+ULONG           smi_cmd_io_port;        // Address in System I/O Space of the SMI Command port, used to enable and disable ACPI.
+UCHAR           acpi_on_value;          // Value out'd to smi_cmd_port to activate ACPI
+UCHAR           acpi_off_value;         // Value out'd to smi_cmd_port to deactivate ACPI
+UCHAR           s4bios_req;             // Value to write to SMI_CMD to enter the S4 state.
+UCHAR           pstate_control;         // Value to write to SMI_CMD to assume control of processor performance states
+ULONG           pm1a_evt_blk_io_port;   // Address in System I/O Space of the PM1a_EVT_BLK register block
+ULONG           pm1b_evt_blk_io_port;   // Address in System I/O Space of the PM1b_EVT_BLK register block
+ULONG           pm1a_ctrl_blk_io_port;  // Address in System I/O Space of the PM1a_CNT_BLK register block
+ULONG           pm1b_ctrl_blk_io_port;  // Address in System I/O Space of the PM1b_CNT_BLK register block
+ULONG           pm2_ctrl_blk_io_port;   // Address in System I/O Space of the PM2_CNT_BLK register block
+ULONG           pm_tmr_blk_io_port;     // Address in System I/O Space of the PM_TMR register block
+ULONG           gp0_blk_io_port;        // Address in System I/O Space of the GP0 register block
+ULONG           gp1_blk_io_port;        // Address in System I/O Space of the GP1 register block
+UCHAR           pm1_evt_len;            // number of bytes decoded for PM1_BLK (must be >= 4)
+UCHAR           pm1_ctrl_len;           // number of bytes decoded for PM1_CNT (must be >= 2)
+UCHAR           pm2_ctrl_len;           // number of bytes decoded for PM1a_CNT (must be >= 1)
+UCHAR           pm_tmr_len;             // number of bytes decoded for PM_TMR (must be >= 4)
+UCHAR           gp0_blk_len;            // number of bytes decoded for GP0_BLK (must be multiple of 2)
+UCHAR           gp1_blk_len;            // number of bytes decoded for GP1_BLK (must be multiple of 2)
+UCHAR           gp1_base;               // index at which GP1 based events start
+UCHAR           cstate_control;         // Value to write to SMI_CMD to assume control of _CST states
+USHORT          lvl2_latency;           // Worst case latency in microseconds required to enter and leave the C2 processor state
+USHORT          lvl3_latency;           // Worst case latency in microseconds required to enter and leave the C3 processor state
+USHORT          flush_size;             // Ignored if WBINVD flag is 1 -- indicates size of memory read to flush dirty lines from
+                                        //      any processors memory caches. A size of zero indicates this is not supported.
+USHORT          flush_stride;           // Ignored if WBINVD flag is 1 -- the memory stride width, in bytes, to perform reads to flush
+                                        //      the processor's memory caches.
+UCHAR           duty_offset;            // zero based index of where the processor's duty cycle setting is within the processor's P_CNT register.
+UCHAR           duty_width;             // bit width of the processor's duty cycle setting value in the P_CNT register.
+                                        //      a value of zero indicates that processor duty cycle is not supported
+UCHAR           day_alarm_index;
+UCHAR           month_alarm_index;
+UCHAR           century_alarm_index;
+USHORT          boot_arch;
+UCHAR           reserved3[1];
+ULONG           flags;                  // This is the last field if the table Revision is 1
+GEN_ADDR        reset_reg;
+UCHAR           reset_val;              // This is the last field if the table Revision is 2
+USHORT          arm_boot_arch;          // Pending ECR (expected to be in Revision 5.0b)
+UCHAR           minor_version_number;
+PHYSICAL_ADDRESS x_firmware_ctrl;
+PHYSICAL_ADDRESS x_dsdt;
+GEN_ADDR        x_pm1a_evt_blk;
+GEN_ADDR        x_pm1b_evt_blk;
+GEN_ADDR        x_pm1a_ctrl_blk;
+GEN_ADDR        x_pm1b_ctrl_blk;
+GEN_ADDR        x_pm2_ctrl_blk;
+GEN_ADDR        x_pm_tmr_blk;
+GEN_ADDR        x_gp0_blk;
+GEN_ADDR        x_gp1_blk;              // This is the last field if the table Revision is 3 or 4
+GEN_ADDR        sleep_control_reg;
+GEN_ADDR        sleep_status_reg;       // This is the last field if the table Revision is 5
+} FADT, *PFADT;
+
+#define FADT_REV_1_SIZE   (FIELD_OFFSET(FADT, flags) + sizeof(ULONG))
+#define FADT_REV_2_SIZE   (FIELD_OFFSET(FADT, reset_val) + sizeof(UCHAR))
+#define FADT_REV_3_SIZE   (FIELD_OFFSET(FADT, x_gp1_blk) + sizeof(GEN_ADDR))
+#define FADT_REV_4_SIZE   (FIELD_OFFSET(FADT, x_gp1_blk) + sizeof(GEN_ADDR))
+#define FADT_REV_5_SIZE   (FIELD_OFFSET(FADT, sleep_status_reg) + sizeof(GEN_ADDR))
+
+#define ACPI_IS_VALID_TABLE_ENTRY(Entry, Type, TableEnd) \
+    ((((PUCHAR)(Entry)) + RTL_SIZEOF_THROUGH_FIELD(Type, Length) <= (PUCHAR)(TableEnd)) && \
+     (((Type *)(Entry))->Length >= RTL_SIZEOF_THROUGH_FIELD(Type, Length)) && \
+     (((PUCHAR)(Entry)) + ((Type *)(Entry))->Length <= (PUCHAR)(TableEnd)))
+
+//
+// System Resource Affinity Table
+//
+// This table describes the system topology of a ccNUMA machine.
+//
+
+#define ACPI_SRAT_SIGNATURE  0x54415253 // "SRAT"
+
+typedef struct _ACPI_SRAT {
+    DESCRIPTION_HEADER  Header;
+    ULONG               TableRevision;
+    ULONG               Reserved[2];
+} ACPI_SRAT, *PACPI_SRAT;
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+
+typedef struct _ACPI_SRAT_ENTRY {
+    UCHAR                       Type;
+    UCHAR                       Length;
+    union {
+        struct {
+            UCHAR               ProximityDomainLow;
+            UCHAR               ApicId;
+            struct {
+                ULONG           Enabled:1;
+                ULONG           Reserved:31;
+            }                   Flags;
+            UCHAR               SApicEid;
+            UCHAR               ProximityDomainHigh[3];
+            ULONG               ClockDomain;
+        } ApicAffinity;
+        struct {
+            ULONG               ProximityDomain;
+            UCHAR               Reserved[2];
+            PHYSICAL_ADDRESS    Base;
+            ULONGLONG           Length;
+            ULONG               Reserved2;
+            struct {
+                ULONG           Enabled:1;
+                ULONG           HotPlug:1;
+                ULONG           Reserved:30;
+            }                   Flags;
+            UCHAR               Reserved3[8];
+        } MemoryAffinity;
+        struct {
+            UCHAR               Reserved[2];
+            ULONG               ProximityDomain;
+            ULONG               ApicId;
+            struct {
+                ULONG           Enabled:1;
+                ULONG           Reserved:31;
+            }                   Flags;
+            ULONG               ClockDomain;
+            ULONG               Reserved2;
+        } X2ApicAffinity;
+        struct {
+            ULONG               ProximityDomain;
+            ULONG               ProcessorUid;
+            struct {
+                ULONG           Enabled:1;
+                ULONG           Reserved:31;
+            }                   Flags;
+            ULONG               ClockDomain;
+        } GiccAffinity;
+    } DUMMYUNIONNAME;
+} ACPI_SRAT_ENTRY, *PACPI_SRAT_ENTRY;
+
+#define SRAT_APIC_ENTRY_LENGTH                       \
+    (FIELD_OFFSET(ACPI_SRAT_ENTRY, ApicAffinity) +   \
+     RTL_FIELD_SIZE(ACPI_SRAT_ENTRY, ApicAffinity))
+
+#define SRAT_MEMORY_ENTRY_LENGTH                     \
+    (FIELD_OFFSET(ACPI_SRAT_ENTRY, MemoryAffinity) + \
+     RTL_FIELD_SIZE(ACPI_SRAT_ENTRY, MemoryAffinity))
+
+#define SRAT_X2APIC_ENTRY_LENGTH                     \
+    (FIELD_OFFSET(ACPI_SRAT_ENTRY, X2ApicAffinity) + \
+     RTL_FIELD_SIZE(ACPI_SRAT_ENTRY, X2ApicAffinity))
+
+#define SRAT_GICC_ENTRY_LENGTH                     \
+    (FIELD_OFFSET(ACPI_SRAT_ENTRY, GiccAffinity) + \
+     RTL_FIELD_SIZE(ACPI_SRAT_ENTRY, GiccAffinity))
+
+#define PROXIMITY_DOMAIN(SratTable, SratEntry) \
+    (((SratTable)->Header.Revision == 1) ? \
+     PROXIMITY_DOMAIN_1(SratEntry) : PROXIMITY_DOMAIN_2(SratEntry))
+
+#define PROXIMITY_DOMAIN_1(SratEntry) \
+    (SratEntry)->ApicAffinity.ProximityDomainLow
+
+#define PROXIMITY_DOMAIN_2(SratEntry) \
+    (((SratEntry)->Type == SratProcessorLocalAPIC) ? \
+     (((ULONG)((SratEntry)->ApicAffinity.ProximityDomainLow)) + \
+      (((ULONG)((SratEntry)->ApicAffinity.ProximityDomainHigh[0])) << 8) + \
+      (((ULONG)((SratEntry)->ApicAffinity.ProximityDomainHigh[1])) << 16) + \
+      (((ULONG)((SratEntry)->ApicAffinity.ProximityDomainHigh[2])) << 24)) : \
+     (((SratEntry)->Type == SratProcessorLocalX2APIC) ? \
+      (SratEntry)->X2ApicAffinity.ProximityDomain : \
+      (((SratEntry)->Type == SratMemory) ? \
+       (SratEntry)->MemoryAffinity.ProximityDomain : \
+       (SratEntry)->GiccAffinity.ProximityDomain)))
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+typedef enum {
+    SratProcessorLocalAPIC,
+    SratMemory,
+    SratProcessorLocalX2APIC,
+    SratGicc
+} SRAT_ENTRY_TYPE;
+
+#define ACPI_MPST_SIGNATURE 0x5453504D // "MPST"
+
+//
+// Memory power state table : this describes the system's memory power nodes.
+//
+
+typedef struct _MEMORY_POWER_STATE {
+    UCHAR PowerStateValue;
+    UCHAR PowerStateInformationIndex;
+} MEMORY_POWER_STATE, *PMEMORY_POWER_STATE;
+
+typedef struct _MEMORY_POWER_NODE {
+    UCHAR Flag;
+    UCHAR Reserved1;
+    USHORT MpnId;
+    ULONG Length;
+    ULONG BaseAddressLow;
+    ULONG BaseAddressHigh;
+    ULONG LengthLow;
+    ULONG LengthHigh;
+    ULONG PowerStateCount;
+    ULONG PhysicalComponentCount;
+    MEMORY_POWER_STATE MpState;    // Start of PowerStateCount structures,
+                                   // followed by 'PhysicalComponentCount'
+                                   // physical component identifiers.
+} MEMORY_POWER_NODE, *PMEMORY_POWER_NODE;
+
+//
+// MPST table: Memory Power State Table.
+//
+// This table contains information about:
+//
+// a) MPNs (memory power nodes): How many MPNs there are and their
+//    characteristics. Characteristics include their base addresses,
+//    lengths, and identifiers of physical components which compose
+//    the MPN.  As well as which power states are present and their
+//    index in the memory power state characteristics table which is
+//    in the MPST table itself.
+//
+// b) Memory power state characteristics table: This table is an array which
+//    describes each state's characteristics such as average power consumed,
+//    exit latency etc. All we look at from this table is the flags, which tell
+//    us whether contents can be preserved in that power state and if that
+//    power state can be exited autonomously upon a memory reference.
+//
+// There can be multiple MPNs exposed by firmware but it cannot be
+// determined by examination whether a given MPN represents a
+// Channel/DIMM/Rank/Bank.  Thus it is recommended in the platform
+// developers guide to populate the MPST tables with appropriate MPNs.
+//
+
+typedef struct _ACPI_MPST {
+    DESCRIPTION_HEADER Header;
+    UCHAR SubspaceId;
+    UCHAR Reserved2[3];
+    USHORT MpnCount;
+    UCHAR Reserved[2];
+    MEMORY_POWER_NODE Mpn; // MpnCount Mpn structures begin here.
+                           // Followed by a USHORT memory power
+                           // characteristic count.
+                           // Followed by an array of memory power
+                           // state characteristics structures.
+} ACPI_MPST, *PACPI_MPST;
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+
+typedef struct _POWER_STATE_CHARACTERISTICS {
+    union {
+        UINT8 AsUINT8;
+        struct {
+            UINT8 Value:6;
+            UINT8 Revision:2;
+        } DUMMYSTRUCTNAME;
+    } ID;
+    UINT8 Flag;
+    USHORT Reserved1;
+    ULONG PowerInMPS0;
+    ULONG PowerSavingToMPS0;
+    ULONGLONG ExitLatencyNs;
+    UCHAR Reserved2[8];
+} POWER_STATE_CHARACTERISTICS, *PPOWER_STATE_CHARACTERISTICS;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// Definition of shared memory region to initialize before issuing PCC commands.
+//
+
+typedef struct _MEMORY_COOLING_REGION {
+    ULONG PowerCommandRegister;
+    ULONG PowerStatusRegister;
+    ULONG PowerStateId;
+    ULONG MpnId;
+    ULONGLONG EnergyConsumed;
+    ULONGLONG ExpectedPowerConsumed;
+} MEMORY_COOLING_REGION, *PMEMORY_COOLING_REGION;
+
+//
+// Maximum System Characteristics Table (MSCT)
+//
+// This table describes maximum topology capabilities of a ccNUMA machine.
+//
+
+#define ACPI_MSCT_SIGNATURE  0x5443534D // "MSCT"
+
+typedef struct _ACPI_MSCT {
+    DESCRIPTION_HEADER  Header;
+    ULONG               DomainInfoOffset;
+    ULONG               ProximityDomainCount;
+    ULONG               ClockDomainCount;
+    PHYSICAL_ADDRESS    MaximumPhysicalAddress;
+} ACPI_MSCT, *PACPI_MSCT;
+
+typedef struct _ACPI_MSCT_ENTRY {
+    UCHAR               Revision;
+    UCHAR               Length;
+    ULONG               DomainIdRangeLow;
+    ULONG               DomainIdRangeHigh;
+    ULONG               ProcessorCapacity;
+    ULONG64             MemoryCapacity;
+} ACPI_MSCT_ENTRY, *PACPI_MSCT_ENTRY;
+
+#define ACPI_MSCT_MINIMUM_LENGTH sizeof(ACPI_MSCT)
+
+#ifdef _IA64_
+// FLUSH WORKS IS FOR IA64
+#define         FLUSH_WORKS_BIT           0
+#define         FLUSH_WORKS               (1 << FLUSH_WORKS_BIT)
+#endif // IA64
+
+// definition of FADT.flags bits
+
+// this one bit flag indicates whether or not the WBINVD instruction works properly,if this bit is not set we can not use S2, S3 states, or
+// C3 on MP machines
+#define         WRITEBACKINVALIDATE_WORKS_BIT           0
+#define         WRITEBACKINVALIDATE_WORKS               (1 << WRITEBACKINVALIDATE_WORKS_BIT)
+
+//  this flag indicates if wbinvd works EXCEPT that it does not invalidate the cache
+#define         WRITEBACKINVALIDATE_DOESNT_INVALIDATE_BIT   1
+#define         WRITEBACKINVALIDATE_DOESNT_INVALIDATE       (1 << WRITEBACKINVALIDATE_DOESNT_INVALIDATE_BIT)
+
+//  this flag indicates that the C1 state is supported on all processors.
+#define         SYSTEM_SUPPORTS_C1_BIT                  2
+#define         SYSTEM_SUPPORTS_C1                      (1 << SYSTEM_SUPPORTS_C1_BIT)
+
+// this one bit flag indicates whether support for the C2 state is restricted to uniprocessor machines
+#define         P_LVL2_UP_ONLY_BIT                      3
+#define         P_LVL2_UP_ONLY                          (1 << P_LVL2_UP_ONLY_BIT)
+
+//      this bit indicates whether the PWR button is treated as a fix feature (0) or a generic feature (1)
+#define         PWR_BUTTON_GENERIC_BIT                  4
+#define         PWR_BUTTON_GENERIC                      (1 << PWR_BUTTON_GENERIC_BIT)
+
+#define         SLEEP_BUTTON_GENERIC_BIT                5
+#define         SLEEP_BUTTON_GENERIC                    (1 << SLEEP_BUTTON_GENERIC_BIT)
+
+//      this bit indicates whether the RTC wakeup status is reported in fix register space (0) or not (1)
+#define         RTC_WAKE_GENERIC_BIT                    6
+#define         RTC_WAKE_GENERIC                        (1 << RTC_WAKE_GENERIC_BIT)
+
+#define         RTC_WAKE_FROM_S4_BIT                    7
+#define         RTC_WAKE_FROM_S4                        (1 << RTC_WAKE_FROM_S4_BIT)
+
+// This bit indicates whether the machine implements a 24 or 32 bit timer.
+#define         TMR_VAL_EXT_BIT                         8
+#define         TMR_VAL_EXT                             (1 << TMR_VAL_EXT_BIT)
+
+// This bit indicates whether the machine supports docking
+#define         DCK_CAP_BIT                             9
+#define         DCK_CAP                                 (1 << DCK_CAP_BIT)
+
+// This bit indicates whether the machine supports reset
+#define         RESET_CAP_BIT                           10
+#define         RESET_CAP                               (1 << RESET_CAP_BIT)
+
+// This bit indicates whether the machine case can be opened
+#define         SEALED_CASE_BIT                         11
+#define         SEALED_CASE_CAP                         (1 << SEALED_CASE_BIT)
+
+// This bit indicates whether the machine has no video
+#define         HEADLESS_BIT                            12
+#define         HEADLESS_CAP                            (1 << HEADLESS_BIT)
+
+//
+// This bit indicates whether a processor native instruction must be executed
+// after writing the SLP_TYPx register.
+//
+
+#define         CPU_SW_SLP                              13
+#define         CPU_SW_SLP_CAP                          (1 << CPU_SW_SLP)
+
+//
+// If set, indicates the platform supports the PCIEXP_WAKE_STS bit in the PM1
+// Status register and the PCIEXP_WAKE_EN bit in the PM1 Enable register.
+//
+
+#define         PCI_EXP_WAK_BIT                         14
+#define         PCI_EXP_WAK                             (1 << PCI_EXP_WAK_BIT)
+
+
+// This bit indicates whether to use an alternate clock, i.e., HPET or PM Timer
+#define         USE_PLATFORM_CLOCK_BIT                  15
+#define         USE_PLATFORM_CLOCK                      (1 << USE_PLATFORM_CLOCK_BIT)
+
+//
+// This bit indicates whether or not the RTC_STS flag in pm1_evt_blk is valid or
+// not when coming out of S4. This bit is only available on FADT revisions >= 4.
+//
+
+#define         RTC_WAKE_VALID_FROM_S4_BIT              16
+#define         RTC_WAKE_VALID_FROM_S4                  (1 << RTC_WAKE_VALID_FROM_S4_BIT)
+
+//
+// Indicates whether the platform is compatible with remote power on.
+//
+
+#define         REMOTE_POWER_ON_CAPABLE_BIT             17
+#define         REMOTE_POWER_ON_CAPABLE                 (1 << REMOTE_POWER_ON_CAPABLE_BIT)
+
+//
+// This bit indicates whether the machine needs to run in clustered APIC mode.
+//
+
+#define         FADT_FORCE_CLUSTERED_APIC_MODE_BIT      18
+#define         FADT_FORCE_CLUSTERED_APIC_MODE          (1 << FADT_FORCE_CLUSTERED_APIC_MODE_BIT)
+
+//
+// This bit indicates whether the machine requires all APIC messages to use
+// physical destination mode.
+//
+
+#define         FADT_FORCE_APIC_PHYSICAL_DESTINATION_MODE_BIT   19
+#define         FADT_FORCE_APIC_PHYSICAL_DESTINATION_MODE       (1 << FADT_FORCE_APIC_PHYSICAL_DESTINATION_MODE_BIT)
+
+//
+// If set, this flag indicates that the platform lacks ACPI hardware, i.e., the
+// ACPI driver should operate in hardware reduced ACPI mode.
+//
+
+#define ACPI_HARDWARE_NOT_PRESENT_BIT   20
+#define ACPI_HARDWARE_NOT_PRESENT       (1 << ACPI_HARDWARE_NOT_PRESENT_BIT)
+
+//
+// If set, this flag indicates that the platform was designed to be always-on/
+// always-connected.
+//
+
+#define AOAC_CAPABLE_PLATFORM_BIT 21
+#define AOAC_CAPABLE_PLATFORM     (1 << AOAC_CAPABLE_PLATFORM_BIT)
+
+//
+// Spec defines maximum entry/exit latency values for C2 and C3, if the FADT
+// indicates that these values are exceeded then we do not use that C state.
+
+#define C2_MAX_LATENCY  100
+#define C3_MAX_LATENCY  1000
+
+
+//
+// Definition of FADT.boot_arch flags.  These flags are typically valid only on
+// IA-PCs.
+//
+
+//
+// If set, indicates that the motherboard supports user-visible devices on the
+// LPC or ISA bus. User-visible devices are devices that have end-user
+// accessible connectors (for example, LPT port), or devices for which the OS
+// must load a device driver so that an end-user application can use a device.
+// If clear, the OS may assume there are no such devices and that all devices
+// in the system can be detected exclusively via industry standard device
+// enumeration mechanisms (including the ACPI namespace).
+//
+
+#define LEGACY_DEVICES_BIT              0
+#define LEGACY_DEVICES                  (1 << LEGACY_DEVICES_BIT)
+
+//
+// If set, indicates that the motherboard contains support for a port 60 and
+// 64 based keyboard controller, usually implemented as an 8042 or equivalent
+// micro-controller.
+//
+
+#define I8042_BIT                       1
+#define I8042                           (1 << I8042_BIT)
+
+//
+// If set, indicates to OSPM that it must not blindly probe the VGA hardware
+// (that responds to MMIO addresses A0000h-BFFFFh and IO ports 3B0h-3BBh and
+// 3C0h-3DFh) that may cause machine check on this system. If clear, indicates
+// to OSPM that it is safe to probe the VGA hardware.
+//
+
+#define VGA_NOT_PRESENT_BIT             2
+#define VGA_NOT_PRESENT                 (1 << VGA_NOT_PRESENT_BIT)
+
+//
+// If set, indicates to OSPM that it must not enable Message Signaled
+// Interrupts (MSI) on this platform.
+//
+
+#define MSI_NOT_SUPPORTED_BIT           3
+#define MSI_NOT_SUPPORTED               (1 << MSI_NOT_SUPPORTED_BIT)
+
+//
+// If set, indicates to OSPM that it must not enable Active State Power
+// Management (ASPM) on this platform.
+//
+
+#define ASPM_NOT_SUPPORTED_BIT          4
+#define ASPM_NOT_SUPPORTED              (1 << ASPM_NOT_SUPPORTED_BIT)
+
+//
+// If set indicates that legacy CMOS RTC is not present in the system.
+//
+
+#define CMOS_RTC_NOT_PRESENT_BIT        5
+#define CMOS_RTC_NOT_PRESENT            (1 << CMOS_RTC_NOT_PRESENT_BIT)
+
+//
+// Definition of FADT.arm_boot_arch flags. These flags are valid only on ARM.
+//
+
+//
+// If set indicates that PSCI is implemented.
+//
+
+#define ARM_BOOT_ARCH_PSCI_COMPLIANT_BIT  0
+#define ARM_BOOT_ARCH_PSCI_COMPLIANT      (1 << ARM_BOOT_ARCH_PSCI_COMPLIANT_BIT)
+
+//
+// If set indicates that HVC should be used instead of SMC for PSCI.
+//
+
+#define ARM_BOOT_ARCH_PSCI_USE_HVC_BIT    1
+#define ARM_BOOT_ARCH_PSCI_USE_HVC        (1 << ARM_BOOT_ARCH_PSCI_USE_HVC_BIT)
+
+#ifndef ANYSIZE_ARRAY
+#define ANYSIZE_ARRAY   1
+#endif
+
+// Multiple APIC description table
+
+typedef struct _MAPIC   {
+
+DESCRIPTION_HEADER  Header;
+ULONG               LocalAPICAddress;   // Physical Address at which each processor can access its local APIC
+ULONG               Flags;
+ULONG               APICTables[ANYSIZE_ARRAY];  // A list of APIC tables.
+
+}       MAPIC;
+
+typedef MAPIC *PMAPIC;
+
+// Multiple APIC structure flags
+
+#define PCAT_COMPAT_BIT 0   // indicates that the system also has a dual 8259 pic setup.
+#define PCAT_COMPAT     (1 << PCAT_COMPAT_BIT)
+
+// APIC Structure Types
+#define PROCESSOR_LOCAL_APIC                0
+#define IO_APIC                             1
+#define ISA_VECTOR_OVERRIDE                 2
+#define IO_NMI_SOURCE                       3
+#define LOCAL_NMI_SOURCE                    4
+#define ADDRESS_EXTENSION_STRUCTURE         5
+#define IO_SAPIC                            6
+#define LOCAL_SAPIC                         7
+#define PLATFORM_INTERRUPT_SOURCE           8
+#define PROCESSOR_LOCAL_X2APIC              9
+#define LOCAL_X2APIC_NMI_SOURCE             10
+#define PROCESSOR_LOCAL_GIC                 11
+#define GICDISTRIBUTOR                      12
+#define GICMSIFRAME                         13
+#define GICREDISTRIBUTOR                    14
+#define GICITS                              15
+
+#define PROCESSOR_LOCAL_APIC_LENGTH         8
+#define IO_APIC_LENGTH                      12
+#define ISA_VECTOR_OVERRIDE_LENGTH          10
+
+#define IO_NMI_SOURCE_LENGTH                8
+#define LOCAL_NMI_SOURCE_LENGTH             6
+#define PLATFORM_INTERRUPT_SOURCE_LENGTH    16
+#define IO_SAPIC_LENGTH                     16
+#define PROCESSOR_LOCAL_SAPIC_LENGTH        12  // minimal length.
+#define PROCESSOR_LOCAL_X2APIC_LENGTH       16
+#define LOCAL_X2APIC_NMI_SOURCE_LENGTH      12
+
+// Platform Interrupt Types
+#define PLATFORM_INT_PMI  1
+#define PLATFORM_INT_INIT 2
+#define PLATFORM_INT_CPE  3
+
+// These defines come from the MPS 1.4 spec, section 4.3.4 and they are referenced as
+// such in the ACPI spec.
+#define PO_BITS                     3
+#define POLARITY_HIGH               1
+#define POLARITY_LOW                3
+#define POLARITY_CONFORMS_WITH_BUS  0
+#define EL_BITS                     0xc
+#define EL_BIT_SHIFT                2
+#define EL_EDGE_TRIGGERED           4
+#define EL_LEVEL_TRIGGERED          0xc
+#define EL_CONFORMS_WITH_BUS        0
+
+// The shared beginning info in all APIC Structures
+
+typedef struct _APICTABLE {
+   UCHAR Type;
+   UCHAR Length;
+} APICTABLE;
+
+typedef APICTABLE UNALIGNED *PAPICTABLE;
+
+typedef struct _PROCLOCALAPIC   {
+
+    UCHAR   Type;   // should be zero to identify a ProcessorLocalAPIC structure
+    UCHAR   Length; // better be 8
+    UCHAR   ACPIProcessorID;    // ProcessorID for which this processor is listed in the ACPI processor declaration
+                                // operator.
+    UCHAR   APICID; //  The processor's local APIC ID.
+    ULONG   Flags;
+
+} PROCLOCALAPIC;
+
+typedef PROCLOCALAPIC UNALIGNED *PPROCLOCALAPIC;
+
+// Processor Local APIC, SAPIC and x2APIC Flags
+#define PLAF_ENABLED_BIT    0
+#define PLAF_ENABLED        (1 << PLAF_ENABLED_BIT)
+
+typedef struct _IOAPIC  {
+
+    UCHAR   Type;
+    UCHAR   Length; // better be 12
+    UCHAR   IOAPICID;
+    UCHAR   Reserved;
+    ULONG   IOAPICAddress; // Physical address at which this IO APIC resides.
+    ULONG   SystemVectorBase; // system interrupt vector index for this APIC
+
+} IOAPIC;
+
+typedef IOAPIC UNALIGNED *PIOAPIC;
+
+// Interrupt Source Override
+typedef struct _ISA_VECTOR {
+    UCHAR   Type;                           // Must be 2
+    UCHAR   Length;                         // Must be 10
+    UCHAR   Bus;                            // Must be 0
+    UCHAR   Source;                         // BusRelative IRQ
+    ULONG   GlobalSystemInterruptVector;    // Global IRQ
+    USHORT  Flags;                          // Same as MPS INTI Flags
+} ISA_VECTOR;
+
+typedef ISA_VECTOR UNALIGNED *PISA_VECTOR;
+
+// I/O Non-Maskable Source Interrupt
+typedef struct _IO_NMISOURCE {
+    UCHAR   Type;                           // must be 3
+    UCHAR   Length;                         // better be 8
+    USHORT  Flags;                          // Same as MPS INTI Flags
+    ULONG   GlobalSystemInterruptVector;    // Interrupt connected to NMI
+} IO_NMISOURCE;
+
+typedef IO_NMISOURCE UNALIGNED *PIO_NMISOURCE;
+
+// Local Non-Maskable Interrupt Source
+typedef struct _LOCAL_NMISOURCE {
+    UCHAR   Type;                           // must be 4
+    UCHAR   Length;                         // better be 6
+    UCHAR   ProcessorID;                    // which processor?  0xff means all
+    USHORT  Flags;
+    UCHAR   LINTIN;                         // which LINTIN# signal on the processor
+} LOCAL_NMISOURCE;
+
+typedef LOCAL_NMISOURCE UNALIGNED *PLOCAL_NMISOURCE;
+
+typedef struct _PROCLOCALSAPIC   {
+    UCHAR   Type;               // LOCAL_SAPIC
+    UCHAR   Length;             // PROCESSOR_LOCAL_SAPIC_LENGTH
+    UCHAR   ACPIProcessorID;    // ProcessorID for which this processor is listed in the ACPI processor declaration
+    UCHAR   APICID;             //  The processor's local APIC ID.
+    UCHAR   APICEID;            //  The processor's local APIC EID.
+    UCHAR   Reserved[3];
+    ULONG   Flags;
+    ULONG   ACPIProcessorUIDInteger;
+    CHAR    ACPIProcessorUIDString[ANYSIZE_ARRAY];
+} PROCLOCALSAPIC;
+
+typedef PROCLOCALSAPIC UNALIGNED *PPROCLOCALSAPIC;
+
+typedef struct _IOSAPIC  {
+    UCHAR   Type;               // IO_SAPIC
+    UCHAR   Length;             // IO_SAPIC_LENGTH
+    UCHAR   IOSAPICID;
+    UCHAR   Reserved;
+    ULONG   SystemVectorBase;   // system interrupt vector index for this SAPIC
+    ULONG_PTR  IOSAPICAddress;   // 64-bit Physical address at which this IO APIC resides.
+} IOSAPIC;
+
+typedef IOSAPIC UNALIGNED *PIOSAPIC;
+
+typedef struct _PLATFORM_INTERRUPT {
+    UCHAR   Type;               // PLATFORM_INTERRUPT_SOURCE
+    UCHAR   Length;             // PLATFORM_INTERRUPT_SOURCE_LENGTH
+    USHORT  Flags;              // Same as MPS INTI Flags
+    UCHAR   InterruptType;
+    UCHAR   APICID;
+    UCHAR   ACPIEID;
+    UCHAR   IOSAPICVector;
+    ULONG   GlobalVector;
+    ULONG   Reserved;
+} PLATFORM_INTERRUPT;
+
+typedef PLATFORM_INTERRUPT UNALIGNED *PPLATFORM_INTERRUPT;
+
+typedef struct _PROCLOCALX2APIC {
+    UCHAR   Type;               // Must be 9 (LOCAL_X2APIC)
+    UCHAR   Length;             // Must be 16 (LOCAL_X2APIC_LENGTH)
+    USHORT  Reserved;
+    ULONG   APICID;             // Local extended xAPIC ID
+    ULONG   Flags;              // Local extended xAPIC flags
+    ULONG   ACPIProcessorID;    // Matches _UID of the ACPI processor device
+} PROCLOCALX2APIC;
+
+typedef PROCLOCALX2APIC UNALIGNED *PPROCLOCALX2APIC;
+
+// Local x2APIC Non-Maskable Interrupt Source
+typedef struct _LOCAL_X2APIC_NMISOURCE {
+    UCHAR   Type;               // Must be 10 (LOCAL_X2APIC_NMI_SOURCE)
+    UCHAR   Length;             // Must be 12 (LOCAL_X2APIC_NMI_SOURCE_LENGTH)
+    USHORT  Flags;              // MPS INTI flags
+    ULONG   ProcessorID;        // Matches _UID of the ACPI processor device;
+                                // 0xffffffff means all processors in machine
+    UCHAR   LINTIN;             // Extended xAPIC interrupt input LINTn to which
+                                // the NMI is connected
+    UCHAR   Reserved[3];
+} LOCAL_X2APIC_NMISOURCE;
+
+typedef LOCAL_X2APIC_NMISOURCE UNALIGNED *PLOCAL_X2APIC_NMISOURCE;
+
+//
+// Macros that convert between the compressed and
+// uncompressed representation of an MPIDR.
+//
+
+#define COMPRESS_MPIDR(_MPIDR_, _COMPRESSED_)            \
+{                                                        \
+    ULONG _AFF3_;                                        \
+                                                         \
+    _AFF3_ = (ULONG)((_MPIDR_ & 0xFF00000000ULL) >> 8);  \
+    _COMPRESSED_ = (ULONG)(_MPIDR_ & 0xFFFFFF);          \
+    _COMPRESSED_ |= _AFF3_;                              \
+}
+
+#define UNCOMPRESS_MPIDR(_COMPRESSED_, _MPIDR_)                    \
+{                                                                  \
+    (_MPIDR_) = (ULONGLONG)(_COMPRESSED_) & 0x00FFFFFFULL;         \
+    (_MPIDR_) |= ((ULONGLONG)(_COMPRESSED_) & 0xFF000000ULL) << 8; \
+}
+
+typedef struct _PROCLOCALGIC   {
+    UCHAR Type;                         // +00  PROCESSOR_LOCAL_GIC (0xb)
+    UCHAR Length;                       // +01  >= 40 (0x28)
+    USHORT Reserved;                    // +02
+    ULONG Identifier;                   // +04
+    ULONG AcpiProcessorId;              // +08
+    ULONG Flags;                        // +12
+    ULONG ParkingProtocolVersion;       // +16
+    ULONG PerformanceInterruptGsi;      // +20
+    ULONGLONG ParkedPhysicalAddress;    // +24
+    ULONGLONG ControllerPhysicalAddress; // +32
+
+    //
+    // The following fields are optional.
+    //
+
+    ULONGLONG Gicv;                     // +40
+    ULONGLONG Gich;                     // +48
+    ULONG VgicMaintenanceInterrupt;     // +56
+    ULONGLONG GicrBaseAddress;          // +60
+    ULONGLONG Mpidr;                    // +68
+    UCHAR ProcessorPowerEfficiencyClass; // +76
+    UCHAR Reserved2[3];                 // +77
+} PROCLOCALGIC;
+
+typedef PROCLOCALGIC UNALIGNED *PPROCLOCALGIC;
+
+#define PROCESSOR_LOCAL_GIC_LENGTH \
+    (RTL_SIZEOF_THROUGH_FIELD(PROCLOCALGIC, ControllerPhysicalAddress))
+
+#define PROCESSOR_LOCAL_GIC_LENGTH_THROUGH_MPIDR \
+    (RTL_SIZEOF_THROUGH_FIELD(PROCLOCALGIC, Mpidr))
+
+#define PROCESSOR_LOCAL_GIC_LENGTH_THROUGH_EFFICIENCY_CLASS \
+    (RTL_SIZEOF_THROUGH_FIELD(PROCLOCALGIC, ProcessorPowerEfficiencyClass))
+
+#define PROCESSOR_LOCAL_GIC_LENGTH_THROUGH_RESERVED2 \
+    (RTL_SIZEOF_THROUGH_FIELD(PROCLOCALGIC, Reserved2))
+
+//
+// Processor Local GIC flags.
+//
+
+#define PLGF_ENABLED_BIT    0
+#define PLGF_ENABLED        (1 << PLGF_ENABLED_BIT)
+
+#define PLGF_PERF_INTERRUPT_EDGE_TRIGGERED_BIT 1
+#define PLGF_PERF_INTERRUPT_EDGE_TRIGGERED \
+        (1 << PLGF_PERF_INTERRUPT_EDGE_TRIGGERED_BIT)
+
+typedef struct _GIC_DISTRIBUTOR  {
+    UCHAR Type;
+    UCHAR Length;
+    USHORT Reserved1;
+    ULONG Identifier;
+    ULONGLONG ControllerPhysicalAddress;
+    ULONG GsivBase;
+    UCHAR Version;
+    UCHAR Reserved[3];
+} GIC_DISTRIBUTOR;
+
+typedef GIC_DISTRIBUTOR UNALIGNED *PGIC_DISTRIBUTOR;
+
+#define GIC_DISTRIBUTOR_LENGTH              (sizeof(GIC_DISTRIBUTOR))
+
+typedef struct _GIC_MSIFRAME_ENTRY {
+    UCHAR Type;
+    UCHAR Length;
+    USHORT Reserved1;
+    ULONG Identifier;
+    ULONGLONG PhysicalAddress;
+    ULONG Flags;
+    USHORT SpiCount;
+    USHORT SpiBase;
+} GIC_MSIFRAME_ENTRY;
+
+typedef GIC_MSIFRAME_ENTRY UNALIGNED *PGIC_MSIFRAME_ENTRY;
+#define GIC_MSIFRAME_ENTRY_LENGTH (sizeof(GIC_MSIFRAME_ENTRY))
+#define GIC_MSIFRAME_SPI_BASE_COUNT_VALID 1
+
+typedef struct _GIC_REDISTRIBUTOR {
+    UCHAR Type;
+    UCHAR Length;
+    USHORT Reserved;
+    ULONGLONG DiscoveryRangeBaseAddress;
+    ULONG DiscoveryRangeLength;
+} GIC_REDISTRIBUTOR;
+
+typedef GIC_REDISTRIBUTOR UNALIGNED *PGIC_REDISTRIBUTOR;
+
+#define GIC_REDISTRIBUTOR_LENGTH (sizeof(GIC_REDISTRIBUTOR))
+
+typedef struct _GIC_ITS {
+    UCHAR Type;
+    UCHAR Length;
+    USHORT Reserved1;
+    ULONG Identifier;
+    ULONGLONG PhysicalAddress;
+    ULONG Reserved2;
+} GIC_ITS;
+
+typedef GIC_ITS UNALIGNED *PGIC_ITS;
+
+#define GIC_ITS_LENGTH (sizeof(GIC_ITS))
+
+//
+// Smart Battery
+//
+
+typedef struct _SMARTBATTTABLE   {
+
+DESCRIPTION_HEADER  Header;
+ULONG   WarningEnergyLevel; // mWh at which the OEM suggests we warn the user that the battery is getting low.
+ULONG   LowEnergyLevel;     // mWh at which the OEM suggests we put the machine into a sleep state.
+ULONG   CriticalEnergyLevel; // mWH at which the OEM suggests we do an emergency shutdown.
+
+}       SMARTBATTTABLE;
+
+typedef SMARTBATTTABLE *PSMARTBATTTABLE;
+
+
+//
+// Embedded controller
+//
+
+#define ECDT_SIGNATURE 0x54444345       // "ECDT"
+
+typedef struct {
+    DESCRIPTION_HEADER  Header;
+    GEN_ADDR            Control;
+    GEN_ADDR            Data;
+    ULONG               Uid;
+    UCHAR               GpeBit;
+    CHAR                Id[ANYSIZE_ARRAY];
+} ECDT, *PECDT;
+
+typedef struct _RSDT_32    {       // Root System Description Table
+
+DESCRIPTION_HEADER      Header;
+ULONG   Tables[ANYSIZE_ARRAY];     // The structure contains an n length array of physical addresses each of which point to another table.
+}       RSDT_32;
+
+typedef struct _RSDT_64    {       // Root System Description Table
+    DESCRIPTION_HEADER      Header;
+    ULONG                   Reserved;               // 4 bytes reserved as per 64 bit extensions to ACPI spec v0.7
+    ULONG_PTR               Tables[ANYSIZE_ARRAY];  // The structure contains an n length array of physical addresses each of which point to another table.
+} RSDT_64;
+
+#ifdef _IA64_ // XXTF
+typedef RSDT_64 RSDT;
+#else
+typedef RSDT_32 RSDT;
+#endif // _IA64_ XXTF
+
+typedef RSDT    *PRSDT;
+
+typedef struct _XSDT {
+    DESCRIPTION_HEADER  Header;
+    UNALIGNED PHYSICAL_ADDRESS Tables[ANYSIZE_ARRAY];
+} XSDT, *PXSDT;
+
+// The below macro uses the min macro to protect against the case where we are running on machine which is compliant with
+// a spec prior to .99.  If you had a .92 compliant header and one table pointer we would end of subtracting 32-36 resulting
+// in a really big number and hence we would think we had lots and lots of tables...  Using the min macro we end up subtracting
+// the length-length getting zero which will be harmless and cause us to fail to load (with a red screen on Win9x) which is
+// the best we can do in this case.
+
+#ifndef min
+#define min(a,b)    (((a) < (b)) ? (a) : (b))
+#endif
+
+#define NumTableEntriesFromRSDTPointer(p)   (p->Header.Length-min(p->Header.Length,sizeof(DESCRIPTION_HEADER)))/sizeof(ULONG)
+#define NumTableEntriesFromXSDTPointer(p)   (p->Header.Length-min(p->Header.Length,sizeof(DESCRIPTION_HEADER)))/sizeof(PHYSICAL_ADDRESS)
+
+#define RSDT_SIGNATURE  0x54445352      // "RSDT"
+#define XSDT_SIGNATURE  0x54445358      // "XSDT"
+#define APIC_SIGNATURE  0x43495041      // "APIC"
+#define SPIC_SIGNATURE  0x43495053      // "SPIC"  = SAPIC (IA64 extensions to ACPI requirement)
+#define DSDT_SIGNATURE  0x54445344      // "DSDT"
+#define SSDT_SIGNATURE  0x54445353      // "SSDT"
+#define PSDT_SIGNATURE  0x54445350      // "PSDT"
+#define SBST_SIGNATURE  0x54534253      // "SBST"
+#define DBG2_SIGNATURE  0x32474244      // "DBG2"
+#define DBGP_SIGNATURE  0x50474244      // "DBGP"
+#define WDTT_SIGNATURE  0x54524457      // "WDRT"
+#define SPCR_SIGNATURE  0x52435053      // "SPCR"
+#define WDAT_SIGNATURE  0x54414457      // "WDAT"
+#define RASF_SIGNATURE  0x46534152      // "RASF"
+#define MADT_SIGNATURE  0x5444414D      // "MADT"
+
+typedef struct _DSDT {       // Differentiated System Description Table
+
+DESCRIPTION_HEADER      Header;
+UCHAR                   DiffDefBlock[ANYSIZE_ARRAY];    // this is the AML describing the base system.
+
+} DSDT;
+
+typedef DSDT            *PDSDT;
+
+//
+// Debug Port Table
+//
+
+typedef struct _DEBUG_PORT_TABLE {
+
+    DESCRIPTION_HEADER  Header;
+    UCHAR               InterfaceType;          // Type of registry interface (0 = full 16550 interface)
+    UCHAR               Reserved0[3];           // should be 0
+    GEN_ADDR            BaseAddress;            // Base address of the Debug Port register set
+                                                // described using the Generic Register Address
+                                                // Structure.
+                                                // 0   - console redirection disabled.
+                                                // e.g. COM1 (0x3F8) would be 0x1800000003F8
+                                                //      COM2 (Ox2F8) would be 0x1800000002F8
+
+    //
+    // Below fields only valid for Revision 2 and greater.
+    //
+
+    ULONG               OffsetDbgDevInfo;
+    ULONG               NumberDbgDevInfo;
+} DEBUG_PORT_TABLE, *PDEBUG_PORT_TABLE;
+
+//
+// Debug Device Information Structure
+//
+
+typedef struct _DEBUG_DEVICE_INFORMATION {
+    UCHAR               Revision;
+    UCHAR               Length;
+    USHORT              InterfaceType;
+    ULONG               InterfaceSubType;
+    GEN_ADDR            DeviceAddress;
+    ULONG64             AddressSize;
+} DEBUG_DEVICE_INFORMATION, *PDEBUG_DEVICE_INFORMATION;
+
+//
+// ACPI debug device port types.  The bottom 15 bits of these values should
+// match the BCDE_DEBUGGER_TYPE values that are defined in the header
+// minkernel\published\base\bcdtypes.w
+//
+
+#define DEBUG_DEVICE_PORT_SERIAL 0x8000
+#define DEBUG_DEVICE_PORT_1394 0x8001
+#define DEBUG_DEVICE_PORT_USB 0x8002
+#define DEBUG_DEVICE_PORT_NET 0x8003
+#define DEBUG_DEVICE_PORT_LOCAL 0x8004
+
+#define DEBUG_DEVICE_SERIAL_LEGACY_16550 0x0
+#define DEBUG_DEVICE_SERIAL_GEN_16550 0x1
+#define DEBUG_DEVICE_SERIAL_SPI_MAX311XE 0x2
+#define DEBUG_DEVICE_SERIAL_PL011 0x3
+#define DEBUG_DEVICE_SERIAL_Q8X60 0x4
+#define DEBUG_DEVICE_SERIAL_NVIDIA 0x5
+#define DEBUG_DEVICE_SERIAL_OMAP 0x6
+#define DEBUG_DEVICE_SERIAL_UEFI_DBGPORT 0x7
+#define DEBUG_DEVICE_SERIAL_APM88XXXX 0x8
+#define DEBUG_DEVICE_SERIAL_Q8X74 0x9
+#define DEBUG_DEVICE_SERIAL_SAM5250 0xA
+#define DEBUG_DEVICE_SERIAL_USIF 0xB
+#define DEBUG_DEVICE_SERIAL_IMX6 0xC
+#define DEBUG_DEVICE_SERIAL_SBSA32 0xD
+#define DEBUG_DEVICE_SERIAL_SBSA 0xE
+#define DEBUG_DEVICE_SERIAL_ARM_DCC 0xF
+#define DEBUG_DEVICE_SERIAL_BCM2835 0x10
+#define DEBUG_DEVICE_SERIAL_SDM845 0x11
+#define DEBUG_DEVICE_SERIAL_MM_16550 0x12
+
+//
+// v2 Debug Device Information Structure.
+//
+
+typedef struct _DEBUG_DEVICE_INFORMATION_V2 {
+    UCHAR Revision;
+    USHORT Length;
+    UCHAR BaseAddressRegisterCount;
+    USHORT NameSpaceStringLength;
+    USHORT NameSpaceStringOffset;
+    USHORT OemDataLength;
+    USHORT OemDataOffset;
+    USHORT PortType;
+    USHORT PortSubtype;
+    USHORT Reserved;
+    USHORT BaseAddressRegisterOffset;
+    USHORT AddressSizeOffset;
+    // GEN_ADDR BaseAddressRegister[BaseAddressRegisterCount];
+    // ULONG AddressSize[BaseAddressRegisterCount];
+    // UCHAR NameSpaceString[NameSpaceStringLength];
+    // UCHAR OemData[OemDataLength];
+} DEBUG_DEVICE_INFORMATION_V2, *PDEBUG_DEVICE_INFORMATION_V2;
+
+typedef struct _DEBUG_PORT_TABLE_V2 {
+    DESCRIPTION_HEADER Header;
+    ULONG OffsetDbgDevInfo;
+    ULONG NumberDbgDevInfo;
+} DEBUG_PORT_TABLE_V2, *PDEBUG_PORT_TABLE_V2;
+
+typedef struct _SERIAL_PORT_REDIRECTION_TABLE {
+
+    DESCRIPTION_HEADER  Header;
+    UCHAR               InterfaceType;          // Type of registry interface (0 = full 16550 interface)
+    UCHAR               Reserved0[3];           // should be 0
+    GEN_ADDR            BaseAddress;            // Base address of the Debug Port register set
+                                                // described using the Generic Register Address
+                                                // Structure.
+                                                // 0   - console redirection disabled.
+                                                // e.g. COM1 (0x3F8) would be 0x1800000003F8
+                                                //      COM2 (Ox2F8) would be 0x1800000002F8
+
+
+    UCHAR               InterruptType;          // Interrupt type(s) used by the UART.
+                                                // bit 0 = PC-AT-compatible 8259 IRQ interrupt.
+                                                // bit 1 = I/O APIC interrupt (Global System INterrupt)
+                                                // bit 2 = I/O SAPIC interrupt (Global System Interrupt) (IRQ)
+                                                // bit 3:7 = reserved (and must be 0)
+                                                // Note: bit == 1 indicates support, bit == 0 indicates no support.
+                                                //
+                                                // Platforms with both a dual 8259 and an I/O APIC or I/O SAPIC
+                                                // must set the IRQ bit (bit 0) and the corresponding Global
+                                                // system interrupt bit.  E.g. a system that supported 8259 and
+                                                // SAPIC would be 0x5.
+
+    UCHAR               Irq;                    // 0  = none
+                                                // 2  = 2
+                                                // 3  = 3
+                                                // ...
+                                                // 16 = 16
+                                                // 1, 17-255 reserved
+
+    ULONG               GlobalSystemInterruptVector;
+                                                // The I/O APIC or I/O SAPIC Global System Interrupt used
+                                                // by the UART.Valid only if Bit[1] or Bit[2] of the
+                                                // Interrupt Type field is set.
+
+    UCHAR               BaudRate;               // Baudrate for BIOS redirection
+                                                // 3 = 9600
+                                                // 4 = 19200
+                                                // 6 = 57600
+                                                // 7 = 115200
+                                                // 0-2,5, 8-255 reserved
+
+    UCHAR               Parity;                 // 0 = no parity
+                                                // 1-255 reserved
+
+    UCHAR               StopBits;               // 1 = 1 stop bit
+                                                // 0, 2-255 = reserved
+
+    UCHAR               FlowControl;            // 0 = Hardware Flow Control
+                                                // 1 - 255 = reserved.
+
+    UCHAR               TerminalType;           // The terminal protocol the BIOS was using for
+                                                // console redirection
+                                                // 0 = VT100
+                                                // 1 = Extended VT100
+                                                // 2-255 = reserved
+
+    UCHAR               Language;               // Language which the BIOS was redirecting
+                                                // 0 = US Western English (standard ASCII)
+
+    USHORT              PciDeviceId;            // Designates device ID of a PCI device that
+                                                // contains a UART to be used as a headless
+                                                // port.
+
+    USHORT              PciVendorId;            // Designates vendor ID of a PCI device that
+                                                // contains a UART to be used as a headless
+                                                // port.
+
+    UCHAR               PciBusNumber;           // Designates which PCI system bus the PCI device
+                                                // resides on.
+
+    UCHAR               PciSlotNumber;          // Designates which PCI slot the PCI device
+                                                // resides in.
+
+    UCHAR               PciFunctionNumber;      // Which PCI function number describes the UART.
+
+    ULONG               PciFlags;               // PCI compatibility flags bitmask.  Should be zero
+                                                // by default.
+                                                // 0x1 indicates operating system should NOT suppress
+                                                // PnP device enumeration or disable power management
+                                                // for this device.
+                                                // bits 1-31 reserved.
+
+    UCHAR               PciSegment;             // PCI segment number.  For systems w/ < 255 PCI
+                                                // buses, this number must be 0.
+
+    UCHAR               Reserved1[4];           // should be 0
+
+} SERIAL_PORT_REDIRECTION_TABLE, *PSERIAL_PORT_REDIRECTION_TABLE;
+
+//
+// Watchdog resource table.
+//
+
+typedef struct _WATCHDOG_TIMER_RESOURCE_TABLE {
+
+    DESCRIPTION_HEADER  Header;
+
+    //
+    // The address of the Watchdog Control register described using the Generic
+    // Address Structure as defined in section 5.2.3.1 of the ACPI 2.0
+    // Specification.
+    //
+    // N.B. Only System Memory address spaces are allowed (Address_Space_ID= 0).
+    //
+
+    GEN_ADDR            ControlRegisterAddress;
+
+    //
+    // The base address of the Watchdog Count register described using the
+    // Generic Address Structure as defined in section 5.2.3.1 of the ACPI 2.0
+    // Specification.
+    //
+    // N.B. Only System Memory address spaces are allowed (Address_Space_ID= 0).
+    //
+
+    GEN_ADDR            CountRegisterAddress;
+
+    //
+    // PCI Device ID if table describes a PCI device. Must be 0xFFFF if it is
+    // not a PCI device.
+    //
+
+    USHORT              PciDeviceId;
+
+    //
+    // PCI Vendor ID if table describes a PCI device. Must be 0xFFFF if it is
+    // not a PCI device.
+    //
+
+    USHORT              PciVendorId;
+
+    //
+    // PCI Bus Number if table describes a PCI device. Must be 0x00 if it is not
+    // a PCI device.
+    //
+
+    UCHAR               PciBusNumber;
+
+    //
+    // PCI Slot Number if table describes a PCI device. Must be 0x00 if it is
+    // not a PCI device.
+    //
+
+    UCHAR               PciSlotNumber;
+
+    //
+    // PCI Function Number if table describes a PCI device. Must be 0x00 if it
+    // is not a PCI device.
+    //
+
+    UCHAR               PciFunctionNumber;
+
+    //
+    // PCI segment number. For systems with fewer than 255 PCI buses, this
+    // number must be 0.
+    //
+
+    UCHAR               PciSegment;
+
+    //
+    // Contains the maximum counter value that this watchdog implementation
+    // supports. Note: Max Count must be >=511 and <= 65,535.
+    //
+
+    USHORT              MaxCount;
+
+    //
+    // Contains the units of the Max Count and Watchdog Count register.
+    // 0x0=1 seconds/count
+    // 0x1=100 milliseconds/count
+    // 0x2=10 milliseconds/count
+    //
+
+    UCHAR               Units;
+
+} WATCHDOG_TIMER_RESOURCE_TABLE, *PWATCHDOG_TIMER_RESOURCE_TABLE;
+
+//
+// Watchdog timer instruction entry.
+//
+
+typedef struct _WATCHDOG_TIMER_INSTRUCTION_ENTRY {
+
+    //
+    // The watchdog action that this watchdog instruction is a part of.
+    //
+
+    UCHAR WatchdogAction;
+
+    //
+    // The watchdog instruction flags indicating the operation to be performed.
+    //
+
+    UCHAR InstructionFlags;
+
+    //
+    // Reserved, must be 0.
+    //
+
+    UCHAR Reserved[2];
+
+    //
+    // Generic Address Structure as defined in section 5.2.3.1 of the ACPI
+    // Specification to describe the address and bit offset.
+    //
+
+    GEN_ADDR RegisterRegion;
+
+    //
+    // The value corresponding to this watchdog instruction.
+    //
+
+    ULONG Value;
+
+    //
+    // The bit mask required to obtain the bit(s) corresponding to the watchdog
+    // instruction in the given bit range defined by Register Region.
+    //
+
+    ULONG Mask;
+
+} WATCHDOG_TIMER_INSTRUCTION_ENTRY, *PWATCHDOG_TIMER_INSTRUCTION_ENTRY;
+
+//
+// Watchdog resource table, Revision 2.
+//
+
+typedef struct _WATCHDOG_TIMER_ACTION_TABLE {
+
+    //
+    // The ACPI table header.
+    //
+
+    DESCRIPTION_HEADER Header;
+
+    //
+    // The length in bytes of the watchdog header.  This includes the length
+    // of the whole table excluding the instruction entries.
+    //
+
+    ULONG WatchdogHeaderLength;
+
+    //
+    // The PCI segment number.  If this table doesn't describe a PCI device,
+    // then this field must be 0xFFFF.
+    //
+
+    USHORT PciSegment;
+
+    //
+    // The PCI bus number.  If this table doesn't describe a PCI device, then
+    // this field must be 0xFF.
+    //
+
+    UCHAR PciBusNumber;
+
+    //
+    // The PCI bus number.  If this table doesn't describe a PCI device, then
+    // this field must be 0xFF.
+    //
+
+    UCHAR PciDeviceNumber;
+
+    //
+    // The PCI function number.  If this table doesn't describe a PCI device,
+    // then field must be 0xFF.
+    //
+
+    UCHAR PciFunctionNumber;
+
+    //
+    // Reserved, must be zero.
+    //
+
+    UCHAR Reserved1[3];
+
+    //
+    // The period of one timer tick in milliseconds.
+    //
+
+    ULONG TimerPeriod;
+
+    //
+    // The maximum watchdog timer value that this implementation supports (in
+    // timer ticks).
+    //
+
+    ULONG MaximumCount;
+
+    //
+    // The minimum watchdog timer value that this implementation supports (in
+    // timer ticks).
+    //
+
+    ULONG MinimumCount;
+
+    //
+    // Some flags indicating the initial state of the watchdog timer hardware.
+    // Each flag that is true for the watchdog hardware should be set in this
+    // field.  All other bits should be zero.
+    //
+
+    UCHAR WatchdogFlags;
+
+    //
+    // Reserved, must be 0.
+    //
+
+    UCHAR Reserved2[3];
+
+    //
+    // The number of watchdog instruction entries in the watchdog action table.
+    //
+
+    ULONG InstructionCount;
+
+    //
+    // A series of Watchdog Instruction Entries.
+    //
+
+    WATCHDOG_TIMER_INSTRUCTION_ENTRY InstructionEntry[ANYSIZE_ARRAY];
+
+} WATCHDOG_TIMER_ACTION_TABLE, *PWATCHDOG_TIMER_ACTION_TABLE;
+
+//
+// Watchdog flags.
+//
+
+#define WATCHDOG_ENABLED                0x1
+#define WATCHDOG_STOPPED_IN_SLEEP_STATE 0x80
+
+//
+// Watchdog actions.
+//
+
+#define WATCHDOG_ACTION_RELOAD                              0x1
+#define WATCHDOG_ACTION_QUERY_REMAINING_COUNTDOWN_PERIOD    0x4
+#define WATCHDOG_ACTION_QUERY_COUNTDOWN_PERIOD              0x5
+#define WATCHDOG_ACTION_SET_COUNTDOWN_PERIOD                0x6
+#define WATCHDOG_ACTION_QUERY_RUNNING_STATE                 0x8
+#define WATCHDOG_ACTION_SET_RUNNING_STATE                   0x9
+#define WATCHDOG_ACTION_QUERY_STOPPED_STATE                 0xA
+#define WATCHDOG_ACTION_SET_STOPPED_STATE                   0xB
+#define WATCHDOG_ACTION_QUERY_REBOOT                        0x10
+#define WATCHDOG_ACTION_SET_REBOOT                          0x11
+#define WATCHDOG_ACTION_QUERY_SHUTDOWN                      0x12
+#define WATCHDOG_ACTION_SET_SHUTDOWN                        0x13
+#define WATCHDOG_ACTION_QUERY_BOOT_STATUS                   0x20
+#define WATCHDOG_ACTION_SET_BOOT_STATUS                     0x21
+
+//
+// Watchdog instruction flags.
+//
+
+#define WATCHDOG_INSTRUCTION_READ_VALUE         0x0
+#define WATCHDOG_INSTRUCTION_READ_COUNTDOWN     0x1
+#define WATCHDOG_INSTRUCTION_WRITE_VALUE        0x2
+#define WATCHDOG_INSTRUCTION_WRITE_COUNTDOWN    0x3
+#define WATCHDOG_INSTRUCTION_PRESERVE_REGISTER  0x80
+
+//
+// BOOT Table -- based on Simple Boot Flag Specification 1.0
+//
+
+typedef struct _BOOT_TABLE {
+
+    DESCRIPTION_HEADER  Header;
+    UCHAR               CMOSIndex;
+    UCHAR               Reserved[3];
+} BOOT_TABLE, *PBOOT_TABLE;
+
+#define BOOT_SIGNATURE  0x544f4f42 // 'BOOT'
+
+//
+// Bits in the Boot Register
+//
+
+//
+// Set by OS to indicate that the bios need only configure boot devices
+//
+
+#define SBF_PNPOS_BIT       0
+#define SBF_PNPOS           (1 << SBF_PNPOS_BIT)
+
+//
+// Set by BIOS to indicate beginning of boot, cleared by OS to indicate a successful boot
+//
+
+#define SBF_BOOTING_BIT     1
+#define SBF_BOOTING         (1 << SBF_BOOTING_BIT)
+
+//
+// Set by BIOS to indicate a diagnostic boot
+//
+
+#define SBF_DIAG_BIT        2
+#define SBF_DIAG            (1 << SBF_DIAG_BIT)
+
+//
+// Set to ensure ODD parity
+//
+
+#define SBF_PARITY_BIT      7
+#define SBF_PARITY          (1 << SBF_PARITY_BIT)
+
+//
+// IPPT Table --  IA64 Platform Properties Table
+//
+
+typedef struct _IPPT_TABLE {
+    DESCRIPTION_HEADER  Header;
+    ULONG               Flags;
+    ULONG               Reserved[3];
+} IPPT_TABLE, *PIPPT_TABLE;
+
+#define IPPT_DISABLE_WRITE_COMBINING       0x01L
+#define IPPT_ENABLE_CROSS_PARTITION_IPI    0x02L
+#define IPPT_DISABLE_PTCG_TB_FLUSH         0x04L
+#define IPPT_DISABLE_UC_MAIN_MEMORY        0x08L
+#define IPPT_ENABLE_PMTIMER_CLOCK          0x10L
+
+#define IPPT_SIGNATURE  0x54505049 // 'IPPT'
+
+//
+// MCFG Table - PCI Memory-Mapped Configuration Space
+//
+
+typedef struct _MCFG_TABLE_ENTRY {
+    ULONGLONG BaseAddress;
+    USHORT SegmentNumber;
+    UCHAR StartBusNumber;
+    UCHAR EndBusNumber;
+    ULONG Reserved;
+} MCFG_TABLE_ENTRY, *PMCFG_TABLE_ENTRY;
+
+typedef struct _MCFG_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONG Reserved[2];
+    MCFG_TABLE_ENTRY TableEntry[ANYSIZE_ARRAY];
+} MCFG_TABLE, *PMCFG_TABLE;
+
+#define MCFG_TABLE_SIGNATURE  0x4746434d // 'MCFG'
+
+//
+// High Precision Event Timer Description Table
+//
+
+typedef struct _HPET_DESCRIPTION_TABLE {
+
+    DESCRIPTION_HEADER  Header;
+
+    //
+    // Hardware ID of Event Timer Block:
+    // Contents of General_Cap & ID Reg of Timer Block
+    // [31:16] = PCI Vendor ID of 1st Timer Block
+    // [5] = Legacy IRQ Routing Capable
+    // [14] = Reserved
+    // [12:8] = Number of Comparitors in 1st Timer Block
+    // [7:0] = Hardware Rev ID
+    //
+
+    ULONG EventTimerBlockId;
+
+    //
+    // Low 32 bits of the base address of the timer block.
+    //
+    // Each Event Timer Block consumes 1K of system memory,
+    // regardless of how many comparators are actually implemented
+    // by hardware.
+    //
+
+    GEN_ADDR Address;
+    UCHAR HpetNumber;
+    USHORT MinimumPeriodicTickCount;
+    UCHAR PageProtection;
+
+} HPET_DESCRIPTION_TABLE, *PHPET_DESCRIPTION_TABLE;
+
+#define HPET_SIGNATURE  0x54455048      // "HPET"
+
+//
+// Definitions for the Moorestown SFI Timer.
+//
+
+typedef struct _SFI_TIMER {
+    GEN_ADDR   Address;
+    ULONG      FemtosecondsPerTick;
+    ULONG      Gsi;
+} SFI_TIMER, *PSFI_TIMER;
+
+typedef struct _SFI_TIMER_DESCRIPTION_TABLE {
+    DESCRIPTION_HEADER Header;
+    SFI_TIMER Timers[ANYSIZE_ARRAY];
+} SFI_TIMER_DESCRIPTION_TABLE, *PSFI_TIMER_DESCRIPTION_TABLE;
+
+#define SFI_TIMER_SIGNATURE     0x524d544d      // "MTMR"
+
+// TCG Hardware Interface Description Table Formats for Clients and Servers
+
+typedef struct _TCG_DESCRIPTION_TABLE_CLIENT {
+    DESCRIPTION_HEADER Header;
+    USHORT PlatformClass;
+    ULONG LAML;
+    PHYSICAL_ADDRESS LASA;
+} TCG_DESCRIPTION_TABLE_CLIENT, *PTCG_DESCRIPTION_TABLE_CLIENT;
+
+typedef struct _TCG_DESCRIPTION_TABLE_SERVER {
+    DESCRIPTION_HEADER Header;
+    USHORT PlatformClass;
+    USHORT Reserved1;
+    ULONGLONG LAML;
+    PHYSICAL_ADDRESS LASA;
+    USHORT SpecificationRevision;
+    UCHAR DeviceFlags;
+    UCHAR InterruptFlags;
+    UCHAR GPE;
+    UCHAR Reserved2[3];
+    ULONG GlobalSystemInterupt;
+    GEN_ADDR BaseAddress;
+    ULONG Reserved3;
+    GEN_ADDR ConfigurationAddress;
+    UCHAR PCISegmentGroupNumber;
+    UCHAR PCIBusNumber;
+    UCHAR PCIDeviceNumber;
+    UCHAR PCIFunctionNumber;
+} TCG_DESCRIPTION_TABLE_SERVER, *PTCG_DESCRIPTION_TABLE_SERVER;
+
+typedef struct _TCG_DESCRIPTION_TABLE {
+    union {
+        TCG_DESCRIPTION_TABLE_CLIENT ClientTable;
+        TCG_DESCRIPTION_TABLE_SERVER ServerTable;
+    } u;
+} TCG_DESCRIPTION_TABLE, *PTCG_DESCRIPTION_TABLE;
+
+#define TCPA_SIGNATURE  0x41504354 //'TCPA'
+
+//
+// WAE Windows ACPI Enlightenment Table - used to describe characteristics
+// of emulated devices in the system.
+//
+
+typedef struct _WAE_DESCRIPTION_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONG EmulatedDeviceFlags;
+} WAE_DESCRIPTION_TABLE, *PWAE_DESCRIPTION_TABLE;
+
+#define WAET_SIGNATURE  0x54454157 // 'WAET'
+
+#define WAET_DEV_RTC_ENLIGHTENED_BIT    0
+#define WAET_DEV_RTC_ENLIGHTENED        (1 << WAET_DEV_RTC_ENLIGHTENED_BIT)
+
+#define WAET_DEV_PMTMR_GOOD_BIT 1
+#define WAET_DEV_PMTMR_GOOD     (1 << WAET_DEV_PMTMR_GOOD_BIT)
+
+#define WAET_REV_0_SIZE RTL_SIZEOF_THROUGH_FIELD(WAET, EmulatedDeviceFlags)
+
+//
+// A non-auto-generated copy of this appears in some assembly code.
+//
+
+C_ASSERT(WAET_DEV_RTC_ENLIGHTENED == 1);
+
+//
+// IORT table definitions.
+//
+
+#define IORT_SIGNATURE          0x54524f49      // "IORT"
+#define IORT_MIN_SIZE           0x30
+#define IORT_TABLE_REVISION     0
+
+//
+// Node types.
+//
+
+#define IORT_NODE_TYPE_ITS_GROUP 0
+#define IORT_NODE_TYPE_NAMED_COMPONENT 1
+#define IORT_NODE_TYPE_ROOT_COMPLEX 2
+#define IORT_NODE_TYPE_SMMUV1V2 3
+#define IORT_NODE_TYPE_SMMUV3 4
+#define IORT_NODE_TYPE_PMCG 5
+
+#define IORT_SMMUV2_NODE_REVISION 0
+#define IORT_TYPE_GENERIC_SMMUV1 0
+#define IORT_TYPE_GENERIC_SMMUV2 1
+#define IORT_TYPE_ARM_CORELINK_MMU400 2
+#define IORT_TYPE_ARM_CORELINK_MMU500 3
+
+#define IORT_SMMUV3_NODE_REVISION 0
+#define IORT_TYPE_GENERIC_SMMUV3 0
+
+#define IORT_SMMUV3_NODE_REVISION 0
+#define IORT_TYPE_GENERIC_SMMUV3 0
+
+// TODO: Update to 1.
+#define IORT_NAMED_COMPONENT_NODE_REVISION 0
+
+#define IORT_ROOT_COMPLEX_NODE_REVISION 0
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+
+//
+// Top-level IORT table
+//
+
+typedef struct _IORT {
+    DESCRIPTION_HEADER  Header;
+    ULONG NodeCount;
+    ULONG NodeArrayOffset;
+    UCHAR Reserved[4];
+
+    //
+    // Optional padding
+    //
+
+
+    //
+    // Array of IORT nodes
+    //
+
+} IORT, *PIORT;
+
+//
+// Common shared header for all IORT nodes.
+//
+
+typedef struct _IORT_NODE_HEADER {
+    UCHAR Type;
+    USHORT Length;
+    UCHAR Revision;
+    UCHAR Reserved[4];
+    ULONG IdMappingCount;
+    ULONG IdMappingArrayOffset;
+} IORT_NODE_HEADER, *PIORT_NODE_HEADER;
+
+//
+// IORT ID mapping.
+//
+
+typedef struct _IORT_IDMAPPING {
+    ULONG InputBase;
+    ULONG IdCount;
+    ULONG OutputBase;
+    ULONG OutputNodeOffset;
+
+    union {
+        ULONG AsULONG;
+        struct {
+            ULONG SingleMapping : 1;
+            ULONG Reserved : 31;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+
+} IORT_IDMAPPING, *PIORT_IDMAPPING;
+
+//
+// SMMU v2 interrupt definition.
+//
+
+typedef union _IORT_SMMUV2_INTERRUPT {
+    ULONGLONG AsULONGLONG;
+
+    struct {
+        ULONG Gsiv;
+
+        union {
+
+            ULONG AsULONG;
+
+            struct {
+                ULONG InterruptFlags : 1;
+                ULONG Reserved : 31;
+            } DUMMYSTRUCTNAME;
+
+        } Flags;
+
+    } DUMMYSTRUCTNAME;
+
+} IORT_SMMUV2_INTERRUPT, *PIORT_SMMUV2_INTERRUPT;
+
+typedef struct _IORT_SMMUV2_NODE {
+    IORT_NODE_HEADER Header;
+    ULONGLONG BaseAddress;
+    ULONGLONG Span;
+    ULONG Model;
+    union {
+
+        ULONG AsULONG;
+
+        struct {
+            ULONG DvmSupported : 1;
+            ULONG CoherentPageTableWalk : 1;
+            ULONG Reserved : 30;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+
+    ULONG GlobalInterruptArrayOffset;
+    ULONG ContextInterruptCount;
+    ULONG ContextInterruptArrayOffset;
+    ULONG PmuInterruptCount;
+    ULONG PmuInterruptArrayOffset;
+    IORT_SMMUV2_INTERRUPT NSgIrpt;
+    IORT_SMMUV2_INTERRUPT NSgCfgIrpt;
+
+    //
+    // Context interrupt array (IORT_SMMUV2_INTERRUPTs)
+    //
+
+    //IORT_SMMUV2_INTERRUPT ContextInterruptArray[ANYSIZE_ARRAY];
+
+    //
+    // PMU Interrupt array (IORT_SMMUV2_INTERRUPTs)
+    //
+
+    //
+    // ID mapping array (IORT_SMMUV2_INTERRUPTs)
+    //
+} IORT_SMMUV2_NODE, *PIORT_SMMUV2_NODE;
+
+typedef struct _IORT_SMMUV3_NODE {
+    IORT_NODE_HEADER Header;
+    ULONGLONG BaseAddress;
+
+    union {
+
+        ULONG AsULONG;
+
+        struct {
+            ULONG CohaccOverride : 1;
+            ULONG HttuOverride : 2;
+            ULONG Reserved : 29;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+
+    UCHAR Reserved[4];
+    ULONGLONG VatosAddress;
+    ULONG Model;
+    ULONG EventGsiv;
+    ULONG PriGsiv;
+    ULONG GerrGsiv;
+    ULONG SyncGsiv;
+
+    //
+    // ID mapping array
+    //
+
+} IORT_SMMUV3_NODE, *PIORT_SMMUV3_NODE;
+
+//
+// Memory access properties.
+//
+
+typedef union _IORT_NODE_MEMORY_ATTRIBUTES {
+    ULONGLONG AsULONGLONG;
+
+    struct {
+        ULONG Cca;
+
+        union {
+            UCHAR AsUCHAR;
+
+            struct {
+                UCHAR Transient : 1;
+                UCHAR WriteAllocate : 1;
+                UCHAR ReadAllocate : 1;
+                UCHAR Aho : 1;
+                UCHAR Reserved : 4;
+            } DUMMYSTRUCTNAME;
+
+        } Ah;
+
+        UCHAR Reserved[2];
+
+        union {
+            UCHAR AsUCHAR;
+
+            struct {
+                UCHAR Cpm : 1;
+                UCHAR Dacs : 1;
+                UCHAR Reserved : 6;
+            } DUMMYSTRUCTNAME;
+
+        } Maf;
+
+    } DUMMYSTRUCTNAME;
+
+} IORT_NODE_MEMORY_ATTRIBUTES, *PIORT_NODE_MEMORY_ATTRIBUTES;
+
+typedef struct _IORT_ITS_GROUP_NODE {
+    IORT_NODE_HEADER Header;
+    ULONG ItsCount;
+    ULONG ItsArray[ANYSIZE_ARRAY];
+} IORT_ITS_GROUP_NODE, *PIORT_ITS_GROUP_NODE;
+
+typedef struct _IORT_NAMED_COMPONENT_NODE {
+    IORT_NODE_HEADER Header;
+    UCHAR Reserved[4]; // Defined as node flags in the spec but reserved.
+    IORT_NODE_MEMORY_ATTRIBUTES MemoryProperties;
+    UCHAR MemoryAccessWidth;
+    UCHAR DeviceName[ANYSIZE_ARRAY];
+
+    //
+    // Padding
+    //
+
+    //
+    // Array of ID mappings
+    //
+} IORT_NAMED_COMPONENT_NODE, *PIORT_NAMED_COMPONENT_NODE;
+
+typedef struct _IORT_ROOT_COMPLEX_NODE {
+
+    IORT_NODE_HEADER Header;
+    IORT_NODE_MEMORY_ATTRIBUTES MemoryProperties;
+    ULONG AtsAttribute;
+    ULONG PciSegmentNumber;
+
+    //
+    // Id mappings
+    //
+
+} IORT_ROOT_COMPLEX_NODE, *PIORT_ROOT_COMPLEX_NODE;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// DMA remapping reporting table.
+//
+
+#define DMAR_SIGNATURE          0x52414D44      // "DMAR"
+#define DMAR_DRHD               0
+#define DMAR_DRHD_MIN_SIZE      16
+#define DMAR_RMRR               1
+#define DMAR_ARIR               2
+#define DMAR_ATSR               2
+#define DMAR_RHSA               3
+#define DMAR_ANDD               4
+#define DMAR_FLAG_INT_REMAPPING 1
+#define DMAR_FLAG_X2APIC_OPT_OUT 2
+#define DMAR_FLAG_DMA_CTRL_PLATFORM_OPT_IN 4
+#define ARIR_SIOAPIC            0x1
+#define ARIR_PCI_ENUMERABLE     0x2
+#define ATSR_FLAG_ALL_PORTS     1
+#define DRHD_INCLUDE_ALL        1
+#define DEVICE_SCOPE_PCI_DEVICE 1
+#define DEVICE_SCOPE_PCI_SUB    2
+#define DEVICE_SCOPE_IOAPIC     3
+#define DEVICE_SCOPE_HPET       4
+#define DEVICE_SCOPE_ACPI       5
+#define DEVICE_SCOPE_MIN_SIZE   8
+
+typedef struct _DEVICESCOPE
+{
+    UCHAR       Type;
+    UCHAR       Length;
+    UCHAR       Reserved[2];
+    UCHAR       EnumerationId;
+    UCHAR       StartBusNumber;
+
+    struct {
+        UCHAR   Device;
+        UCHAR   Function;
+    } PCIPath[ANYSIZE_ARRAY];
+} DEVICESCOPE, *PDEVICESCOPE;
+
+typedef struct _DRHD {
+    UCHAR       Flags;
+    UCHAR       Reserved;
+    USHORT      SegmentNumber;
+    ULONGLONG   BaseAddress;
+    DEVICESCOPE DeviceScope[ANYSIZE_ARRAY];
+} DRHD, *PDRHD;
+
+typedef struct _RMRR {
+    UCHAR       Reserved[2];
+    USHORT      SegmentNumber;
+    ULONGLONG   RegionBaseAddress;
+    ULONGLONG   RegionLimitAddress;
+    DEVICESCOPE DeviceScope[ANYSIZE_ARRAY];
+} RMRR, *PRMRR;
+
+typedef struct _ATSR {
+    UCHAR       Flags;
+    UCHAR       Reserved;
+    USHORT      SegmentNumber;
+    DEVICESCOPE DeviceScope[ANYSIZE_ARRAY];
+} ATSR, *PATSR;
+
+typedef struct _RHSA {
+    USHORT      Type;
+    USHORT      Length;
+    ULONG       ReservedZ;
+    ULONGLONG   RegisterBaseAddress;
+    ULONG       ProximityDomain;
+} RHSA, *PRHSA;
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+
+typedef struct _DMARTABLE
+{
+    USHORT  Type;
+    USHORT  Length;
+    union {
+        DRHD Drhd;
+        RMRR Rmrr;
+        ATSR Atsr;
+        RHSA Rhsa;
+    } DUMMYUNIONNAME;
+} DMARTABLE, *PDMARTABLE;
+
+typedef struct _DMAR {
+    DESCRIPTION_HEADER  Header;
+    UCHAR   HostAddressWidth;
+    UCHAR   Flags;
+    UCHAR   Reserved[10];
+    DMARTABLE  DMARTables[ANYSIZE_ARRAY];
+} DMAR, *PDMAR;
+
+typedef union _DMAR_GCMD_REG {
+    ULONG AsULONG;
+    struct {
+        ULONG Reserved:23;
+        ULONG CompatibilityFormatInterruptEnable:1;         // bit 23   CFI
+        ULONG SetInterruptRemappingTablePointer:1;          // bit 24   SIRTP
+        ULONG InterruptRemappingEnable:1;                   // bit 25   IRE
+        ULONG QueuedInvalidationEnable:1;                   // bit 26   QIE
+        ULONG WriteBufferFlush:1;                           // bit 27   WBF
+        ULONG EnableAdvancedFaultLogging:1;                 // bit 28   EAFL
+        ULONG SetFaultLog:1;                                // bit 29   SFL
+        ULONG SetRootTablePointer:1;                        // bit 30   SRTP
+        ULONG TranslationEnable:1;                          // bit 31   TE
+    } DUMMYSTRUCTNAME;
+
+} DMAR_GCMD_REG, *PDMAR_GCMD_REG;
+
+
+typedef union _DMAR_GSTS_REG {
+    ULONG AsULONG;
+    struct {
+        ULONG Reserved:23;
+        ULONG CompatibilityFormatInterruptStatus:1;         // bit 23   CFIS
+        ULONG SetInterruptRemappingTablePointerStatus:1;    // bit 24   IRTPS
+        ULONG InterruptRemappingEnableStatus:1;             // bit 25   IRES
+        ULONG QueuedInvalidationEnableStatus:1;             // bit 26   QIES
+        ULONG WriteBufferFlushStatus:1;                     // bit 27   WBFS
+        ULONG EnableAdvancedFaultLoggingStatus:1;           // bit 28   AFLS
+        ULONG SetFaultLogStatus:1;                          // bit 29   FLS
+        ULONG SetRootTablePointerStatus:1;                  // bit 30   RTPS
+        ULONG TranslationEnableStatus:1;                    // bit 31   TES
+    } DUMMYSTRUCTNAME;
+
+} DMAR_GSTS_REG, *PDMAR_GSTS_REG;
+
+//
+// AMD IOMMU related ACPI data structures.
+//
+#define IVRS_SIGNATURE          0x53525649      // "IVRS"
+
+typedef union _IVRS_IVINFO {
+
+    UINT32 AsUINT32;
+
+    struct {
+        UINT32 EFRSup:1;
+        UINT32 DmaGuardOptIn:1;
+        UINT32 ReservedZ0:3;
+        UINT32 GVASize:3;
+        UINT32 PASize:7;        // Physical address size
+        UINT32 VASize:7;        // Virtual address size
+        UINT32 HtAtsResv:1;     // ATS address translation range reserved
+        UINT32 ReservedZ1:9;
+    } DUMMYSTRUCTNAME;
+
+} IVRS_IVINFO, *PIVRS_IVINFO;
+
+typedef struct _IVRS {
+
+    DESCRIPTION_HEADER Header;
+    IVRS_IVINFO IVInfo;
+    UINT64 Reserved;
+    UINT8 DefinitionBlocks[1];
+
+} IVRS, *PIVRS;
+
+typedef enum _IVRS_BLOCK_TYPE {
+
+    IommuDefinitionBlockTypeIvhd = 0x10,
+    IommuDefinitionBlockType11Ivhd = 0x11,
+    IommuDefinitionBlockTypeIvmdAll = 0x20,
+    IommuDefinitionBlockTypeIvmdSpecified = 0x21,
+    IommuDefinitionBlockTypeIvmdRange = 0x22,
+    IommuDefinitionBlockType40Ivhd = 0x40,
+
+} IVRS_BLOCK_TYPE;
+
+typedef struct _IVRS_BLOCK_HEADER {
+
+    UINT8 Type;
+    UINT8 Flags;
+    UINT16 Length;
+
+} IVRS_BLOCK_HEADER, *PIVRS_BLOCK_HEADER;
+
+typedef struct _IVHD_BLOCK {
+
+    UINT8 Type;
+
+    union {
+
+        UINT8 AsUINT8;
+
+        struct {
+            UINT8 HtTunEn:1;    // Overrides MMIO Offset 0018h[HtTunEn]
+            UINT8 PassPW:1;     // Overrides MMIO Offset 0018h[PassPw]
+            UINT8 ResPassPW:1;  // Overrides MMIO Offset 0018h[ResPassPW]
+            UINT8 Isoc:1;       // Overrides MMIO Offset 0018h[Isoc]
+            UINT8 IotlbSup:1;   // Overrides Capability Offset 00h[IotlbSup]
+            UINT8 ReservedZ0:3;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+
+    UINT16 Length;
+    UINT16 DeviceId;
+    UINT16 CapabilityOffset;
+    UINT64 IommuBaseAddress;
+    UINT16 PciSegment;
+
+    union {
+
+        UINT16 AsUINT16;
+
+        struct {
+            UINT16 MsiNum:5;
+            UINT16 Reserved1:3;
+            UINT16 UnitId:5;
+            UINT16 Reserved2:3;
+        } DUMMYSTRUCTNAME;
+
+    } IommuInfo;
+
+    UINT32 ReservedZ0;
+
+    union {
+
+        UINT8 DeviceEntries[1];
+
+        struct {
+            UINT64 EfrRegisterImage;
+            UINT64 ReservedZ1;
+            UINT8 Type11DeviceEntries[1];
+        } DUMMYSTRUCTNAME;
+
+    } DUMMYUNIONNAME;
+
+} IVHD_BLOCK, *PIVHD_BLOCK;
+
+typedef enum _IVHD_ENTRY_TYPE {
+
+    IvhdEntryTypePad4 = 0,
+    IvhdEntryTypeAll = 1,
+    IvhdEntryTypeSelect = 2,
+    IvhdEntryTypeStartRange = 3,
+    IvhdEntryTypeEndRange = 4,
+    IvhdEntryTypePad8 = 64,
+    IvhdEntryTypeAliasSelect = 66,
+    IvhdEntryTypeAliasStartRange = 67,
+    IvhdEntryTypeExtendedSelect = 70,
+    IvhdEntryTypeExtendedStartRange = 71,
+    IvhdEntryTypeSpecialDevice = 72,
+    IvhdEntryTypeAcpiDevice = 0xF0
+
+} IVRS_TABLE_TYPE;
+
+typedef enum _APCI_IVHD_ENTRY_VARIETY {
+
+    IvhdEntryVarietyIoapic = 1,
+    IvhdEntryVarietyHpet = 2
+
+} IVHD_ENTRY_VARIETY;
+
+//
+// IVHD Device Entry Type size is based on upper two bits of the type value.
+//
+//      Type    | Uppermost 2-bits | Device Entry Size
+//      ---------------------------------------------------
+//      0-63    | 00b              | 4
+//      64-127  | 01b              | 8
+//      128-191 | 10b              | 16
+//      192-255 | 11b              | 32
+//
+#define IVHD_DEVICE_ENTRY_TYPE_TO_SIZE(_Type_) ((ULONG_PTR)(1ULL << (((_Type_) >> 6) + 2)))
+
+typedef struct _IVHD_DEVICE_ENTRY {
+
+    UINT8 Type;
+    UINT16 DeviceId;
+
+    union {
+
+        UINT8 AsUINT8;
+
+        struct {
+            UINT8 INITPass:1;       // Device can assert INIT interrupt
+            UINT8 ExtIntPass:1;     // Device can assert ExtInt
+            UINT8 NMIPass:1;        // Device can assert NMI
+            UINT8 ReservedZ0:1;
+            UINT8 SysMgt:2;         // Device can assert SMI
+            UINT8 LINT0Pass:1;      // Device can assert LINT0 interrupts
+            UINT8 LINT1Pass:1;      // Device can assert LINT1 interrupts
+        } DUMMYSTRUCTNAME;
+
+    } DataSetting;
+
+    union {
+
+        UINT32 AsUINT32;
+
+        struct {
+            UINT8 Handle;           // For Type 72
+            UINT16 AliasDeviceId;   // For Type 66, 67, or 72
+            UINT8 Variety;          // For Type 72
+        };
+
+        struct {
+            UINT32 Reserved:31;
+            UINT32 AtsDisabled:1;   // For Type 70 or 71
+        };
+
+    } ExtendedDataSetting;
+
+} IVHD_DEVICE_ENTRY, *PIVHD_DEVICE_ENTRY;
+
+typedef struct _IVHD_ACPI_DEVICE_ENTRY {
+
+    UINT8 Type;
+    UINT16 DeviceId;
+
+    union {
+
+        UINT8 AsUINT8;
+
+        struct {
+            UINT8 INITPass:1;       // Device can assert INIT interrupt
+            UINT8 ExtIntPass:1;     // Device can assert ExtInt
+            UINT8 NMIPass:1;        // Device can assert NMI
+            UINT8 ReservedZ0:1;
+            UINT8 SysMgt:2;         // Device can assert SMI
+            UINT8 LINT0Pass:1;      // Device can assert LINT0 interrupts
+            UINT8 LINT1Pass:1;      // Device can assert LINT1 interrupts
+        } DUMMYSTRUCTNAME;
+
+    } DataSetting;
+
+    UINT64 HardwareId;
+    UINT64 CompatibleId;
+    UINT8 UniqueIdFormat;
+    UINT8 UniqueIdLength;
+
+    //
+    // variable lengthed unique ID follows here.
+    //
+
+} IVHD_ACPI_DEVICE_ENTRY, *PIVHD_ACPI_DEVICE_ENTRY;
+
+typedef struct _IVMD_BLOCK {
+
+    UINT8 Type;     // 0x20, 0x21 and 0x22
+
+    union {
+
+        UINT8 AsUINT8;
+
+        struct {
+            UINT8 Unity:1;              // 1b VA == PA
+            UINT8 IR:1;                 // 1b Readable, 0b Not readable
+            UINT8 IW:1;                 // 1b Writable, 0b Not writable
+            UINT8 ExclusionRange:1;
+            UINT8 ReservedZ0:4;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+
+    UINT16 Length;
+
+    union {
+        UINT16 DeviceId;            // Type 0x21
+        UINT16 StartDeviceId;       // Type 0x22
+    } u1;
+
+    union {
+        UINT16 AuxiliaryData;       // Type 0x20, 0x21 Reserved Zero
+        UINT16 EndDeviceId;         // Type 0x22
+    } u2;
+
+    UINT64 ReservedZ0;
+    UINT64 StartAddress;            // Starting SPA of memory block
+    UINT64 MemoryBlockLength;       // Memory block length
+
+} IVMD_BLOCK, *PIVMD_BLOCK;
+
+//
+// Input Output Remapping Table
+//
+
+#define IORT_SIGNATURE 0x54524f49       // "IORT"
+
+//
+// Secure Device Table
+//
+
+#define SDEV_SIGNATURE  0x56454453      // "SDEV"
+#define SDEV_SECURE_ACPI_TYPE 0
+#define SDEV_SECURE_PCI_TYPE 1
+
+#define SDEV_ENTRY_FLAG_OPTIONALLY_SECURE 1
+
+typedef struct _SDEV_ENTRY_HEADER {
+    UCHAR Type;
+    UCHAR Flags;
+    USHORT Length;
+} SDEV_ENTRY_HEADER, *PSDEV_ENTRY_HEADER;
+
+typedef struct _SDEV_SECURE_PCI_INFO_ENTRY {
+    SDEV_ENTRY_HEADER Header;
+    USHORT PciSegmentNumber;
+    USHORT StartBusNumber;
+    USHORT PciPathOffset;
+    USHORT PciPathLength;
+    USHORT VendorInfoOffset;
+    USHORT VendorInfoLength;
+} SDEV_SECURE_PCI_INFO_ENTRY, *PSDEV_SECURE_PCI_INFO_ENTRY;
+
+typedef struct _SDEV_SECURE_ACPI_INFO_ENTRY {
+    SDEV_ENTRY_HEADER Header;
+    USHORT IdentifierOffset;
+    USHORT IdentifierLength;
+    USHORT VendorInfoOffset;
+    USHORT VendorInfoLength;
+} SDEV_SECURE_ACPI_INFO_ENTRY, *PSDEV_SECURE_ACPI_INFO_ENTRY;
+
+typedef struct _SDEV {
+    DESCRIPTION_HEADER Header;
+    ULONG SDEVTables[ANYSIZE_ARRAY];
+} SDEV, *PSDEV;
+
+//
+// Definitions pertaining to the Core System Resource Table (CSRT) The CSRT
+// contains a CSRT table header followed by one or more Resource Groups.
+// Each Resource Group contains a Resource Group header followed by one or
+// more Resource Descriptors. Each Resource Descriptor contains a Resource
+// Descriptor header followed by information describing the resource.
+//
+// The relationship of these fields is:
+//
+// CSRT Table Header
+// Resource Group[0]
+//   Resource Group Header
+//   Resource Group Header Shared Info
+//   Resource Descriptor[0]
+//     Resource Descriptor Header
+//     Resource Information (not defined here)
+//   {Resource Descriptor[1..n]}
+// {Resource Group[1..n]}
+//
+
+#define CSRT_SIGNATURE ((ULONG)('TRSC'))
+#define CSRT_REVISION 0x00
+
+//
+// CSRT Table Header
+//
+
+typedef struct _CSRT_TABLE_HEADER {
+    DESCRIPTION_HEADER Header;
+} CSRT_TABLE_HEADER, *PCSRT_TABLE_HEADER;
+
+//
+// Resource Group Header
+//
+
+typedef struct _CSRT_RESOURCE_GROUP_HEADER {
+    UINT32  Length;             // Length of Group, including size of header.
+    UINT32  VendorId;           // 4-char ID
+    UINT32  SubvendorId;        // 4-char ID, 0 => No Subvendor/subdevice Id
+    UINT16  DeviceId;           // 16-bit Device Id
+    UINT16  SubdeviceId;        // 16-bit Subdevice Id
+    UINT16  Revision;           // 16-bit Revision
+    UINT16  Instance;           // 16-bit Instance. Normally set to 0.
+    UINT32  SharedInfoLength;   // Length of appended info, 0 => no shared info
+} CSRT_RESOURCE_GROUP_HEADER, *PCSRT_RESOURCE_GROUP_HEADER;
+
+//
+// Resource Descriptor Types
+//
+
+#define CSRT_RD_TYPE_UNKNOWN 0
+#define CSRT_RD_SUBTYPE_UNKNOWN 0
+
+#define CSRT_RD_TYPE_ANY 0xFFFF
+#define CSRT_RD_SUBTYPE_ANY 0xFFFF
+
+#define CSRT_RD_TYPE_INTERRUPT 1
+#define CSRT_RD_SUBTYPE_INTERRUPT_LINES 0
+#define CSRT_RD_SUBTYPE_INTERRUPT_CONTROLLER 1
+
+#define CSRT_RD_TYPE_TIMER 2
+#define CSRT_RD_SUBTYPE_TIMER 0
+
+#define CSRT_RD_TYPE_DMA 3
+#define CSRT_RD_SUBTYPE_DMA_CHANNEL 0
+#define CSRT_RD_SUBTYPE_DMA_CONTROLLER 1
+
+#define CSRT_RD_TYPE_CACHE 4
+#define CSRT_RD_SUBTYPE_CACHE 0
+
+#define CSRT_RD_UID_ANY 0xFFFF
+
+//
+// Resource Descriptor Header
+//
+
+typedef struct _CSRT_RESOURCE_DESCRIPTOR_HEADER {
+    UINT32  Length;         // Length of Descriptor, including size of header.
+    UINT16  Type;           // Type, one of CSRT_RD_TYPE*
+    UINT16  Subtype;        // Subtype, one of CSRT_RD_SUBTYPE*
+    UINT32  Uid;            // Unique (within Resource Group) Identifier
+} CSRT_RESOURCE_DESCRIPTOR_HEADER, *PCSRT_RESOURCE_DESCRIPTOR_HEADER;
+
+//
+// ACPI PCC table format. This table supplies the location and usage semantics
+// for low overhead communications with a platform entity.
+//
+
+typedef struct _PCC_SUBSPACE_HEADER {
+    UCHAR Type;
+    UCHAR Length;
+} PCC_SUBSPACE_HEADER, *PPCC_SUBSPACE_HEADER;
+
+#define PCC_SUBSPACE_TYPE_GENERIC 0
+
+typedef struct _PCC_GENERIC_SUBSPACE {
+    PCC_SUBSPACE_HEADER Header;
+    USHORT Reserved1;
+    ULONG Reserved2;
+    PHYSICAL_ADDRESS BaseAddress;
+    ULONGLONG Length;
+    GEN_ADDR DoorbellRegister;
+    ULONGLONG DoorbellPreserve;
+    ULONGLONG DoorbellWrite;
+    ULONG NominalLatency;
+    ULONG MaximumPeriodicAccessRate;
+    USHORT MinimumRequestTurnaroundTime;
+} PCC_GENERIC_SUBSPACE, *PPCC_GENERIC_SUBSPACE;
+
+#define PCC_GENERIC_SHARED_REGION_SIGNATURE 0x50434300      // " CCP"
+
+typedef struct _PCC_GENREIC_SHARED_REGION {
+    ULONG Signature;
+    union {
+        struct {
+            USHORT CommandCode:8;     // 7:0
+            USHORT ReservedZ:7;       // 14:8
+            USHORT SciDoorbell:1;     // 15
+        };
+
+        USHORT AsUShort;
+    } Command;
+
+    union {
+        struct {
+            USHORT CommandComplete:1;      // 0
+            USHORT SciReceived:1;          // 1
+            USHORT Error:1;                // 2
+            USHORT PlatformNotification:1; // 3
+            USHORT Reserved:12;            // 15:4
+        };
+
+        USHORT AsUShort;
+    } Status;
+
+    UCHAR CommunicationSpace[ANYSIZE_ARRAY];
+} PCC_GENERIC_SHARED_REGION, *PPCC_GENERIC_SHARED_REGION;
+
+#define PCCT_SIGNATURE 0x54434350      // "PCCT"
+
+typedef struct _PCC_TABLE    {
+    DESCRIPTION_HEADER Header;
+    union {
+
+        ULONG AsULong;
+
+        struct {
+            ULONG SciSupported:1;       // SCI notification is supported
+            ULONG Reserved:31;
+        } DUMMYSTRUCTNAME;
+
+    } Flags;
+    ULONG64 Reserved;
+    PCC_SUBSPACE_HEADER Subspaces;      // packed list of subspaces
+} PCC_TABLE, *PPCC_TABLE;
+
+//
+// Boot Graphics Resource Table
+//
+
+#define BGRT_STATUS_IMAGE_VALID      0x01
+#define BGRT_STATUS_DISPLAY_ROTATION 0x06
+
+#define BGRT_STATUS_GET_DISPLAY_ROTATION(_Status_) \
+    ((UCHAR)((ULONG)((_Status_) & BGRT_STATUS_DISPLAY_ROTATION) >> 1))
+
+typedef enum _BGRT_IMAGE_TYPE {
+    BgrtImageTypeBitmap,
+    BgrtImageTypeMax
+} BGRT_IMAGE_TYPE, *PBGRT_IMAGE_TYPE;
+
+typedef struct _BGRT_TABLE {
+    DESCRIPTION_HEADER Header;
+    USHORT Version;
+    UCHAR Status;
+    UCHAR ImageType;
+    ULONGLONG LogoAddress;
+    ULONG OffsetX;
+    ULONG OffsetY;
+} BGRT_TABLE, *PBGRT_TABLE;
+
+#define BGRT_SIGNATURE 0x54524742 // "BGRT"
+
+//
+// Boot Background Resource Table
+//
+
+typedef struct _BBRT_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONG Background;
+    ULONG Foreground;
+} BBRT_TABLE, *PBBRT_TABLE;
+
+#define BBRT_SIGNATURE 0x54524242 // "BBRT"
+
+//
+// Generic Timer Description Table
+//
+
+#define GTDT_SIGNATURE 0x54445447 // "GTDT"
+
+typedef struct _GTDT_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONGLONG CntControlBasePhysicalAddress;
+    ULONG Reserved;
+    ULONG SecurePhysicalTimerGsiv;
+    ULONG SecurePhysicalTimerFlags;
+    ULONG NonSecurePhysicalTimerGsiv;
+    ULONG NonSecurePhysicalTimerFlags;
+    ULONG VirtualTimerEventGsiv;
+    ULONG VirtualTimerEventFlags;
+    ULONG NonSecurePhysicalTimer2Gsiv;
+    ULONG NonSecurePhysicalTimer2Flags;
+    ULONGLONG CntReadBasePhysicalAddress;
+    ULONG TimerBlockCount;
+    ULONG TimerBlockOffset;
+} GTDT_TABLE, *PGTDT_TABLE;
+
+//
+// GTDT Table timer flags.
+//
+
+#define GTDT_TIMER_EDGE_TRIGGERED  0x00000001
+#define GTDT_TIMER_ACTIVE_LOW      0x00000002
+#define GTDT_TIMER_ALWAYS_ON       0x00000004
+
+//
+// GTDT Platform Timer block types.
+//
+
+typedef enum _GTDT_PLATFORM_TIMER_BLOCK_TYPE {
+    GtdtPlatformGtBlock = 0,
+    GtdtPlatformWatchdogBlock = 1,
+} GTDT_PLATFORM_TIMER_BLOCK_TYPE, *PGTDT_PLATFORM_TIMER_BLOCK_TYPE;
+
+typedef struct _GTDT_PLATFORM_TIMER_HEADER {
+    UCHAR Type;
+    USHORT Length;
+} GTDT_PLATFORM_TIMER_HEADER, *PGTDT_PLATFORM_TIMER_HEADER;
+
+//
+// GTDT Platform Timer GT block definitions.
+//
+
+typedef struct _GTDT_PLATFORM_GT_BLOCK {
+    GTDT_PLATFORM_TIMER_HEADER Header;
+    UCHAR Reserved;
+    ULONGLONG CntCtlBasePhysicalAddress;
+    ULONG BlockTimerCount;
+    ULONG BlockTimerOffset;
+} GTDT_PLATFORM_GT_BLOCK, *PGTDT_PLATFORM_GT_BLOCK;
+
+#define GTDT_PLATFORM_GT_EDGE_TRIGGERED   0x00000001
+#define GTDT_PLATFORM_GT_ACTIVE_LOW       0x00000002
+
+#define GTDT_PLATFORM_GT_COMMON_SECURE    0x00000001
+#define GTDT_PLATFORM_GT_COMMON_ALWAYS_ON 0x00000002
+
+typedef struct _GTDT_PLATFORM_GT_INSTANCE {
+    UCHAR FrameNumber;
+    UCHAR Reserved[3];
+    ULONGLONG CntBasePhysicalAddress;
+    ULONGLONG CntEL0BasePhysicalAddress;
+    ULONG PhysicalTimerGsiv;
+    ULONG PhysicalTimerFlags;
+    ULONG VirtualTimerGsiv;
+    ULONG VirtualTimerFlags;
+    ULONG CommonFlags;
+} GTDT_PLATFORM_GT_INSTANCE, *PGTDT_PLATFORM_GT_INSTANCE;
+
+//
+// GTDT Platform Timer GT block definitions.
+//
+
+#define GTDT_WATCHDOG_EDGE_TRIGGERED 0x00000001
+#define GTDT_WATCHDOG_ACTIVE_LOW     0x00000002
+#define GTDT_WATCHDOG_SECURE         0x00000004
+
+typedef struct _GTDT_PLATFORM_WATCHDOG_BLOCK {
+    GTDT_PLATFORM_TIMER_HEADER Header;
+    UCHAR Reserved;
+    ULONGLONG RefreshFramePhysicalAddress;
+    ULONGLONG ControlFramePhysicalAddress;
+    ULONG WatchdogTimerGsiv;
+    ULONG WatchdogTimerFlags;
+} GTDT_PLATFORM_WATCHDOG_BLOCK, *PGTDT_PLATFORM_WATCHDOG_BLOCK;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// ACPI OEM0 table format. This table is created by Hyper-V to pass
+// entropy from the host to the guest.
+//
+
+#define OEM0_RANDOM_BYTES 64
+
+typedef struct _OEM0_TABLE {
+    DESCRIPTION_HEADER Header;
+    UCHAR Data[OEM0_RANDOM_BYTES];
+} OEM0_TABLE, *POEM0_TABLE;
+
+#define OEM0_SIGNATURE 0x304d454f   // "OEM0"
+
+//
+// System Locality Distance Information Table (SLIT).
+//
+
+#define SLIT_SIGNATURE 0x54494c53   // "SLIT"
+
+typedef struct SLIT_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONGLONG LocalityCount;
+    // UCHAR Entry[LocalityCount][LocalityCount]
+} SLIT_TABLE, *PSLIT_TABLE;
+
+#define SLIT_NORMALIZATION_VALUE 10
+
+//
+// The three tables below (s3pt, fbpt, and fpdt) are all part of work to
+// enable the firmware to pass up boot/on performance metrics to the OS.
+// The layout of these tables is as follows: the fpdt - firmware performance
+// data table - contains records of type s3 table pointer and boot table
+// pointer.  Both of these types of records contain the physical address of
+// their respective table.  The FPDT table does not change except on reboot.
+// The s3pt and fbpt are the tables pointed at by these physical addresses.
+// The contents of memory at these physical locations can and will change
+// across s3 and s4 transitions, and across boot.  The s3 performance table
+// can contain multiple records, one for sleep performance and one for resume.
+//
+
+//
+// S3 Performance Data Table
+//
+
+#define S3PT_SIGNATURE 0x54503353   // "S3PT"
+
+typedef struct _FIRMWARE_S3_PERFORMANCE_TABLE {
+    ULONG Signature;
+    ULONG Length;
+    //s3 performance records
+} FIRMWARE_S3_PERFORMANCE_TABLE, *PFIRMWARE_S3_PERFORMANCE_TABLE;
+
+typedef struct _S3PT_RECORD_HEADER {
+    USHORT RecordSubtype;
+    CHAR RecordLength;
+    CHAR Revision;
+} S3PT_RECORD_HEADER, *PS3PT_RECORD_HEADER;
+
+typedef struct _S3PT_PERFORMANCE_RECORD {
+    S3PT_RECORD_HEADER RecordHeader;
+    union {
+        struct {
+            ULONG ResumeCount;
+            ULONGLONG FullResume;
+            ULONGLONG AverageResume;
+        } ResumeRecord;
+        struct {
+            ULONGLONG SuspendStart;
+            ULONGLONG SuspendEnd;
+        } SuspendRecord;
+    }u;
+} S3PT_PERFORMANCE_RECORD, *PS3PT_PERFORMANCE_RECORD;
+
+typedef enum _FPDT_RECORD_SUBTYPE {
+    S3PTTypeResumePerformance = 0,
+    S3PTTypeSuspendPerformance = 1,
+    BasicBootPerformanceType = 2
+} FPDT_RECORD_SUBTYPE, *PFPDT_RECORD_SUBTYPE;
+
+//
+// Firmware Basic Boot Performance Table
+//
+
+#define FBPT_SIGNATURE 0x54504246  // "FBPT"
+
+typedef struct _FIRMWARE_BOOT_PERFORMANCE_TABLE {
+    ULONG Signature;
+    ULONG Length;
+    // FBPT_RECORD Record[];
+} FIRMWARE_BOOT_PERFORMANCE_TABLE, *PFIRMWARE_BOOT_PERFORMANCE_TABLE;
+
+typedef struct _FBPT_RECORD_HEADER {
+    USHORT RecordSubtype;
+    CHAR RecordLength;
+    CHAR Revision;
+} FBPT_RECORD_HEADER, *PFBPT_RECORD_HEADER;
+
+typedef struct _FBPT_RECORD {
+    FBPT_RECORD_HEADER RecordHeader;
+    ULONG Reserved;
+    ULONGLONG ResetEnd;
+    ULONGLONG LoadImageStart;
+    ULONGLONG StartImageStart;
+    ULONGLONG ExitBootServicesEntry;
+    ULONGLONG ExitBootServicesExit;
+} FBPT_RECORD, *PFBPT_RECORD;
+
+//
+// Firmware Performance Data Table
+//
+
+#define FPDT_SIGNATURE 0x54445046  // "FPDT"
+
+typedef struct _FPDT_TABLE {
+    DESCRIPTION_HEADER Header;
+    //fpdt performance records
+} FPDT_TABLE, *PFPDT_TABLE;
+
+typedef enum _FPDT_RECORD_TYPE {
+    FpdtTypeBootTablePointer = 0,
+    FpdtTypeS3TablePointer = 1
+} FPDT_RECORD_TYPE, *PFPDT_RECORD_TYPE;
+
+typedef struct _FPDT_RECORD_HEADER {
+    USHORT RecordType;
+    CHAR RecordLength;
+    CHAR Revision;
+    ULONG Reserved;
+} FPDT_RECORD_HEADER, *PFPDT_RECORD_HEADER;
+
+typedef struct _FPDT_RECORD {
+    FPDT_RECORD_HEADER RecordHeader;
+    union {
+        struct {
+            PHYSICAL_ADDRESS PhysicalAddress;
+        } S3TablePointer;
+        struct {
+            PHYSICAL_ADDRESS PhysicalAddress;
+        } BasicBootPointer;
+    }u;
+} FPDT_RECORD, *PFPDT_RECORD;
+
+//
+//  Windows Platform Binary Table (WPBT)
+//
+
+#define WPBT_SIGNATURE 'TBPW'
+
+typedef enum _ACPI_WPBT_CONTENT_LAYOUT {
+    WpbtContentLayoutPE = 1
+} ACPI_WPBT_CONTENT_LAYOUT;
+
+typedef enum _ACPI_WPBT_CONTENT_TYPE {
+    WpbtContentTypeNative = 1
+} ACPI_WPBT_CONTENT_TYPE;
+
+#define WPBT_MINIMUM_REVISION 1
+#define WPBT_MAXIMUM_REVISION 1
+
+typedef struct _ACPI_WPBT_TABLE {
+    DESCRIPTION_HEADER Header;
+
+    ULONG HandoffMemorySize;
+    ULONG64 HandoffMemoryLocation;
+    UCHAR ContentLayout;
+    UCHAR ContentType;
+    USHORT CommandLineArgumentsLength;
+    WCHAR CommandLineArguments[ANYSIZE_ARRAY];
+} ACPI_WPBT_TABLE, *PACPI_WPBT_TABLE;
+
+#define WPBT_MIN_SIZE  52
+#define WPBT_BOOT_SEARCH_START      0x1000
+#define WPBT_BOOT_SEARCH_END       0xA0000
+#define WPBT_BOOT_SEARCH_INCREMENT     0x40
+
+//
+// TPM 2.0 ACPI table.
+//
+
+#define TPM20_TABLE_SIGNATURE '2MPT'
+
+typedef struct _TPM20_TABLE {
+    DESCRIPTION_HEADER Header;
+
+    union {
+        struct {
+            UINT32 UseMemoryDescriptors : 1;
+            UINT32 CmdListCapable       : 1;
+            UINT32 NoDeviceIO           : 1;
+            UINT32 DeviceMemory         : 1;
+            UINT32 DevMemOnly           : 1;
+            UINT32 Reserved             : 27;
+        } Flags;
+
+        UINT32 FlagBits;
+    } u;
+
+    UINT64 ControlAreaPA;
+    UINT32 StartMethod;
+    UINT32 PlatformParameters[8];
+} TPM20_TABLE, *PTPM20_TABLE;
+
+typedef enum _TPM20_START_METHOD {
+    Tpm20TableStartMethodInvalid = 0,
+    Tpm20TableStartMethodSim     = 1,
+    Tpm20TableStartMethodAcpi    = 2,
+    Tpm20TableStartMethodTz1     = 3,
+    Tpm20TableStartMethodTz2     = 4,
+    Tpm20TableStartMethodTz3     = 5,
+    Tpm20TableStartMethodTis13   = 6,
+    Tpm20TableStartMethodCR      = 7,
+    Tpm20TableStartMethodCRWithAcpi   = 8
+} TPM20_START_METHOD, *PTPM20_START_METHOD;
+
+//
+// ACPI Physical Location Descriptor, Revision 1
+// (per ACPI 3.0 spec, section 6.1.6)
+//
+
+typedef struct _ACPI_PLD_BUFFER {
+    UINT32 Revision:7;
+    UINT32 IgnoreColor:1;
+    UINT32 Color:24;
+    UINT32 Width:16;
+    UINT32 Height:16;
+    UINT32 UserVisible:1;
+    UINT32 Dock:1;
+    UINT32 Lid:1;
+    UINT32 Panel:3;
+    UINT32 VerticalPosition:2;
+    UINT32 HorizontalPosition:2;
+    UINT32 Shape:4;
+    UINT32 GroupOrientation:1;
+    UINT32 GroupToken:8;
+    UINT32 GroupPosition:8;
+    UINT32 Bay:1;
+    UINT32 Ejectable:1;
+    UINT32 EjectionRequired:1;
+    UINT32 CabinetNumber:8;
+    UINT32 CardCageNumber:8;
+    UINT32 Reserved:14;
+} ACPI_PLD_BUFFER, *PACPI_PLD_BUFFER;
+
+//
+// ACPI Physical Location Descriptor, Revision 2
+// (per ACPI 4.0 spec, section 6.1.6; now ACPI 6.0 spec, section 6.1.8)
+//
+
+typedef struct _ACPI_PLD_V2_BUFFER {
+    UINT32 Revision:7;
+    UINT32 IgnoreColor:1;
+    UINT32 Color:24;
+    UINT32 Width:16;
+    UINT32 Height:16;
+    UINT32 UserVisible:1;
+    UINT32 Dock:1;
+    UINT32 Lid:1;
+    UINT32 Panel:3;
+    UINT32 VerticalPosition:2;
+    UINT32 HorizontalPosition:2;
+    UINT32 Shape:4;
+    UINT32 GroupOrientation:1;
+    UINT32 GroupToken:8;
+    UINT32 GroupPosition:8;
+    UINT32 Bay:1;
+    UINT32 Ejectable:1;
+    UINT32 EjectionRequired:1;
+    UINT32 CabinetNumber:8;
+    UINT32 CardCageNumber:8;
+    UINT32 Reference:1;
+    UINT32 Rotation:4;
+    UINT32 Order:5;
+    UINT32 Reserved:4;
+    UINT32 VerticalOffset:16;
+    UINT32 HorizontalOffset:16;
+} ACPI_PLD_V2_BUFFER, *PACPI_PLD_V2_BUFFER;
+
+// Color bits 8:31 (Red 8:15, Green 16:23, Blue 24:31)
+#define ACPI_PLD_MAKE_COLOR(r, g, b) ((UINT32)(((r) & 0xFF) | (((g) & 0xFF) << 8) | (((b) & 0xFF) << 16)))
+#define ACPI_PLD_COLOR_RED(c)        ((BYTE)(((c) >>  0) & 0xFF))
+#define ACPI_PLD_COLOR_GREEN(c)      ((BYTE)(((c) >>  8) & 0xFF))
+#define ACPI_PLD_COLOR_BLUE(c)       ((BYTE)(((c) >> 16) & 0xFF))
+
+// Panel surface bits 67:69
+typedef enum _ACPI_PLD_PANEL {
+    AcpiPldPanelTop     = 0,
+    AcpiPldPanelBottom  = 1,
+    AcpiPldPanelLeft    = 2,
+    AcpiPldPanelRight   = 3,
+    AcpiPldPanelFront   = 4,
+    AcpiPldPanelBack    = 5,
+    AcpiPldPanelUnknown = 6,
+} ACPI_PLD_PANEL, *PACPI_PLD_PANEL;
+
+typedef ACPI_PLD_PANEL AcpiPldPanel;
+
+// Vertical position bits 70:71
+typedef enum _ACPI_PLD_VERTICAL_POSITION {
+    AcpiPldVPosUpper    = 0,
+    AcpiPldVPosCenter   = 1,
+    AcpiPldVPosLower    = 2,
+} ACPI_PLD_VERTICAL_POSITION, *PACPI_PLD_VERTICAL_POSITION;
+
+typedef ACPI_PLD_VERTICAL_POSITION AcpiPldVPos;
+
+// Horizontal position bits 72:73
+typedef enum _ACPI_PLD_HORIZONTAL_POSITION {
+    AcpiPldHPosLeft     = 0,
+    AcpiPldHPosCenter   = 1,
+    AcpiPldHPosRight    = 2,
+} ACPI_PLD_HORIZONTAL_POSITION, *PACPI_PLD_HORIZONTAL_POSITION;
+
+typedef ACPI_PLD_HORIZONTAL_POSITION AcpiPldHPos;
+
+// Shape bits 74:77
+typedef enum _ACPI_PLD_SHAPE {
+    AcpiPldShapeRound     = 0,
+    AcpiPldShapeOval      = 1,
+    AcpiPldShapeSquare    = 2,
+    AcpiPldShapeVRect     = 3,
+    AcpiPldShapeHRect     = 4,
+    AcpiPldShapeVTrap     = 5,
+    AcpiPldShapeHTrap     = 6,
+    AcpiPldShapeUnknown   = 7,
+    AcpiPldShapeChamfered = 8,
+} ACPI_PLD_SHAPE, *PACPI_PLD_SHAPE;
+
+typedef ACPI_PLD_SHAPE AcpiPldShape;
+
+// Orientation bit 78
+typedef enum _ACPI_PLD_ORIENTATION {
+    AcpiPldOrientationHorizontal = 0,
+    AcpiPldOrientationVertical   = 1,
+} ACPI_PLD_ORIENTATION, *PACPI_PLD_ORIENTATION;
+
+// Rotation bits 115:118
+typedef enum _ACPI_PLD_ROTATION {
+    AcpiPldRotation0      = 0,
+    AcpiPldRotation45     = 1,
+    AcpiPldRotation90     = 2,
+    AcpiPldRotation135    = 3,
+    AcpiPldRotation180    = 4,
+    AcpiPldRotation225    = 5,
+    AcpiPldRotation270    = 6,
+    AcpiPldRotation315    = 7,
+} ACPI_PLD_ROTATION, *PACPI_PLD_ROTATION;
+
+typedef ACPI_PLD_ROTATION AcpiPldRotation;
+
+// Offset bits 128:160 (Vertical 128:143, Horizontal 144:159)
+#define ACPI_PLD_OFFSET_NONE    0xFFFF
+
+//
+// ACPI PLD Joint Descriptor Buffer, Revision 1
+// (MSFT custom PLD buffer extension, 128-bits)
+//
+
+typedef struct _ACPI_PLD_JOINT_BUFFER {
+    UINT32 Revision:5;
+    UINT32 JointType:4;
+    UINT32 SourceEdge:3;
+    UINT32 TargetCabinetNumber:8;
+    UINT32 TargetPanel:3;
+    UINT32 TargetEdge:3;
+    UINT32 Reserved1:5;
+    UINT32 MovementOrientation:1;
+    UINT32 ForwardMovementRange:16;
+    UINT32 BackwardMovementRange:16;
+    UINT32 HorizontalOffset:16;
+    UINT32 VerticalOffset:16;
+    UINT32 GapOffset:16;
+    UINT32 Rotation:9;
+    UINT32 Reserved2:7;
+} ACPI_PLD_JOINT_BUFFER, *PACPI_PLD_JOINT_BUFFER;
+
+DEFINE_GUID(ACPI_PLD_JOINT_BUFFER_GUID,
+    0xf01cfc40, 0x3c75, 0x4523, 0x9e, 0x44, 0x21, 0x5c, 0xb1, 0x54, 0xbd, 0xa6);
+
+// Joint type bits 6:9
+typedef enum _ACPI_PLD_JOINT_TYPE {
+    AcpiPldJointTypeFixed  = 0,
+    AcpiPldJointTypePlanar = 1,
+    AcpiPldJointTypeHinge  = 2,
+    AcpiPldJointTypePivot  = 3,
+    AcpiPldJointTypeSwivel = 4,
+} ACPI_PLD_JOINT_TYPE, *PACPI_PLD_JOINT_TYPE;
+
+// Joint edge bits 10:12,24:26
+typedef enum _ACPI_PLD_EDGE {
+    AcpiPldEdgeTop     = 0,
+    AcpiPldEdgeBottom  = 1,
+    AcpiPldEdgeLeft    = 2,
+    AcpiPldEdgeRight   = 3,
+    AcpiPldEdgeUnknown = 4,
+} ACPI_PLD_EDGE, *PACPI_PLD_EDGE;
+
+//
+// ACPI PLD Spatial Descriptor Buffer, Revision 1
+// (MSFT custom PLD buffer extension, 128-bits)
+//
+
+typedef struct _ACPI_PLD_SPATIAL_BUFFER {
+    UINT32 Revision:5;
+    UINT32 RollRotation:9;
+    UINT32 PitchRotation:9;
+    UINT32 YawRotation:9;
+    UINT32 Width:16;
+    UINT32 Height:16;
+    UINT32 Length:16;
+    UINT32 HorizontalOffset:16;
+    UINT32 VerticalOffset:16;
+    UINT32 DepthOffset:16;
+} ACPI_PLD_SPATIAL_BUFFER, *PACPI_PLD_SPATIAL_BUFFER;
+
+DEFINE_GUID(ACPI_PLD_SPATIAL_BUFFER_GUID,
+    0x59af1a1f, 0xaba4, 0x4bb8, 0x81, 0xef, 0x55, 0x93, 0x8e, 0x9b, 0xc5, 0x3a);
+
+//
+// ACPI PLD Interface Class Descriptor Buffer, Revision 1
+// (MSFT custom PLD buffer extension, 128-bits)
+//
+
+typedef struct _ACPI_PLD_INTERFACE_CLASS_BUFFER {
+    GUID ClassGuid;
+} ACPI_PLD_INTERFACE_CLASS_BUFFER, *PACPI_PLD_INTERFACE_CLASS_BUFFER;
+
+DEFINE_GUID(ACPI_PLD_INTERFACE_CLASS_BUFFER_GUID,
+    0x1facec76, 0x96a8, 0x4d9e, 0x84, 0x6e, 0x3a, 0x6d, 0x68, 0x7c, 0x32, 0xfc);
+
+//
+// ACPI PLD Interface Instance ANSI/Unicode/GUID Descriptor Buffers, Revision 1
+// (MSFT custom PLD buffer extension, 128-bits)
+//
+
+typedef struct _ACPI_PLD_INTERFACE_INSTANCE_ANSI_BUFFER {
+    CHAR ReferenceString[16];
+} ACPI_PLD_INTERFACE_INSTANCE_ANSI_BUFFER, *PACPI_PLD_INTERFACE_INSTANCE_ANSI_BUFFER;
+
+typedef struct _ACPI_PLD_INTERFACE_INSTANCE_UNICODE_BUFFER {
+    WCHAR ReferenceString[8];
+} ACPI_PLD_INTERFACE_INSTANCE_UNICODE_BUFFER, *PACPI_PLD_INTERFACE_INSTANCE_UNICODE_BUFFER;
+
+typedef struct _ACPI_PLD_INTERFACE_INSTANCE_GUID_BUFFER {
+    GUID ReferenceGuid;
+} ACPI_PLD_INTERFACE_INSTANCE_GUID_BUFFER, *PACPI_PLD_INTERFACE_INSTANCE_GUID_BUFFER;
+
+DEFINE_GUID(ACPI_PLD_INTERFACE_INSTANCE_ANSI_BUFFER_GUID,
+    0x1facea4b, 0xda66, 0x484c, 0xba, 0x5b, 0x51, 0x27, 0xe0, 0x5f, 0x95, 0xb2);
+
+DEFINE_GUID(ACPI_PLD_INTERFACE_INSTANCE_UNICODE_BUFFER_GUID,
+    0x1face3f6, 0x1a60, 0x4686, 0x98, 0x33, 0xec, 0x84, 0x02, 0xd4, 0x3b, 0x04);
+
+DEFINE_GUID(ACPI_PLD_INTERFACE_INSTANCE_GUID_BUFFER_GUID,
+    0x1face9db, 0x2530, 0x4248, 0x8e, 0xe3, 0x51, 0x05, 0x3a, 0xef, 0x47, 0xc2);
+
+//
+// ACPI PLD Container Descriptor Buffer
+// (stored in _PLD custom data buffer, fixed size of 128-bits) 
+//
+
+typedef struct _ACPI_PLD_CONTAINER_BUFFER { 
+    GUID ContainerId;
+} ACPI_PLD_CONTAINER_BUFFER, *PACPI_PLD_CONTAINER_BUFFER; 
+
+//
+// {c02fa109-6a82-4188-9f66-b190ba62db49} 
+//
+
+DEFINE_GUID(ACPI_PLD_CONTAINER_BUFFER_GUID,
+     0xc02fa109, 0x6a82, 0x4188, 0x9f, 0x66, 0xb1, 0x90, 0xba, 0x62, 0xdb, 0x49);
+
+//
+// NFIT ACPI table (ACPI 6.0 section 5.2.25)
+//
+
+#define NFIT_TABLE_SIGNATURE 0x5449464e // 'NFIT'
+
+typedef struct _NFIT_TABLE {
+    DESCRIPTION_HEADER Header;
+
+    ULONG Reserved;
+    UCHAR Structures[ANYSIZE_ARRAY];
+} NFIT_TABLE, *PNFIT_TABLE;
+
+//
+// NFIT Structure common header
+//
+
+typedef struct _NFIT_STRUCT_HEADER {
+    USHORT Type;
+    USHORT Length;
+} NFIT_STRUCT_HEADER, *PNFIT_STRUCT_HEADER;
+
+//
+// NFIT Structure Types
+//
+
+typedef enum _NFIT_STRUCTURE_TYPE {
+    NfitSystemPhysicalAddressRange          = 0,
+    NfitNvdimmRegionMapping                 = 1,
+    NfitInterleave                          = 2,
+    NfitSmbiosManagementInformation         = 3,
+    NfitNvdimmControlRegion                 = 4,
+    NfitNvdimmBlockDataWindowRegion         = 5,
+    NfitFlushHintAddress                    = 6,
+    NfitPlatformCapabilities                = 7,
+    NfitMaximum
+} NFIT_STRUCTURE_TYPE, *PNFIT_STRUCTURE_TYPE;
+
+#include <guiddef.h>
+
+//
+// System Physical Address Range Types (GUIDs)
+//
+
+DEFINE_GUID( /* 7305944F-FDDA-44E3-B16C3F22D252E5D0 */
+    NFitSpaRangeVolatileMemory,
+    0x7305944F,
+    0xFDDA,
+    0x44E3,
+    0xB1, 0x6C, 0x3F, 0x22, 0xD2, 0x52, 0xE5, 0xD0);
+
+DEFINE_GUID( /* 66F0D379-B4F3-4074-AC430D3318B78CDB */
+    NFitSpaRangeByteAddressablePersistentMemory,
+    0x66F0D379,
+    0xB4F3,
+    0x4074,
+    0xAC, 0x43, 0x0D, 0x33, 0x18, 0xB7, 0x8C, 0xDB);
+
+DEFINE_GUID( /* 92F701F6-13B4-405D-910B299367E8234C */
+    NFitSpaRangeNvdimmControlRegion,
+    0x92F701F6,
+    0x13B4,
+    0x405D,
+    0x91, 0x0B, 0x29, 0x93, 0x67, 0xE8, 0x23, 0x4C);
+
+DEFINE_GUID( /* 91AF0530-5D86-470E-A6B00A2DB9408249 */
+    NFitSpaRangeNvdimmBlockDataWindow,
+    0x91AF0530,
+    0x5D86,
+    0x470E,
+    0xA6, 0xB0, 0x0A, 0x2D, 0xB9, 0x40, 0x82, 0x49);
+
+DEFINE_GUID( /* 77AB535A-45FC-624B-5560F7B281D1F96E */
+    NFitSpaRangeVolatileVirtualDisk,
+    0x77AB535A,
+    0x45FC,
+    0x624B,
+    0x55, 0x60, 0xF7, 0xB2, 0x81, 0xD1, 0xF9, 0x6E);
+
+DEFINE_GUID( /* 3D5ABD30-4175-87CE-6D64D2ADE523C4BB */
+    NFitSpaRangeVolatileVirtualCD,
+    0x3D5ABD30,
+    0x4175,
+    0x87CE,
+    0x6D, 0x64, 0xD2, 0xAD, 0xE5, 0x23, 0xC4, 0xBB);
+
+DEFINE_GUID( /* 5CEA02C9-4D07-69D3-269F4496FBE096F9 */
+    NFitSpaRangePersistentVirtualDisk,
+    0x5CEA02C9,
+    0x4D07,
+    0x69D3,
+    0x26, 0x9F, 0x44, 0x96, 0xFB, 0xE0, 0x96, 0xF9);
+
+DEFINE_GUID( /* 08018188-42CD-BB48-100F5387D53DED3D */
+    NFitSpaRangePersistentVirtualCD,
+    0x08018188,
+    0x42CD,
+    0xBB48,
+    0x10, 0x0F, 0x53, 0x87, 0xD5, 0x3D, 0xED, 0x3D);
+
+//
+// System Physical Address Range Flags
+//
+
+typedef enum _NFIT_SPA_RANGE_FLAG {
+    NfitSpaRangeFlagManagementOnlyControlRegion = 0x0001,
+    NfitSpaRangeFlagProximityDomainValid        = 0x0002,
+} NFIT_SPA_RANGE_FLAG, *PNFIT_SPA_RANGE_FLAG;
+
+#define NFIT_VALID_SPA_RANGE_FLAGS \
+    (NfitSpaRangeFlagManagementOnlyControlRegion | \
+     NfitSpaRangeFlagProximityDomainValid)
+//
+// System Physical Address Range Memory Mapping Attributes (defined in UEFI)
+//
+
+typedef enum _NFIT_SPA_RANGE_MEMORY_MAP_ATTRIBUTES {
+    NfitSpaRangeAttributeUC             = 0x00000001,
+    NfitSpaRangeAttributeWC             = 0x00000002,
+    NfitSpaRangeAttributeWT             = 0x00000004,
+    NfitSpaRangeAttributeWB             = 0x00000008,
+    NfitSpaRangeAttributeUCE            = 0x00000010,
+    NfitSpaRangeAttributeWP             = 0x00001000,
+    NfitSpaRangeAttributeRP             = 0x00002000,
+    NfitSpaRangeAttributeXP             = 0x00004000,
+    NfitSpaRangeAttributeNV             = 0x00008000,
+    NfitSpaRangeAttributeMoreReliable   = 0x00010000
+} NFIT_SPA_RANGE_MEMORY_MAP_ATTRIBUTES, *PNFIT_SPA_RANGE_MEMORY_MAP_ATTRIBUTES;
+
+#define NFIT_VALID_SPA_RANGE_MEMORY_MAP_ATTRIBUTES \
+    (NfitSpaRangeAttributeUC |          \
+     NfitSpaRangeAttributeWC |          \
+     NfitSpaRangeAttributeWT |          \
+     NfitSpaRangeAttributeWB |          \
+     NfitSpaRangeAttributeUCE |         \
+     NfitSpaRangeAttributeWP |          \
+     NfitSpaRangeAttributeRP |          \
+     NfitSpaRangeAttributeXP |          \
+     NfitSpaRangeAttributeNV |          \
+     NfitSpaRangeAttributeMoreReliable)
+
+//
+// NFIT System Physical Address Range Structure
+//
+
+typedef struct _NFIT_SYSTEM_PHYSICAL_ADDRESS_RANGE {
+    NFIT_STRUCT_HEADER Header;
+    USHORT SPARangeIndex;
+    USHORT Flags;
+    UCHAR Reserved[4];
+    ULONG ProximityDomain;
+    GUID AddressRangeType;
+    ULONG64 SPARangeBase;
+    ULONG64 SPARangeLength;
+    ULONG64 AddressRangeMappingAttribute;
+} NFIT_SYSTEM_PHYSICAL_ADDRESS_RANGE, *PNFIT_SYSTEM_PHYSICAL_ADDRESS_RANGE;
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+
+typedef struct _NFIT_DEVICE_HANDLE {
+    union {
+        struct {
+            ULONG    DIMMNumber:4;
+            ULONG    MemoryChannelNumber:4;
+            ULONG    MemoryControllerId:4;
+            ULONG    SocketId:4;
+            ULONG    NodeControllerId:12;
+            ULONG    Reserved:4;
+        } NfitHandle;
+
+        ULONG AsUlong;
+    } u;
+} NFIT_DEVICE_HANDLE, *PNFIT_DEVICE_HANDLE;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// Memory Device State Flags
+//
+
+typedef enum _NFIT_NVDIMM_STATE_FLAG {
+    NfitNvdimmStateFlagSaveFail             = 0x0001,
+    NfitNvdimmStateFlagRestoreFail          = 0x0002,
+    NfitNvdimmStateFlagPlatformFlushFail    = 0x0004,
+    NfitNvdimmStateFlagNotArm               = 0x0008,
+    NfitNvdimmStateFlagHealthEvent          = 0x0010,
+    NfitNvdimmStateFlagNotifyEnabled        = 0x0020,
+    NfitNvdimmStateNoSPAMapping             = 0x0040,
+} NFIT_NVDIMM_STATE_FLAG, *PNFIT_NVDIMM_STATE_FLAG;
+
+#define NFIT_VALID_NVDIMM_STATE_FLAGS \
+    (NfitNvdimmStateFlagSaveFail |          \
+     NfitNvdimmStateFlagRestoreFail |       \
+     NfitNvdimmStateFlagPlatformFlushFail | \
+     NfitNvdimmStateFlagNotArm |            \
+     NfitNvdimmStateFlagHealthEvent |       \
+     NfitNvdimmStateFlagNotifyEnabled |     \
+     NfitNvdimmStateNoSPAMapping)
+
+//
+// NFIT Memory Device to System Physical Address Range Mapping Structure
+//
+
+typedef struct _NFIT_NVDIMM_REGION_MAPPING {
+    NFIT_STRUCT_HEADER Header;
+    NFIT_DEVICE_HANDLE NfitHandle;
+    USHORT NVDIMMPhysicalId;
+    USHORT NVDIMMRegionId;
+    USHORT SpaRangeIndex;
+    USHORT NVDIMMControlRegionIndex;
+    ULONG64 NVDIMMRegionSize;
+    ULONG64 RegionOffset;
+    ULONG64 NVDIMMPhysicalAddrRegionBase;
+    USHORT InterleaveIndex;
+    USHORT InterleaveWays;
+    USHORT NVDIMMStateFlags;
+    UCHAR Reserved[2];
+} NFIT_NVDIMM_REGION_MAPPING, *PNFIT_NVDIMM_REGION_MAPPING;
+
+//
+// NFIT Interleave Structure
+//
+
+typedef struct _NFIT_INTERLEAVE {
+    NFIT_STRUCT_HEADER Header;
+    USHORT InterleaveIndex;
+    UCHAR Reserved[2];
+    ULONG LinesDescribed;
+    ULONG LineSize;
+    ULONG LineOffsets[ANYSIZE_ARRAY];
+} NFIT_INTERLEAVE, *PNFIT_INTERLEAVE;
+
+//
+// NFIT SMBIOS Management Information Structure
+//
+
+typedef struct _NFIT_SMBIOS_MANAGEMENT_INFO {
+    NFIT_STRUCT_HEADER Header;
+    UCHAR Reserved[4];
+    UCHAR Data[ANYSIZE_ARRAY];
+} NFIT_SMBIOS_MANAGEMENT_INFO, *PNFIT_SMBIOS_MANAGEMENT_INFO;
+
+//
+// NVDIMM Control Region Flags
+//
+
+typedef enum _NFIT_CONTROL_REGION_FLAG {
+    NfitControlRegionFlagBufferBlockDataWindow  = 0x0001
+} NFIT_CONTROL_REGION_FLAG, *PNFIT_CONTROL_REGION_FLAG;
+
+#define NFIT_VALID_CONTROL_REGION_FLAGS \
+    (NfitControlRegionFlagBufferBlockDataWindow)
+
+//
+// NFIT Control Region Structure. Definition based on ACPI 6.1 as
+// that will be the requirement.
+//
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+
+typedef struct _NFIT_NVDIMM_CONTROL_REGION {
+    NFIT_STRUCT_HEADER Header;
+    USHORT NvdimmControlRegionIndex;
+    USHORT VendorId;
+    USHORT DeviceId;
+    USHORT RevisionId;
+    USHORT SubsystemVendorId;
+    USHORT SubsystemDeviceId;
+    USHORT SubsystemRevisionId;
+    union {
+        UCHAR AsUchar;
+        struct {
+            UCHAR ManufacturingFields:1;
+            UCHAR Reserved:7;
+        } u;
+    } ValidFields;
+    UCHAR ManufacturingLocation;
+    UCHAR ManufacturingYear;
+    UCHAR ManufacturingWeek;
+    UCHAR Reserved[2];
+    ULONG SerialNumber;
+    USHORT RegionFormatInterfaceCode;
+    USHORT BCWCount;
+    ULONG64 BCWSize;
+    ULONG64 BCWCommandRegisterOffset;
+    ULONG64 BCWCommandRegisterSize;
+    ULONG64 BCWStatusRegisterOffset;
+    ULONG64 BCWStatusRegisterSize;
+    USHORT NvdimmControlRegionFlag;
+    UCHAR Reserved1[6];
+} NFIT_NVDIMM_CONTROL_REGION, *PNFIT_NVDIMM_CONTROL_REGION;
+
+#define NVDIMM_CONTROL_REGION_BASE_SIZE        (FIELD_OFFSET(NFIT_NVDIMM_CONTROL_REGION, BCWSize))
+#define NVDIMM_CONTROL_REGION_EXTENDED_SIZE    (sizeof(NFIT_NVDIMM_CONTROL_REGION))
+
+//
+// NFIT Block Data Window Region Structure
+//
+
+typedef struct _NFIT_BLOCK_DATA_WINDOW_REGION {
+    NFIT_STRUCT_HEADER Header;
+    USHORT NvdimmControlRegionIndex;
+    USHORT BlockDataWindowCount;
+    ULONG64 BlockDataWindowOffset;
+    ULONG64 BlockDataWindowSize;
+    ULONG64 BlockAccessibleCapacity;
+    ULONG64 FirstAccessibleBlockAddress;
+} NFIT_BLOCK_DATA_WINDOW_REGION, *PNFIT_BLOCK_DATA_WINDOW_REGION;
+
+//
+// NFIT Flush Hint Address Structure
+//
+
+typedef struct _NFIT_FLUSH_HINT_ADDRESS {
+    NFIT_STRUCT_HEADER Header;
+    NFIT_DEVICE_HANDLE NfitHandle;
+    USHORT FlushHintAddressCount;
+    UCHAR Reserved[6];
+    ULONG64 FlushHintAddress[ANYSIZE_ARRAY];
+} NFIT_FLUSH_HINT_ADDRESS, *PNFIT_FLUSH_HINT_ADDRESS;
+
+//
+// NFIT Platform Capabilities Structure
+// Originally defined in ACPI 6.2 Errata A.
+//
+typedef struct _NFIT_PLATFORM_CAPABILITIES {
+    NFIT_STRUCT_HEADER Header;
+    UCHAR HighestValidCapability;
+    UCHAR Reserved[3];
+    union {
+        ULONG AsUlong;
+        struct {
+            ULONG CpuCacheFlushOnPowerLoss : 1;
+            ULONG MemCtrlrFlushOnPowerLoss : 1;
+            ULONG PmemHardwareMirroring : 1;
+        } u;
+    } Capabilities;
+    UCHAR Reserved1[4];
+} NFIT_PLATFORM_CAPABILITIES, *PNFIT_PLATFORM_CAPABILITIES;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// WSMT ACPI Table definition
+//
+
+#define WSMT_SIGNATURE 0x544D5357 // "WSMT"
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+
+typedef union _WSMT_PROTECTION_FLAGS {
+
+    ULONG AsUlong;
+
+    struct {
+        ULONG FixedCommBuffers:1;
+        ULONG CommBufferNestedPtrProtection:1;
+        ULONG SystemResourceProtection:1;
+        ULONG Reserved:29;
+    } DUMMYSTRUCTNAME;
+
+} WSMT_PROTECTION_FLAGS, *PWSMT_PROTECTION_FLAGS;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+typedef struct _WSMT {
+    DESCRIPTION_HEADER Header;
+    WSMT_PROTECTION_FLAGS ProtectionFlags;
+} WSMT, *PWSMT;
+
+//
+// LPIT ACPI Table definition
+//
+
+#define LPIT_SIGNATURE 0x5449504C // "LPIT"
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+
+typedef union _LPI_STATE_FLAGS {
+    struct {
+        ULONG Disabled:1;
+        ULONG CounterUnavailable:1;
+        ULONG Reserved:30;
+    };
+    ULONG AsUlong;
+} LPI_STATE_FLAGS, *PLPI_STATE_FLAGS;
+
+typedef struct _LPI_STATE_DESCRIPTOR {
+    ULONG Type;
+    ULONG Length;
+    USHORT UniqueId;
+    UCHAR Reserved[2];
+    LPI_STATE_FLAGS Flags;
+    GEN_ADDR EntryTrigger;
+    ULONG Residency;
+    ULONG Latency;
+    GEN_ADDR ResidencyCounter;
+    ULONGLONG ResidencyCounterFrequency;
+} LPI_STATE_DESCRIPTOR, *PLPI_STATE_DESCRIPTOR;
+
+typedef struct _LPIT {
+    DESCRIPTION_HEADER Header;
+    LPI_STATE_DESCRIPTOR LpiStates[ANYSIZE_ARRAY];
+} LPIT, *PLPIT;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// PPTT (Processor Properties Topology Table) definition
+//
+
+#define PPTT_SIGNATURE 0x54545050 // "PPTT"
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+
+typedef union _PROC_TOPOLOGY_NODE_FLAGS {
+    struct {
+        ULONG PhysicalPackage:1;
+        ULONG ACPIProcessorIdValid:1;
+        ULONG Reserved:30;
+    };
+
+    ULONG AsULONG;
+} PROC_TOPOLOGY_NODE_FLAGS, *PPROC_TOPOLOGY_NODE_FLAGS;
+
+typedef union _PROC_TOPOLOGY_CACHE_FLAGS {
+    struct {
+        ULONG SizeValid:1;
+        ULONG SetsValid:1;
+        ULONG AssociativityValid:1;
+        ULONG AllocationTypeValid:1;
+        ULONG CacheTypeValid:1;
+        ULONG WritePolicyValid:1;
+        ULONG LineSizeValid:1;
+        ULONG Reserved:25;
+    };
+
+    ULONG AsULONG;
+} PROC_TOPOLOGY_CACHE_FLAGS, *PPROC_TOPOLOGY_CACHE_FLAGS;
+
+#define PROC_TOPOLOGY_NODE_CACHE_TYPE_DATA(CacheType) \
+    (CacheType == 0)
+
+#define PROC_TOPOLOGY_NODE_CACHE_TYPE_INSTRUCTION(CacheType) \
+    (CacheType == 1)
+
+#define PROC_TOPOLOGY_NODE_CACHE_TYPE_UNIFIED(CacheType) \
+    ((CacheType == 2) || (CacheType == 3))
+
+typedef union _PROC_TOPOLOGY_CACHE_ATTRIBUTES {
+    struct {
+        UCHAR ReadAllocate:1;
+        UCHAR WriteAllocate:1;
+        UCHAR CacheType:2;
+        UCHAR WritePolicy:1;
+        UCHAR Reserved:3;
+    };
+
+    UCHAR AsUCHAR;
+} PROC_TOPOLOGY_CACHE_ATTRIBUTES, *PPROC_TOPOLOGY_CACHE_ATTRIBUTES;
+
+typedef struct _PROC_TOPOLOGY_NODE PROC_TOPOLOGY_NODE,
+    *PPROC_TOPOLOGY_NODE;
+
+#define PROC_TOPOLOGY_NODE_HEIRARCHY 0
+#define PROC_TOPOLOGY_NODE_CACHE 1
+#define PROC_TOPOLOGY_NODE_ID 2
+
+struct _PROC_TOPOLOGY_NODE {
+    struct {
+        UCHAR Type;
+        UCHAR Length;
+        UCHAR Reserved[2];
+    };
+    
+    union {
+        struct {
+            PROC_TOPOLOGY_NODE_FLAGS Flags;
+            ULONG Parent;
+            ULONG ACPIProcessorId;
+            ULONG NumberPrivateResources;
+            ULONG PrivateResources[ANYSIZE_ARRAY];
+        } HeirarchyNode;
+
+        struct {
+            PROC_TOPOLOGY_CACHE_FLAGS Flags;
+            ULONG NextLevelCacheOffset;
+            ULONG Size;
+            ULONG Sets;
+            UCHAR Associativity;
+            PROC_TOPOLOGY_CACHE_ATTRIBUTES Attributes;
+            USHORT LineSize;
+        } CacheNode;
+
+        struct {
+            ULONG Vendor;
+            ULONG64 Level1;
+            ULONG64 Level2;
+            USHORT Major;
+            USHORT Minor;
+            USHORT Spin;
+        } IdNode;
+    };
+};
+
+typedef struct _PPTT {
+    DESCRIPTION_HEADER Header;
+    PROC_TOPOLOGY_NODE HeirarchyNodes[ANYSIZE_ARRAY];
+} PPTT, *PPPTT;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// PDTT structure.
+//
+
+#define PDTT_SIGNATURE 0x54544450 // "PDTT"
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214)
+
+typedef struct _PDTT_PCC_SUBCHANNEL_INDENTIFIER {
+    UCHAR SubChannelId;
+    UCHAR Runtime:1;
+    UCHAR WaitCompletion:1;
+    UCHAR Reserved:6;
+} PDTT_PCC_SUBCHANNEL_INDENTIFIER, *PPDTT_PCC_SUBCHANNEL_INDENTIFIER;
+
+typedef struct _ACPI_PDTT {
+    DESCRIPTION_HEADER Header;
+    UCHAR TriggerCount;
+    UCHAR Reserved[3];
+    ULONG TriggerOffset;
+    // PDTT pcc sub channel indetifiers
+} ACPI_PDTT, *PACPI_PDTT;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// Heterogeneous Memory Attribute Table (HMAT) definition. The following
+// abbreviations are used for the various table entry types:
+//
+//     MSAR - Memory Subsystem Address Range
+//
+//     SLLBI - System Locality Latency and Bandwidth Information
+//
+//     MSCI - Memory Side Cache Information
+//
+// The identifiers use these abbreviations or they would have become prohibitively long.
+//
+
+#if _MSC_VER >= 1200
+#pragma warning(push)
+#endif
+
+#pragma warning(disable: 4214) // nonstandard extension used : bit field types other than int
+#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union
+
+#define HMAT_SIGNATURE  0x54414D48 // "HMAT"
+
+#define HMAT_ENTRY_TYPE_MSAR    0
+#define HMAT_ENTRY_TYPE_SLLBI   1
+#define HMAT_ENTRY_TYPE_MSCI    2
+
+#define HMAT_SLLBI_DATA_TYPE_ACCESS_LATENCY     0
+#define HMAT_SLLBI_DATA_TYPE_READ_LATENCY       1
+#define HMAT_SLLBI_DATA_TYPE_WRITE_LATENCY      2
+#define HMAT_SLLBI_DATA_TYPE_ACCESS_BANDWIDTH   3
+#define HMAT_SLLBI_DATA_TYPE_READ_BANDWIDTH     4
+#define HMAT_SLLBI_DATA_TYPE_WRITE_BANDWIDTH    5
+
+#define HMAT_MSCI_CACHEATTRIBUTES_LEVELS_NONE                   0
+#define HMAT_MSCI_CACHEATTRIBUTES_LEVELS_ONE                    1
+#define HMAT_MSCI_CACHEATTRIBUTES_LEVELS_TWO                    2
+#define HMAT_MSCI_CACHEATTRIBUTES_LEVELS_THREE                  3
+
+#define HMAT_MSCI_CACHEATTRIBUTES_ASSOCIATIVITY_NONE            0
+#define HMAT_MSCI_CACHEATTRIBUTES_ASSOCIATIVITY_DIRECT_MAPPED   1
+#define HMAT_MSCI_CACHEATTRIBUTES_ASSOCIATIVITY_COMPLEX         2
+
+#define HMAT_MSCI_CACHEATTRIBUTES_WRITE_POLICY_NONE             0
+#define HMAT_MSCI_CACHEATTRIBUTES_WRITE_POLICY_WRITE_BACK       1
+#define HMAT_MSCI_CACHEATTRIBUTES_WRITE_POLICY_WRITE_THROUGH    2
+
+typedef struct _HMAT_ENTRY {
+    USHORT Type;
+    USHORT Reserved;
+    ULONG Length;
+
+    union {
+
+        //
+        // Memory Subsystem Address Range structure
+        //
+
+        struct {
+            union {
+                struct {
+                    USHORT ProcessorProximityDomainValid : 1;
+                    USHORT MemoryProximityDomainValid : 1;
+                    USHORT ReservationHint : 1;
+                    USHORT Reserved : 13;
+                } DUMMYSTRUCTNAME;
+
+                USHORT AsUSHort;
+            } Flags;
+
+            USHORT Reserved1;
+            ULONG ProcessorProximityDomain;
+            ULONG MemoryProximityDomain;
+            ULONG Reserved2;
+            PHYSICAL_ADDRESS SystemPhysicalAddressRangeBase;
+            ULONGLONG SystemPhysicalAddressRangeLength;
+        } Msar;
+
+        //
+        // System Locality Latency and Bandwidth Information structure
+        //
+
+        struct {
+            union {
+                struct {
+                    UCHAR Memory : 1;
+                    UCHAR LastLevelMemory : 1;
+                    UCHAR FirstLevelMemorySideCache : 1;
+                    UCHAR SecondLevelMemorySideCache : 1;
+                    UCHAR ThirdLevelMemorySideCache : 1;
+                    UCHAR Reserved : 3;
+                } DUMMYSTRUCTNAME;
+
+                UCHAR AsUChar;
+            } Flags;
+
+            UCHAR DataType;
+            USHORT Reserved1;
+            ULONG NumberOfInitiatorProximityDomains;
+            ULONG NumberOfTargetProximityDomains;
+            ULONG Reserved2;
+            ULONGLONG EntryBaseUnit;
+            // ULONG InitiatorProximityDomainList[NumberOfInitiatorProximityDomains]
+            // ULONG TargetProximityDomainList[NumberOfTargetProximityDomains]
+            // USHORT Entry[NumberOfInitiatorProximityDomains][NumberOfTargetProximityDomains]
+        } Sllbi;
+
+        //
+        // Memory Side Cache Information structure
+        //
+
+        struct {
+            ULONG MemoryProximityDomain;
+            ULONG Reserved1;
+            ULONGLONG MemorySideCacheSize;
+
+            union {
+                struct {
+                    ULONG TotalCacheLevels : 4;
+                    ULONG CacheLevel : 4;
+                    ULONG CacheAssociativity : 4;
+                    ULONG WritePolicy : 4;
+                    ULONG CacheLineSize : 16;
+                } DUMMYSTRUCTNAME;
+
+                ULONG AsULong;
+            } CacheAttributes;
+
+            USHORT Reserved2;
+            USHORT NumberOfSmBiosHandles;
+            // USHORT SmBiosHandles[NumberOfSmBiosHandles];
+        } Msci;
+    } DUMMYUNIONNAME;
+} HMAT_ENTRY, *PHMAT_ENTRY;
+
+#define HMAT_ENTRY_HEADER_LENGTH RTL_SIZEOF_THROUGH_FIELD(HMAT_ENTRY, Length);
+#define HMAT_ENTRY_LENGTH(_Type) RTL_SIZEOF_THROUGH_FIELD(HMAT_ENTRY, _Type);
+
+typedef struct _HMAT_TABLE {
+    DESCRIPTION_HEADER Header;
+    ULONG Reserved;
+    // HMAT_ENTRY Entries[];
+} HMAT_TABLE, *PHMAT_TABLE;
+
+#if _MSC_VER >= 1200
+#pragma warning(pop)
+#endif
+
+//
+// Resume normal structure packing
+//
+
+#include <poppack.h>
+
+#endif // _ACPITBL_H
\ No newline at end of file
diff --git a/mobile_back_qti/cpp/backend_qti/allocator.cc b/mobile_back_qti/cpp/backend_qti/allocator.cc
index 03cf7b6..7f763b9 100644
--- a/mobile_back_qti/cpp/backend_qti/allocator.cc
+++ b/mobile_back_qti/cpp/backend_qti/allocator.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -34,8 +34,9 @@ void* ChunkAllocator::GetBuffer(size_t n, size_t chunks_per_block) {
 
 void ChunkAllocator::ReleaseBuffer(void* p) {
   Block* block = Block::block_map_[p];
+  int chunkSize = block->GetChunkSize();
   getAllocator().at(block->GetChunkSize()).ReleaseChunk(block, p);
-  if (getAllocator().at(block->GetChunkSize()).IsChunkEmpty()) {
+  if (getAllocator().at(chunkSize).IsChunkEmpty()) {
     getAllocator().clear();
   }
 }
diff --git a/mobile_back_qti/cpp/backend_qti/allocator.h b/mobile_back_qti/cpp/backend_qti/allocator.h
index 5fe8f77..1b4f91a 100644
--- a/mobile_back_qti/cpp/backend_qti/allocator.h
+++ b/mobile_back_qti/cpp/backend_qti/allocator.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -81,7 +81,7 @@ class ChunkAllocator {
     }
 
     ~Block() {
-      if (ptr_ != nullptr) std::free(ptr_);
+      if (ptr_ != nullptr) getRpcMem().Free(ptr_);
     }
 
     // Map allocated pointers to their block
diff --git a/mobile_back_qti/cpp/backend_qti/cpuctrl.cc b/mobile_back_qti/cpp/backend_qti/cpuctrl.cc
index a75c63a..a12cee0 100644
--- a/mobile_back_qti/cpp/backend_qti/cpuctrl.cc
+++ b/mobile_back_qti/cpp/backend_qti/cpuctrl.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -14,10 +14,11 @@ limitations under the License.
 ==============================================================================*/
 
 #include "cpuctrl.h"
-
+#ifdef __ANDROID__
 #include <sched.h>
-#include <sys/types.h>
 #include <unistd.h>
+#endif
+#include <sys/types.h>
 
 #include <chrono>
 #include <fstream>
@@ -29,16 +30,29 @@ limitations under the License.
 
 using namespace std::chrono;
 
+#ifdef __ANDROID__
 #define SET_AFFINITY(a, b) sched_setaffinity(gettid(), a, b)
 #define GET_AFFINITY(a, b) sched_getaffinity(gettid(), a, b)
+#else
+#define SET_AFFINITY(a, b) {}
+#define GET_AFFINITY(a, b) {}
+#define CPU_ZERO(a) {}
+#define CPU_SET(a,b) {}
+#endif
+
+static uint32_t soc_id_ = 0;
 
 static bool active_ = false;
 static uint32_t loadOffTime_ = 2;
 static uint32_t loadOnTime_ = 100;
 static std::thread *thread_ = nullptr;
+#ifdef __ANDROID__
 static cpu_set_t cpusetLow_;
 static cpu_set_t cpusetHigh_;
 static cpu_set_t cpusetall_;
+#else
+static std::vector<int> temp;
+#endif
 
 static void loop(void *unused) {
   (void)unused;
@@ -47,11 +61,18 @@ static void loop(void *unused) {
     auto now =
         duration_cast<milliseconds>(system_clock::now().time_since_epoch());
     if (now.count() % loadOnTime_ == 0 && active_) {
-      usleep(loadOffTime_ * 1000);
+      std::this_thread::sleep_for(std::chrono::microseconds(loadOffTime_ * 1000));
+#ifndef __ANDROID__
+      temp.clear();
+#endif
     } else {
       for (int i = 0; i < loadOnTime_; i++) {
         // Prevent compiler from optimizing away busy loop
+#ifdef __ANDROID__
         __asm__ __volatile__("" : "+g"(i) : :);
+#else
+        temp.emplace_back(rand());
+#endif
       }
     }
   }
@@ -104,4 +125,4 @@ void CpuCtrl::init() {
   for (auto core : allcores) {
     CPU_SET(core, &cpusetall_);
   }
-}
\ No newline at end of file
+}
diff --git a/mobile_back_qti/cpp/backend_qti/cpuctrl.h b/mobile_back_qti/cpp/backend_qti/cpuctrl.h
index 8ffce9c..8d6a954 100644
--- a/mobile_back_qti/cpp/backend_qti/cpuctrl.h
+++ b/mobile_back_qti/cpp/backend_qti/cpuctrl.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -14,8 +14,10 @@ limitations under the License.
 ==============================================================================*/
 #pragma once
 
+#ifdef __ANDROID__
 #include <EGL/egl.h>
 #include <GLES/gl.h>
+#endif
 #include <stdint.h>
 
 class CpuCtrl {
diff --git a/mobile_back_qti/cpp/backend_qti/mlperf_helper.h b/mobile_back_qti/cpp/backend_qti/mlperf_helper.h
index c02cb79..f1d12b7 100644
--- a/mobile_back_qti/cpp/backend_qti/mlperf_helper.h
+++ b/mobile_back_qti/cpp/backend_qti/mlperf_helper.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2021-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ static void process_config(const mlperf_backend_configuration_t *configs,
   backend_data->isTflite_ = false;
   backend_data->batchSize_ = 1;
   backend_data->useSnpe_ = false;
-  backend_data->perfProfile_ = zdl::DlSystem::PerformanceProfile_t::BURST;
+  backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_BURST;
   backend_data->loadOffTime_ = 2;
   backend_data->loadOnTime_ = 100;
   backend_data->useIonBuffers_ = true;
@@ -75,6 +75,9 @@ static void process_config(const mlperf_backend_configuration_t *configs,
       if (std::strcmp(configs->values[i], "float_32") == 0) {
         backend_data->outputBufferType_ =
             QTIBackendHelper::QTIBufferType::FLOAT_32;
+      } else if (std::strcmp(configs->values[i], "int_32") == 0) {
+        backend_data->outputBufferType_ =
+            QTIBackendHelper::QTIBufferType::INT_32;
       } else {
         backend_data->outputBufferType_ =
             QTIBackendHelper::QTIBufferType::UINT_8;
@@ -89,35 +92,28 @@ static void process_config(const mlperf_backend_configuration_t *configs,
       perfProfile = configs->values[i];
       if ((std::strcmp(configs->values[i], "default") == 0) ||
           (std::strcmp(configs->values[i], "balanced") == 0)) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::BALANCED;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_BALANCED;
       } else if (std::strcmp(configs->values[i], "high_performance") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::HIGH_PERFORMANCE;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_HIGH_PERFORMANCE;
       } else if (std::strcmp(configs->values[i], "power_saver") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::POWER_SAVER;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_POWER_SAVER;
       } else if (std::strcmp(configs->values[i], "system_settings") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::SYSTEM_SETTINGS;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_SYSTEM_SETTINGS;
       } else if (std::strcmp(configs->values[i],
                              "sustained_high_performance") == 0) {
         backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::SUSTAINED_HIGH_PERFORMANCE;
+            SNPE_PERFORMANCE_PROFILE_SUSTAINED_HIGH_PERFORMANCE;
       } else if (std::strcmp(configs->values[i], "burst") == 0) {
-        backend_data->perfProfile_ = zdl::DlSystem::PerformanceProfile_t::BURST;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_BURST;
       } else if (std::strcmp(configs->values[i], "low_power_saver") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::LOW_POWER_SAVER;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_LOW_POWER_SAVER;
       } else if (std::strcmp(configs->values[i], "high_power_saver") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::HIGH_POWER_SAVER;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_HIGH_POWER_SAVER;
       } else if (std::strcmp(configs->values[i], "low_balanced") == 0) {
-        backend_data->perfProfile_ =
-            zdl::DlSystem::PerformanceProfile_t::LOW_BALANCED;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_LOW_BALANCED;
       } else {
         LOG(INFO) << "Unrecognized performance profile: " << perfProfile;
-        backend_data->perfProfile_ = zdl::DlSystem::PerformanceProfile_t::BURST;
+        backend_data->perfProfile_ = SNPE_PERFORMANCE_PROFILE_BURST;
         perfProfile = "burst";
       }
     }
diff --git a/mobile_back_qti/cpp/backend_qti/qti_backend_helper.cc b/mobile_back_qti/cpp/backend_qti/qti_backend_helper.cc
index 8d7c3f8..933e47b 100644
--- a/mobile_back_qti/cpp/backend_qti/qti_backend_helper.cc
+++ b/mobile_back_qti/cpp/backend_qti/qti_backend_helper.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2021-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -18,21 +18,21 @@ limitations under the License.
 #include <string>
 #include <vector>
 
-#include "DiagLog/IDiagLog.hpp"
-#include "DlContainer/IDlContainer.hpp"
-#include "DlSystem/DlEnums.hpp"
-#include "DlSystem/DlError.hpp"
-#include "DlSystem/IBufferAttributes.hpp"
-#include "DlSystem/IUserBuffer.hpp"
+#include "DiagLog/IDiagLog.h"
+#include "DlContainer/DlContainer.h"
+#include "DlSystem/DlEnums.h"
+#include "DlSystem/DlError.h"
+#include "DlSystem/IBufferAttributes.h"
+#include "DlSystem/IUserBuffer.h"
 #include "DlSystem/PlatformConfig.hpp"
-#include "DlSystem/StringList.hpp"
-#include "DlSystem/TensorMap.hpp"
-#include "DlSystem/TensorShape.hpp"
-#include "DlSystem/TensorShapeMap.hpp"
-#include "DlSystem/UserBufferMap.hpp"
-#include "SNPE/SNPEBuilder.hpp"
-#include "SNPE/SNPEFactory.hpp"
-#include "SNPE/UserBufferList.hpp"
+#include "DlSystem/StringList.h"
+#include "DlSystem/TensorMap.h"
+#include "DlSystem/TensorShape.h"
+#include "DlSystem/TensorShapeMap.h"
+#include "DlSystem/UserBufferMap.h"
+#include "SNPE/SNPEBuilder.h"
+#include "SNPE/SNPEUtil.h"
+#include "SNPE/UserBufferList.h"
 #include "absl/strings/ascii.h"
 #include "cpuctrl.h"
 #include "soc_utility.h"
@@ -43,8 +43,7 @@ int isSignedStatus = DEFAULT;
 
 enum snpe_runtimes_t { SNPE_DSP = 0, SNPE_AIP = 1, SNPE_GPU = 2, SNPE_CPU = 3 };
 
-static long calcSizeFromDims(const size_t rank,
-                             const zdl::DlSystem::Dimension *dims) {
+static size_t calcSizeFromDims(const size_t rank, const size_t *dims) {
   if (rank == 0) return 0;
   size_t size = 1;
   for (size_t i = rank; i > 0; i--) {
@@ -54,7 +53,7 @@ static long calcSizeFromDims(const size_t rank,
       size *= 10;
     dims++;
   }
-  return (long)size;
+  return size;
 }
 
 // Helper for splitting tokenized strings
@@ -72,49 +71,52 @@ static void split(std::vector<std::string> &split_string,
   }
 }
 
-static zdl::DlSystem::StringList ResolveOutputLayerNames(std::string &line) {
-  zdl::DlSystem::StringList outputLayers;
+static Snpe_StringList_Handle_t ResolveOutputLayerNames(std::string &line) {
+  Snpe_StringList_Handle_t outputLayersHandle = Snpe_StringList_Create();
   if (!line.empty()) {
     std::vector<std::string> names;
     split(names, line.substr(0), ',');
-    for (auto &name : names) outputLayers.append(name.c_str());
+    for (auto &name : names)
+      Snpe_StringList_Append(outputLayersHandle, name.c_str());
   }
-  return outputLayers;
+  return outputLayersHandle;
 }
 
-static std::vector<size_t> calcStrides(zdl::DlSystem::TensorShape dims,
-                                       size_t elementSize) {
-  std::vector<size_t> strides(dims.rank());
+static Snpe_TensorShape_Handle_t calcStrides(Snpe_TensorShape_Handle_t dimsHandle,
+                                      size_t elementSize) {
+  std::vector<size_t> strides(Snpe_TensorShape_Rank(dimsHandle));
   strides[strides.size() - 1] = elementSize;
   size_t stride = strides[strides.size() - 1];
-  for (size_t i = dims.rank() - 1; i > 0; i--) {
-    if (dims[i] != 0)
-      stride *= dims[i];
+  for (size_t i = Snpe_TensorShape_Rank(dimsHandle) - 1; i > 0; i--) {
+    if (Snpe_TensorShape_At(dimsHandle, i) != 0)
+      stride *= Snpe_TensorShape_At(dimsHandle, i);
     else
       stride *= 10;
     strides[i - 1] = stride;
   }
-  return strides;
+  Snpe_TensorShape_Handle_t tensorShapeHandle = Snpe_TensorShape_CreateDimsSize(
+      strides.data(), Snpe_TensorShape_Rank(dimsHandle));
+  return tensorShapeHandle;
 }
 
-static zdl::DlSystem::Runtime_t Str2Delegate(const snpe_runtimes_t delegate) {
-  zdl::DlSystem::Runtime_t runtime;
+static Snpe_Runtime_t Str2Delegate(const snpe_runtimes_t delegate) {
+  Snpe_Runtime_t runtime;
   bool isDSP = false;
 
   switch (delegate) {
     case SNPE_DSP:
-      runtime = zdl::DlSystem::Runtime_t::DSP;
+      runtime = SNPE_RUNTIME_DSP;
       isDSP = true;
       break;
     case SNPE_AIP:
-      runtime = zdl::DlSystem::Runtime_t::AIP_FIXED_TF;
+      runtime = SNPE_RUNTIME_AIP_FIXED_TF;
       isDSP = true;
       break;
     case SNPE_GPU:
-      runtime = zdl::DlSystem::Runtime_t::GPU;
+      runtime = SNPE_RUNTIME_GPU;
       break;
     case SNPE_CPU:
-      runtime = zdl::DlSystem::Runtime_t::CPU;
+      runtime = SNPE_RUNTIME_CPU;
       break;
     default:
       LOG(ERROR) << "runtime not supported";
@@ -123,14 +125,14 @@ static zdl::DlSystem::Runtime_t Str2Delegate(const snpe_runtimes_t delegate) {
 
   if (isDSP) {
     if (isSignedStatus == DEFAULT) {
-      if (zdl::SNPE::SNPEFactory::isRuntimeAvailable(
-              runtime, zdl::DlSystem::RuntimeCheckOption_t::UNSIGNEDPD_CHECK)) {
+      if (Snpe_Util_IsRuntimeAvailableCheckOption(
+              runtime, SNPE_RUNTIME_CHECK_OPTION_UNSIGNEDPD_CHECK)) {
         isSignedStatus = UNSIGNED_PD;
         LOG(INFO) << "runtime " << delegate
                   << " is available on this platform with UnsignedPD";
       } else {
-        if (zdl::SNPE::SNPEFactory::isRuntimeAvailable(
-                runtime, zdl::DlSystem::RuntimeCheckOption_t::NORMAL_CHECK)) {
+        if (Snpe_Util_IsRuntimeAvailableCheckOption(
+                runtime, SNPE_RUNTIME_CHECK_OPTION_NORMAL_CHECK)) {
           isSignedStatus = SIGNED_PD;
           LOG(INFO) << "runtime " << delegate
                     << " is available on this platform with SignedPD";
@@ -144,7 +146,7 @@ static zdl::DlSystem::Runtime_t Str2Delegate(const snpe_runtimes_t delegate) {
 
     return runtime;
   } else {
-    if (!zdl::SNPE::SNPEFactory::isRuntimeAvailable(runtime)) {
+    if (!Snpe_Util_IsRuntimeAvailable(runtime)) {
       LOG(FATAL) << "runtime " << delegate
                  << " is not available on this platform";
     } else {
@@ -156,12 +158,11 @@ static zdl::DlSystem::Runtime_t Str2Delegate(const snpe_runtimes_t delegate) {
 
 void QTIBackendHelper::use_psnpe(const char *model_path) {
   uint32_t numInits = get_num_inits();
-  LOG(INFO) << "numInits: " << numInits;
+  LOG(INFO) << "Using PSNPE. numInits: " << numInits;
 
 // Enable debug logs
 #ifdef DEBUG_FLAG
-  if (zdl::SNPE::SNPEFactory::initializeLogging(
-          zdl::DlSystem::LogLevel_t::LOG_VERBOSE)) {
+  if (Snpe_Util_InitializeLogging(SNPE_LOG_LEVEL_VERBOSE)) {
     LOG(INFO) << "Debug logs successful";
   } else {
     LOG(INFO) << "Debug logs can not be intialized";
@@ -173,34 +174,40 @@ void QTIBackendHelper::use_psnpe(const char *model_path) {
   // So build the DLC twice to use the init cache generated in the first run
   for (int i = 0; i < numInits; i++) {
     // Open the DL container that contains the network to execute.
-    std::unique_ptr<zdl::DlContainer::IDlContainer> container;
+    Snpe_DlContainer_Handle_t containerHandle =
+        Snpe_DlContainer_Open(model_path);
     // destroys previous snpe instance and creates a new one.
-    psnpe_.reset(new zdl::PSNPE::PSNPE());
+    psnpe_.reset(new psnpe_handler());
     // Loads the container after destroying the previous instance
-    container = zdl::DlContainer::IDlContainer::open(model_path);
-    if (!container) {
+    if (!containerHandle) {
       LOG(FATAL) << "Container is not available " << model_path;
     }
 
-    zdl::PSNPE::BuildConfig buildConfig;
-    buildConfig.container = container.get();
-    buildConfig.runtimeConfigList = runtimeConfigsList;
-    buildConfig.inputOutputTransmissionMode =
-        zdl::PSNPE::InputOutputTransmissionMode::sync;
+    Snpe_BuildConfig_Handle_t buildConfigHandle = Snpe_BuildConfig_Create();
+    Snpe_BuildConfig_SetContainer(buildConfigHandle, containerHandle);
+    Snpe_BuildConfig_SetRuntimeConfigList(buildConfigHandle,
+                                          runtimeConfigsListHandle);
+    Snpe_BuildConfig_SetInputOutputTransmissionMode(
+        buildConfigHandle,
+        static_cast<Snpe_PSNPE_InputOutputTransmissionMode_t>(
+            SNPE_PSNPE_INPUTOUTPUTTRANSMISSIONMODE_SYNC));
 
-    zdl::DlSystem::StringList outputLayers =
+    Snpe_StringList_Handle_t outputLayers =
         ResolveOutputLayerNames(snpeOutputLayers_);
 
-    zdl::SNPE::SNPEBuilder snpeBuilder(container.get());
-    dummyInputRuntimeList.add(zdl::DlSystem::Runtime_t::CPU);
-    snpeBuilder.setPerformanceProfile(perfProfile_)
-        .setExecutionPriorityHint(zdl::DlSystem::ExecutionPriorityHint_t::HIGH)
-        .setRuntimeProcessorOrder(dummyInputRuntimeList)
-        .setOutputLayers(outputLayers);
+    Snpe_SNPEBuilder_Handle_t snpeBuilderHandle =
+        Snpe_SNPEBuilder_Create(containerHandle);
+    dummyInputRuntimeListHandle = Snpe_RuntimeList_Create();
+    Snpe_RuntimeList_Add(dummyInputRuntimeListHandle, SNPE_RUNTIME_CPU);
+    Snpe_SNPEBuilder_SetPerformanceProfile(snpeBuilderHandle, perfProfile_);
+    Snpe_SNPEBuilder_SetExecutionPriorityHint(snpeBuilderHandle,
+                                              SNPE_EXECUTION_PRIORITY_HIGH);
+    Snpe_SNPEBuilder_SetRuntimeProcessorOrder(snpeBuilderHandle,
+                                              dummyInputRuntimeListHandle);
+    Snpe_SNPEBuilder_SetOutputLayers(snpeBuilderHandle, outputLayers);
 
-    if (outputLayers.size() > 0) {
-      buildConfig.outputBufferNames = outputLayers;
-    }
+    if (Snpe_StringList_Size(outputLayers) > 0)
+      Snpe_BuildConfig_SetOutputBufferNames(buildConfigHandle, outputLayers);
 
     std::string platformOptionStr = "";
     if (Socs::get_use_dsp_features() && isSignedStatus == UNSIGNED_PD) {
@@ -209,41 +216,68 @@ void QTIBackendHelper::use_psnpe(const char *model_path) {
     }
 
     if (Socs::soc_check_feature(useIonBuffers_, platformOptionStr)) {
-      buildConfig.enableInitCache = true;
+      Snpe_BuildConfig_SetEnableInitCache(buildConfigHandle, true);
     }
-    buildConfig.platformOptions = platformOptionStr;
-
-    zdl::DlSystem::PlatformConfig platformConfig;
-    bool setSuccess = platformConfig.setPlatformOptions(platformOptionStr);
-    bool isValid = platformConfig.isOptionsValid();
+    Snpe_BuildConfig_SetPlatformOptions(buildConfigHandle,
+                                        platformOptionStr.c_str());
+
+    Snpe_PlatformConfig_Handle_t platformConfigHandle =
+        Snpe_PlatformConfig_Create();
+    bool setSuccess = Snpe_PlatformConfig_SetPlatformOptions(
+        platformConfigHandle, platformOptionStr.c_str());
+    bool isValid = Snpe_PlatformConfig_IsOptionsValid(platformConfigHandle);
     if (!isValid) {
       LOG(INFO) << "platformconfig option is invalid";
     }
-    snpeBuilder.setPlatformConfig(platformConfig);
-    snpe_ = snpeBuilder.build();
-
-    psnpe_buildStatus = psnpe_->build(buildConfig);
+    Snpe_SNPEBuilder_SetPlatformConfig(snpeBuilderHandle, platformConfigHandle);
+    snpe_->snpeHandle = Snpe_SNPEBuilder_Build(snpeBuilderHandle);
 
+    // psnpe_buildStatus = Snpe_PSNPE_Build(psnpe_->psnpeHandle,
+    // buildConfigHandle);
+    psnpe_buildStatus = (Snpe_PSNPE_Build(psnpe_->psnpeHandle,
+                                          buildConfigHandle) == SNPE_SUCCESS);
     // Saves the container if there is a modification in any of the record.
-    if (numInits > 1) container->save(model_path);
+    if (numInits > 1) Snpe_DlContainer_Save(containerHandle, model_path);
+
+    Snpe_DlContainer_Delete(containerHandle);
+    Snpe_BuildConfig_Delete(buildConfigHandle);
+    Snpe_StringList_Delete(outputLayers);
+    Snpe_SNPEBuilder_Delete(snpeBuilderHandle);
+    Snpe_PlatformConfig_Delete(platformConfigHandle);
   }
 
   if (!psnpe_buildStatus) {
-    LOG(FATAL) << "Error in init of psnpe_ ";
+    LOG(FATAL) << "Error in init of psnpe_ " << psnpe_buildStatus;
   }
-  if (!snpe_) {
-    LOG(FATAL) << "Error in init of snpe_ " << snpe_;
+  if (!snpe_->snpeHandle) {
+    LOG(FATAL) << "Error in init of snpe_ " << snpe_->snpeHandle;
+  }
+  // Snpe_DlContainer_Delete(containerHandle);
+}
+
+mlperf_status_t QTIBackendHelper::execute() {
+  if (!useSnpe_) {
+    if (Snpe_PSNPE_Execute(psnpe_->psnpeHandle, inputMapListHandle_, outputMapListHandle_) !=
+                            SNPE_SUCCESS) {
+      return MLPERF_FAILURE;
+    }
+  } else {
+    auto in_ = Snpe_UserBufferList_At_Ref(inputMapListHandle_, 0);
+    auto out_ = Snpe_UserBufferList_At_Ref(outputMapListHandle_, 0);
+    if (Snpe_SNPE_ExecuteUserBuffers(snpe_->snpeHandle, in_, out_) != SNPE_SUCCESS) {
+      return MLPERF_FAILURE;
+    }
   }
+  return MLPERF_SUCCESS;
 }
 
 void QTIBackendHelper::use_snpe(const char *model_path) {
   uint32_t numInits = get_num_inits();
-  LOG(INFO) << "numInits: " << numInits;
+  LOG(INFO) << "using SNPE. numInits: " << numInits;
 
 // Enable debug logs
 #ifdef DEBUG_FLAG
-  if (zdl::SNPE::SNPEFactory::initializeLogging(
-          zdl::DlSystem::LogLevel_t::LOG_VERBOSE)) {
+  if (Snpe_Util_InitializeLogging(SNPE_LOG_LEVEL_VERBOSE)) {
     LOG(INFO) << "Debug logs successful";
   } else {
     LOG(INFO) << "Debug logs can not be intialized";
@@ -253,45 +287,53 @@ void QTIBackendHelper::use_snpe(const char *model_path) {
   // Use SNPE
   for (int i = 0; i < numInits; i++) {
     // Open the DL container that contains the network to execute.
-    std::unique_ptr<zdl::DlContainer::IDlContainer> container;
+    Snpe_DlContainer_Handle_t containerHandle =
+        Snpe_DlContainer_Open(model_path);
     // Loads the container after destroying the previous instance
-    container = zdl::DlContainer::IDlContainer::open(model_path);
-    if (!container) {
+    if (!containerHandle) {
       LOG(FATAL) << "Container is not available " << model_path;
     }
 
-    zdl::SNPE::SNPEBuilder snpeBuilder(container.get());
-    zdl::DlSystem::StringList outputLayers =
-        ResolveOutputLayerNames(snpeOutputLayers_);
+    Snpe_SNPEBuilder_Handle_t snpeBuilderHandle =
+        Snpe_SNPEBuilder_Create(containerHandle);
 
-    snpeBuilder.setPerformanceProfile(perfProfile_)
-        .setExecutionPriorityHint(zdl::DlSystem::ExecutionPriorityHint_t::HIGH)
-        .setRuntimeProcessorOrder(inputRuntimeList)
-        .setUseUserSuppliedBuffers(true)
-        .setOutputLayers(outputLayers);
+    Snpe_StringList_Handle_t outputLayers =
+        ResolveOutputLayerNames(snpeOutputLayers_);
+    Snpe_SNPEBuilder_SetPerformanceProfile(snpeBuilderHandle, perfProfile_);
+    Snpe_SNPEBuilder_SetExecutionPriorityHint(snpeBuilderHandle,
+                                              SNPE_EXECUTION_PRIORITY_HIGH);
+    Snpe_SNPEBuilder_SetRuntimeProcessorOrder(snpeBuilderHandle,
+                                              inputRuntimeListHandle);
+    Snpe_SNPEBuilder_SetUseUserSuppliedBuffers(snpeBuilderHandle, true);
+    Snpe_SNPEBuilder_SetOutputLayers(snpeBuilderHandle, outputLayers);
 
     std::string platformOptionStr = "";
     if (Socs::get_use_dsp_features() && isSignedStatus == UNSIGNED_PD) {
       // use unsignedPD feature for untrusted app.
       platformOptionStr += "unsignedPD:ON";
     }
-
     if (Socs::soc_check_feature(useIonBuffers_, platformOptionStr)) {
-      snpeBuilder.setInitCacheMode(true);
+      Snpe_SNPEBuilder_SetInitCacheMode(snpeBuilderHandle, true);
     }
-    zdl::DlSystem::PlatformConfig platformConfig;
-    bool setSuccess = platformConfig.setPlatformOptions(platformOptionStr);
-    bool isValid = platformConfig.isOptionsValid();
+    Snpe_PlatformConfig_Handle_t platformConfigHandle =
+        Snpe_PlatformConfig_Create();
+    bool setSuccess = Snpe_PlatformConfig_SetPlatformOptions(
+        platformConfigHandle, platformOptionStr.c_str());
+    bool isValid = Snpe_PlatformConfig_IsOptionsValid(platformConfigHandle);
     if (!isValid) {
       LOG(INFO) << "platformconfig option is invalid";
     }
-    snpeBuilder.setPlatformConfig(platformConfig);
-    snpe_ = snpeBuilder.build();
-
+    Snpe_SNPEBuilder_SetPlatformConfig(snpeBuilderHandle, platformConfigHandle);
+    snpe_->snpeHandle = Snpe_SNPEBuilder_Build(snpeBuilderHandle);
     // Saves the container if there is a modification in any of the record.
-    if (numInits > 1) container->save(model_path);
+    if (numInits > 1) Snpe_DlContainer_Save(containerHandle, model_path);
+
+    Snpe_DlContainer_Delete(containerHandle);
+    Snpe_SNPEBuilder_Delete(snpeBuilderHandle);
+    Snpe_StringList_Delete(outputLayers);
+    Snpe_PlatformConfig_Delete(platformConfigHandle);
   }
-  if (!snpe_) {
+  if (!snpe_->snpeHandle) {
     LOG(FATAL) << "Error in init of the model " << snpe_;
   }
 }
@@ -332,65 +374,84 @@ void QTIBackendHelper::get_accelerator_instances(int &num_dsp, int &num_aip,
 }
 
 void QTIBackendHelper::map_inputs() {
-  zdl::DlSystem::UserBufferMap inputMap;
+  Snpe_UserBufferMap_Handle_t inputMapHandle = Snpe_UserBufferMap_Create();
+
   for (int bi = 0; bi < batchSize_ / inputBatch_; bi++) {
-    for (const auto &name : networkInputTensorNames_) {
-      zdl::DlSystem::IUserBufferFactory &ubFactory =
-          zdl::SNPE::SNPEFactory::getUserBufferFactory();
-      auto ubaOpt = snpe_->getInputOutputBufferAttributes(name);
-      long bufSize = calcSizeFromDims((*ubaOpt)->getDims().rank(),
-                                      (*ubaOpt)->getDims().getDimensions());
-      std::vector<size_t> strides;
-      std::unique_ptr<zdl::DlSystem::IUserBuffer> ubPtr;
-
-      LOG(INFO) << "inputbuffer: " << inputBufferType_ << " name: " << name;
+    for (size_t i = 0; i < Snpe_StringList_Size(networkInputTensorNamesHandle_);
+         ++i) {
+      const char *name = Snpe_StringList_At(networkInputTensorNamesHandle_, i);
+      Snpe_IBufferAttributes_Handle_t ubaOptHandle =
+          Snpe_SNPE_GetInputOutputBufferAttributes(snpe_->snpeHandle, name);
+      Snpe_TensorShape_Handle_t dimsHandle =
+          Snpe_IBufferAttributes_GetDims(ubaOptHandle);
+      long bufSize =
+          calcSizeFromDims(Snpe_TensorShape_Rank(dimsHandle),
+                           Snpe_TensorShape_GetDimensions(dimsHandle));
+      std::vector<Snpe_IUserBuffer_Handle_t> ubPtr;
+
+      // LOG(INFO) << "inputbuffer: " << inputBufferType_ << " name: " << name;
       if (inputBufferType_ == QTIBufferType::FLOAT_32) {
         // Prepare float buffer
         bufSize *= sizeof(float);
         std::vector<uint8_t> inputBuffer(bufSize);
-        strides = calcStrides((*ubaOpt)->getDims(), sizeof(float));
-        zdl::DlSystem::UserBufferEncodingFloat ubeFloat;
-
-        ubPtr =
-            ubFactory.createUserBuffer(std::move(inputBuffer.data()),
-                                       inputBuffer.size(), strides, &ubeFloat);
-        inputMap.add(name, ubPtr.release());
+        auto stridesHandle = calcStrides(
+            Snpe_IBufferAttributes_GetDims(ubaOptHandle), sizeof(float));
+        Snpe_UserBufferEncoding_Handle_t ubeFloatHandle =
+            Snpe_UserBufferEncodingFloat_Create();
+        ubPtr.push_back(Snpe_Util_CreateUserBuffer(
+            std::move(inputBuffer.data()), inputBuffer.size(), stridesHandle,
+            ubeFloatHandle));
+        Snpe_UserBufferMap_Add(inputMapHandle, name, ubPtr.back());
+
+        Snpe_TensorShape_Delete(stridesHandle);
+        Snpe_UserBufferEncodingFloat_Delete(ubeFloatHandle);
       } else {
         // Prepare tf8 buffer
         bufSize *= sizeof(uint8_t);
         // Pass the quantization parameters from the model to UB
-        zdl::DlSystem::UserBufferEncodingTfN *ubeTfN = nullptr;
-        zdl::DlSystem::UserBufferEncodingTfN temp(128.0, 1.0 / 255);
         std::vector<uint8_t> inputBuffer(bufSize);
-        strides = calcStrides((*ubaOpt)->getDims(), sizeof(uint8_t));
-        ubeTfN = dynamic_cast<zdl::DlSystem::UserBufferEncodingTfN *>(
-            (*ubaOpt)->getEncoding());
+        auto stridesHandle = calcStrides(
+            Snpe_IBufferAttributes_GetDims(ubaOptHandle), sizeof(uint8_t));
+        auto ubeTfN = Snpe_IUserBuffer_GetEncoding_Ref(ubaOptHandle);
 
         // Set the default QP for model which doesn't have QP.
         // HTP may not need to use the QP for the current set of DLCs
         // This may be required for AIP though.
         // LOG(INFO) << "QP parameters from model: " << ubeTfN;
-        if (!ubeTfN) ubeTfN = &temp;
+        if (!ubeTfN)
+          ubeTfN = Snpe_UserBufferEncodingTfN_Create(128.0, 1.0 / 255, 8);
+
+        ubPtr.push_back(Snpe_Util_CreateUserBuffer(
+            std::move(inputBuffer.data()), inputBuffer.size(), stridesHandle,
+            ubeTfN));
+        Snpe_UserBufferMap_Add(inputMapHandle, name, ubPtr.back());
 
-        ubPtr = ubFactory.createUserBuffer(std::move(inputBuffer.data()),
-                                           inputBuffer.size(), strides, ubeTfN);
-        inputMap.add(name, ubPtr.release());
+        Snpe_TensorShape_Delete(stridesHandle);
+        Snpe_UserBufferEncodingTfN_Delete(ubeTfN);
       }
+      Snpe_IBufferAttributes_Delete(ubaOptHandle);
+      Snpe_TensorShape_Delete(dimsHandle);
     }
-    inputMap_.push_back(inputMap);
+    Snpe_UserBufferList_PushBack(inputMapListHandle_, inputMapHandle);
   }
   bufs_.resize(batchSize_ / inputBatch_);
+  Snpe_UserBufferMap_Delete(inputMapHandle);
 }
 
 void QTIBackendHelper::map_outputs() {
-  zdl::DlSystem::UserBufferMap outputMap;
-  zdl::DlSystem::IUserBufferFactory &ubFactory =
-      zdl::SNPE::SNPEFactory::getUserBufferFactory();
+  Snpe_UserBufferMap_Handle_t outputMapHandle = Snpe_UserBufferMap_Create();
+
   for (int bi = 0; bi < batchSize_ / inputBatch_; bi++) {
-    for (const auto &name : networkOutputTensorNames_) {
-      auto ubaOpt = snpe_->getInputOutputBufferAttributes(name);
-      long bufSize = calcSizeFromDims((*ubaOpt)->getDims().rank(),
-                                      (*ubaOpt)->getDims().getDimensions());
+    for (size_t i = 0;
+         i < Snpe_StringList_Size(networkOutputTensorNamesHandle_); ++i) {
+      const char *name = Snpe_StringList_At(networkOutputTensorNamesHandle_, i);
+      Snpe_IBufferAttributes_Handle_t ubaOptHandle =
+          Snpe_SNPE_GetInputOutputBufferAttributes(snpe_->snpeHandle, name);
+      Snpe_TensorShape_Handle_t dimsHandle =
+          Snpe_IBufferAttributes_GetDims(ubaOptHandle);
+      long bufSize =
+          calcSizeFromDims(Snpe_TensorShape_Rank(dimsHandle),
+                           Snpe_TensorShape_GetDimensions(dimsHandle));
 
       outputBatchBufsize_ = bufSize;
       // LOG(INFO) << "outputBufferType: " << outputBufferType_
@@ -401,45 +462,88 @@ void QTIBackendHelper::map_outputs() {
         Allocator<uint8_t>::useDefaultAllocator();
       }
       if (outputBufferType_ == QTIBufferType::UINT_8) {
-        zdl::DlSystem::UserBufferEncodingTfN ubeTfN(0, 1.0f, 8);
+        auto ubeTfN = Snpe_UserBufferEncodingTfN_Create(0, 1.0f, 8);
+
+        std::vector<Snpe_IUserBuffer_Handle_t> x;
         bufs_[bi].emplace(std::string(name),
                           std::vector<uint8_t, Allocator<uint8_t>>(
                               bufSize * sizeof(uint8_t)));
-        auto x = ubFactory.createUserBuffer(
-            bufs_[bi].at(name).data(), bufSize * sizeof(uint8_t),
-            calcStrides((*ubaOpt)->getDims(), sizeof(uint8_t)), &ubeTfN);
-        outputMap.add(name, x.release());
+        auto stridesHandle = calcStrides(
+            Snpe_IBufferAttributes_GetDims(ubaOptHandle), sizeof(uint8_t));
+        x.push_back(Snpe_Util_CreateUserBuffer(bufs_[bi].at(name).data(),
+                                               bufSize * sizeof(uint8_t),
+                                               stridesHandle, ubeTfN));
+        Snpe_UserBufferMap_Add(outputMapHandle, name, x.back());
+
+        Snpe_UserBufferEncodingTfN_Delete(ubeTfN);
+        Snpe_TensorShape_Delete(stridesHandle);
+      } else if (outputBufferType_ == QTIBufferType::INT_32) {
+        auto ubeIntN = Snpe_UserBufferEncodingIntN_Create(32);
+        std::vector<Snpe_IUserBuffer_Handle_t> x;
+        bufs_[bi].emplace(std::string(name),
+                          std::vector<uint8_t, Allocator<uint8_t>>(
+                              bufSize * sizeof(int32_t)));
+        auto stridesHandle = calcStrides(
+            Snpe_IBufferAttributes_GetDims(ubaOptHandle), sizeof(int32_t));
+        x.push_back(Snpe_Util_CreateUserBuffer(bufs_[bi].at(name).data(),
+                                               bufSize * sizeof(int32_t),
+                                               stridesHandle, ubeIntN));
+
+        Snpe_UserBufferMap_Add(outputMapHandle, name, x.back());
+
+        Snpe_UserBufferEncodingIntN_Delete(ubeIntN);
+        Snpe_TensorShape_Delete(stridesHandle);
       } else {
-        zdl::DlSystem::UserBufferEncodingFloat userBufferEncodingFloat;
+        auto userBufferEncodingFloat = Snpe_UserBufferEncodingFloat_Create();
+
+        std::vector<Snpe_IUserBuffer_Handle_t> x;
         bufs_[bi].emplace(
             std::string(name),
             std::vector<uint8_t, Allocator<uint8_t>>(bufSize * sizeof(float)));
-        auto x = ubFactory.createUserBuffer(
-            bufs_[bi].at(name).data(), bufSize * sizeof(float),
-            calcStrides((*ubaOpt)->getDims(), sizeof(float)),
-            &userBufferEncodingFloat);
-        outputMap.add(name, x.release());
+        auto stridesHandle = calcStrides(
+            Snpe_IBufferAttributes_GetDims(ubaOptHandle), sizeof(float));
+        x.push_back(Snpe_Util_CreateUserBuffer(
+            bufs_[bi].at(name).data(), bufSize * sizeof(float), stridesHandle,
+            userBufferEncodingFloat));
+        Snpe_UserBufferMap_Add(outputMapHandle, name, x.back());
+
+        Snpe_UserBufferEncodingFloat_Delete(userBufferEncodingFloat);
+        Snpe_TensorShape_Delete(stridesHandle);
       }
+      Snpe_IBufferAttributes_Delete(ubaOptHandle);
+      Snpe_TensorShape_Delete(dimsHandle);
     }
-    outputMap_.push_back(outputMap);
+    Snpe_UserBufferList_PushBack(outputMapListHandle_, outputMapHandle);
   }
+  Snpe_UserBufferMap_Delete(outputMapHandle);
 }
 
 void QTIBackendHelper::get_data_formats() {
-  const auto &strList_input = snpe_->getInputTensorNames();
-  if (!strList_input) {
+  networkInputTensorNamesHandle_ =
+      Snpe_SNPE_GetInputTensorNames(snpe_->snpeHandle);
+  if (!networkInputTensorNamesHandle_) {
     throw std::runtime_error("Error obtaining Input tensor names");
   }
-  networkInputTensorNames_ = *strList_input;
 
-  zdl::DlSystem::TensorShape tensorShape;
-  tensorShape = snpe_->getInputDimensions();
-  inputBatch_ = tensorShape.getDimensions()[0];
+  for (size_t i = 0; i < Snpe_StringList_Size(networkInputTensorNamesHandle_);
+       ++i) {
+    const char *name = Snpe_StringList_At(networkInputTensorNamesHandle_, i);
+    auto inputShapeHandle =
+        Snpe_SNPE_GetInputDimensions(snpe_->snpeHandle, name);
+
+    if (inputShapeHandle == nullptr)
+      throw std::runtime_error("Failed to obtain input dimensions");
+    inputBatch_ = Snpe_TensorShape_At(inputShapeHandle, 0);
+
+    Snpe_IBufferAttributes_Handle_t ubaOptHandle =
+        Snpe_SNPE_GetInputOutputBufferAttributes(snpe_->snpeHandle, name);
+
+    Snpe_TensorShape_Handle_t dimsHandle =
+        Snpe_IBufferAttributes_GetDims(ubaOptHandle);
+
+    long bufSize = calcSizeFromDims(Snpe_TensorShape_Rank(dimsHandle),
+                                    Snpe_TensorShape_GetDimensions(dimsHandle));
 
-  for (const auto &name : networkInputTensorNames_) {
-    auto ubaOpt = snpe_->getInputOutputBufferAttributes(name);
-    long bufSize = calcSizeFromDims((*ubaOpt)->getDims().rank(),
-                                    (*ubaOpt)->getDims().getDimensions());
     if (inputBufferType_ == FLOAT_32) {
       // Input buffer type FLOAT
       inputFormat_.push_back(
@@ -449,18 +553,26 @@ void QTIBackendHelper::get_data_formats() {
       inputFormat_.push_back(
           {mlperf_data_t::Type::Uint8, bufSize / inputBatch_});
     }
+    Snpe_TensorShape_Delete(inputShapeHandle);
+    Snpe_IBufferAttributes_Delete(ubaOptHandle);
+    Snpe_TensorShape_Delete(dimsHandle);
   }
 
-  const auto &strList_output = snpe_->getOutputTensorNames();
-  if (!strList_output) {
+  networkOutputTensorNamesHandle_ =
+      Snpe_SNPE_GetOutputTensorNames(snpe_->snpeHandle);
+  if (!networkOutputTensorNamesHandle_) {
     throw std::runtime_error("Error obtaining Output tensor names");
   }
-  networkOutputTensorNames_ = *strList_output;
 
-  for (const auto &name : networkOutputTensorNames_) {
-    auto ubaOpt = snpe_->getInputOutputBufferAttributes(name);
-    long bufSize = calcSizeFromDims((*ubaOpt)->getDims().rank(),
-                                    (*ubaOpt)->getDims().getDimensions());
+  for (size_t i = 0; i < Snpe_StringList_Size(networkOutputTensorNamesHandle_);
+       ++i) {
+    const char *name = Snpe_StringList_At(networkOutputTensorNamesHandle_, i);
+    Snpe_IBufferAttributes_Handle_t ubaOptHandle =
+        Snpe_SNPE_GetInputOutputBufferAttributes(snpe_->snpeHandle, name);
+    Snpe_TensorShape_Handle_t dimsHandle =
+        Snpe_IBufferAttributes_GetDims(ubaOptHandle);
+    long bufSize = calcSizeFromDims(Snpe_TensorShape_Rank(dimsHandle),
+                                    Snpe_TensorShape_GetDimensions(dimsHandle));
     if (outputBufferType_ == FLOAT_32) {
       if (snpeOutputLayers_ == "transpose") {
         // For mobileBERT, return output size as half the size of computed
@@ -478,11 +590,17 @@ void QTIBackendHelper::get_data_formats() {
         outputFormat_.push_back(
             {mlperf_data_t::Type::Float32, bufSize / inputBatch_});
       }
+    } else if (outputBufferType_ == INT_32) {
+      // output buffer type INT32
+      outputFormat_.push_back(
+          {mlperf_data_t::Type::Int32, bufSize / inputBatch_});
     } else {
       // output buffer type UINT8
       outputFormat_.push_back(
           {mlperf_data_t::Type::Uint8, bufSize / inputBatch_});
     }
+    Snpe_IBufferAttributes_Delete(ubaOptHandle);
+    Snpe_TensorShape_Delete(dimsHandle);
   }
 }
 
@@ -490,54 +608,64 @@ void QTIBackendHelper::set_runtime_config() {
   int numDSP = 0, numAIP = 0, numGPU = 0, numCPU = 0;
   get_accelerator_instances(numDSP, numAIP, numGPU, numCPU);
 
-  zdl::DlSystem::Runtime_t runtime;
+  Snpe_Runtime_t runtime;
   for (int i = 0; i < numDSP; i++) {
     if (i == 0) {
       runtime = Str2Delegate(SNPE_DSP);
     }
-    zdl::PSNPE::RuntimeConfig runtimeConfig;
-    runtimeConfig.runtime = runtime;
-    runtimeConfig.perfProfile = perfProfile_;
-    runtimeConfigsList.push_back(runtimeConfig);
-    inputRuntimeList.add(runtime);
+    auto runtimeConfigHandle = Snpe_RuntimeConfig_Create();
+
+    Snpe_RuntimeConfig_SetRuntime(runtimeConfigHandle, runtime);
+    Snpe_RuntimeConfig_SetPerformanceProfile(runtimeConfigHandle, perfProfile_);
+    Snpe_RuntimeConfigList_PushBack(runtimeConfigsListHandle,
+                                    runtimeConfigHandle);
+    Snpe_RuntimeList_Add(inputRuntimeListHandle, runtime);
+
+    Snpe_RuntimeConfig_Delete(runtimeConfigHandle);
   }
 
   for (int i = 0; i < numAIP; i++) {
     if (i == 0) {
       runtime = Str2Delegate(SNPE_AIP);
     }
-    zdl::PSNPE::RuntimeConfig runtimeConfig;
-    runtimeConfig.runtime = runtime;
-    runtimeConfig.perfProfile = perfProfile_;
-    runtimeConfigsList.push_back(runtimeConfig);
-    inputRuntimeList.add(runtime);
+    auto runtimeConfigHandle = Snpe_RuntimeConfig_Create();
+    Snpe_RuntimeConfig_SetRuntime(runtimeConfigHandle, runtime);
+    Snpe_RuntimeConfig_SetPerformanceProfile(runtimeConfigHandle, perfProfile_);
+    Snpe_RuntimeConfigList_PushBack(runtimeConfigsListHandle,
+                                    runtimeConfigHandle);
+    Snpe_RuntimeList_Add(inputRuntimeListHandle, runtime);
+
+    Snpe_RuntimeConfig_Delete(runtimeConfigHandle);
   }
 
   for (int i = 0; i < numGPU; i++) {
     if (i == 0) {
       runtime = Str2Delegate(SNPE_GPU);
     }
-    zdl::PSNPE::RuntimeConfig runtimeConfig;
-    runtimeConfig.runtime = runtime;
-    runtimeConfig.perfProfile = perfProfile_;
-    runtimeConfigsList.push_back(runtimeConfig);
-    inputRuntimeList.add(runtime);
+    auto runtimeConfigHandle = Snpe_RuntimeConfig_Create();
+    Snpe_RuntimeConfig_SetRuntime(runtimeConfigHandle, runtime);
+    Snpe_RuntimeConfig_SetPerformanceProfile(runtimeConfigHandle, perfProfile_);
+    Snpe_RuntimeConfigList_PushBack(runtimeConfigsListHandle,
+                                    runtimeConfigHandle);
+    Snpe_RuntimeList_Add(inputRuntimeListHandle, runtime);
+    Snpe_RuntimeConfig_Delete(runtimeConfigHandle);
   }
 
   for (int i = 0; i < numCPU; i++) {
     if (i == 0) {
       runtime = Str2Delegate(SNPE_CPU);
     }
-    zdl::PSNPE::RuntimeConfig runtimeConfig;
-    runtimeConfig.runtime = runtime;
-    runtimeConfig.perfProfile = perfProfile_;
-    runtimeConfigsList.push_back(runtimeConfig);
-    inputRuntimeList.add(runtime);
+    auto runtimeConfigHandle = Snpe_RuntimeConfig_Create();
+    Snpe_RuntimeConfig_SetRuntime(runtimeConfigHandle, runtime);
+    Snpe_RuntimeConfig_SetPerformanceProfile(runtimeConfigHandle, perfProfile_);
+    Snpe_RuntimeConfigList_PushBack(runtimeConfigsListHandle,
+                                    runtimeConfigHandle);
+    Snpe_RuntimeList_Add(inputRuntimeListHandle, runtime);
+    Snpe_RuntimeConfig_Delete(runtimeConfigHandle);
   }
 }
 
 std::string QTIBackendHelper::get_snpe_version() {
-  zdl::DlSystem::Version_t version =
-      zdl::SNPE::SNPEFactory::getLibraryVersion();
-  return version.Build;
+  Snpe_DlVersion_Handle_t version = Snpe_Util_GetLibraryVersion();
+  return Snpe_DlVersion_GetBuild(version);
 }
diff --git a/mobile_back_qti/cpp/backend_qti/qti_backend_helper.h b/mobile_back_qti/cpp/backend_qti/qti_backend_helper.h
index fc2d7ce..84ea882 100644
--- a/mobile_back_qti/cpp/backend_qti/qti_backend_helper.h
+++ b/mobile_back_qti/cpp/backend_qti/qti_backend_helper.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2021-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -16,11 +16,11 @@ limitations under the License.
 #ifndef QTIBACKENDHELPER_H
 #define QTIBACKENDHELPER_H
 
+#include <unordered_map>
 #include <vector>
 
-#include "DlSystem/IUserBufferFactory.hpp"
-#include "SNPE/PSNPE.hpp"
-#include "SNPE/SNPE.hpp"
+#include "SNPE/PSNPE.h"
+#include "SNPE/SNPE.h"
 #include "allocator.h"
 #include "flutter/cpp/c/backend_c.h"
 #include "flutter/cpp/c/type.h"
@@ -29,36 +29,52 @@ limitations under the License.
 #define UNSIGNED_PD 1
 #define DEFAULT -1
 
+class snpe_handler {
+ public:
+  Snpe_SNPE_Handle_t snpeHandle;
+
+  ~snpe_handler() { Snpe_SNPE_Delete(snpeHandle); }
+};
+
+class psnpe_handler {
+ public:
+  Snpe_PSNPE_Handle_t psnpeHandle;
+
+  psnpe_handler() { psnpeHandle = Snpe_PSNPE_Create(); }
+
+  ~psnpe_handler() { Snpe_PSNPE_Delete(psnpeHandle); }
+};
+
 class QTIBackendHelper {
  private:
-  zdl::DlSystem::RuntimeList inputRuntimeList;
-  zdl::DlSystem::RuntimeList dummyInputRuntimeList;
-  zdl::PSNPE::RuntimeConfigList runtimeConfigsList;
+  Snpe_RuntimeList_Handle_t inputRuntimeListHandle;
+  Snpe_RuntimeList_Handle_t dummyInputRuntimeListHandle;
+  Snpe_RuntimeConfigList_Handle_t runtimeConfigsListHandle;
 
   inline int get_num_inits();
   void get_accelerator_instances(int &numDSP, int &numAIP, int &numGPU,
                                  int &numCPU);
 
  public:
-  enum QTIBufferType { FLOAT_32 = 0, UINT_8 = 1 };
+  enum QTIBufferType { FLOAT_32 = 0, UINT_8 = 1, INT_32 = 2 };
   using GetBufferFn = std::add_pointer<void *(size_t, int)>::type;
   using ReleaseBufferFn = std::add_pointer<void(void *)>::type;
-
   const char *name_ = "snpe";
   const char *acceleratorName_;
   std::string snpeOutputLayers_;
   std::vector<mlperf_data_t> inputFormat_;
   std::vector<mlperf_data_t> outputFormat_;
-  std::unique_ptr<zdl::PSNPE::PSNPE> psnpe_;
-  std::unique_ptr<zdl::SNPE::SNPE> snpe_;
-  zdl::PSNPE::UserBufferList inputMap_, outputMap_;
+  std::unique_ptr<psnpe_handler> psnpe_;
+  std::unique_ptr<snpe_handler> snpe_;
+  Snpe_UserBufferList_Handle_t inputMapListHandle_, outputMapListHandle_;
   std::vector<
       std::unordered_map<std::string, std::vector<uint8_t, Allocator<uint8_t>>>>
       bufs_;
   std::string scenario_;
-  zdl::DlSystem::StringList networkInputTensorNames_;
-  zdl::DlSystem::StringList networkOutputTensorNames_;
-  zdl::DlSystem::PerformanceProfile_t perfProfile_;
+  std::unordered_map<int, std::string> odLayerMap;
+  Snpe_StringList_Handle_t networkInputTensorNamesHandle_;
+  Snpe_StringList_Handle_t networkOutputTensorNamesHandle_;
+  Snpe_PerformanceProfile_t perfProfile_;
 
   bool isTflite_;
   bool useSnpe_;
@@ -80,11 +96,38 @@ class QTIBackendHelper {
   /* exposed functions */
   void use_psnpe(const char *model_path);
   void use_snpe(const char *model_path);
+  mlperf_status_t execute();
   void map_inputs();
   void map_outputs();
   void get_data_formats();
   void set_runtime_config();
   std::string get_snpe_version();
+
+  QTIBackendHelper()
+      : inputRuntimeListHandle(Snpe_RuntimeList_Create()),
+        dummyInputRuntimeListHandle(Snpe_RuntimeList_Create()),
+        runtimeConfigsListHandle(Snpe_RuntimeConfigList_Create()),
+        networkInputTensorNamesHandle_(Snpe_StringList_Create()),
+        networkOutputTensorNamesHandle_(Snpe_StringList_Create()),
+        inputMapListHandle_(Snpe_UserBufferList_Create()),
+        outputMapListHandle_(Snpe_UserBufferList_Create()),
+        snpe_(new snpe_handler()),
+        psnpe_(new psnpe_handler()) {
+    odLayerMap[0] = "detection_boxes:0";
+    odLayerMap[1] = "Postprocessor/BatchMultiClassNonMaxSuppression_classes";
+    odLayerMap[2] = "detection_scores:0";
+    odLayerMap[3] =
+        "Postprocessor/BatchMultiClassNonMaxSuppression_num_detections";
+  }
+
+  ~QTIBackendHelper() {
+    Snpe_RuntimeList_Delete(inputRuntimeListHandle);
+    Snpe_RuntimeList_Delete(dummyInputRuntimeListHandle);
+    Snpe_StringList_Delete(networkInputTensorNamesHandle_);
+    Snpe_StringList_Delete(networkOutputTensorNamesHandle_);
+    Snpe_UserBufferList_Delete(inputMapListHandle_);
+    Snpe_UserBufferList_Delete(outputMapListHandle_);
+  }
 };
 
 #endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_c.cc b/mobile_back_qti/cpp/backend_qti/qti_c.cc
index 0c9b9ff..7872560 100644
--- a/mobile_back_qti/cpp/backend_qti/qti_c.cc
+++ b/mobile_back_qti/cpp/backend_qti/qti_c.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -106,11 +106,13 @@ mlperf_backend_ptr_t mlperf_backend_create(
     backend_data->releaseBuffer_ = std_release_buffer;
   }
 
+#ifdef __ANDROID__
   std::stringstream adsp_lib_path;
   adsp_lib_path << native_lib_path << ";";
   adsp_lib_path << "/system/lib/rfsa/adsp;/system/vendor/lib/rfsa/adsp;/dsp";
   LOG(INFO) << "lib_path: " << adsp_lib_path.str();
   setenv("ADSP_LIBRARY_PATH", adsp_lib_path.str().c_str(), 1 /*override*/);
+#endif
   std::string snpe_version = xverstr(SNPE_VERSION_STRING);
   if (snpe_version.compare("default") != 0) {
     int dotPosition = snpe_version.find_last_of(".");
@@ -177,6 +179,8 @@ void mlperf_backend_delete(mlperf_backend_ptr_t backend_ptr) {
 
 // Run the inference for a sample.
 mlperf_status_t mlperf_backend_issue_query(mlperf_backend_ptr_t backend_ptr) {
+  mlperf_status_t ret = MLPERF_FAILURE;
+
 #ifdef DEBUG_FLAG
   auto start = high_resolution_clock::now();
 #endif
@@ -184,17 +188,9 @@ mlperf_status_t mlperf_backend_issue_query(mlperf_backend_ptr_t backend_ptr) {
   if (backend_data->isTflite_) {
     return tflite_backend_issue_query(backend_data->tfliteBackend_);
   }
-  if (!backend_data->useSnpe_) {
-    if (!backend_data->psnpe_->execute(backend_data->inputMap_,
-                                       backend_data->outputMap_)) {
-      return MLPERF_FAILURE;
-    }
-  } else {
-    if (!backend_data->snpe_->execute(backend_data->inputMap_[0],
-                                      backend_data->outputMap_[0])) {
-      return MLPERF_FAILURE;
-    }
-  }
+
+  ret = backend_data->execute();
+
 #ifdef DEBUG_FLAG
   auto end = high_resolution_clock::now();
   auto duration = duration_cast<microseconds>(end - start);
@@ -202,7 +198,7 @@ mlperf_status_t mlperf_backend_issue_query(mlperf_backend_ptr_t backend_ptr) {
             << "Inference Time(ms): " << duration.count();
 #endif
   backend_data->queryCount_++;
-  return MLPERF_SUCCESS;
+  return ret;
 }
 
 // Flush the staged queries immediately.
@@ -252,9 +248,12 @@ mlperf_status_t mlperf_backend_set_input(mlperf_backend_ptr_t backend_ptr,
   //   LOG(INFO) << "TESTING: Using " << batchedDataPtr << " instead of " <<
   //   data;
   // }
-  backend_data->inputMap_[batchIndex / backend_data->inputBatch_]
-      .getUserBuffer(backend_data->networkInputTensorNames_.at(i))
-      ->setBufferAddress(batchedDataPtr);
+  Snpe_IUserBuffer_SetBufferAddress(
+      Snpe_UserBufferMap_GetUserBuffer_Ref(
+          Snpe_UserBufferList_At_Ref(backend_data->inputMapListHandle_,
+                                     batchIndex / backend_data->inputBatch_),
+          Snpe_StringList_At(backend_data->networkInputTensorNamesHandle_, i)),
+      batchedDataPtr);
   return MLPERF_SUCCESS;
 }
 
@@ -288,28 +287,14 @@ mlperf_status_t mlperf_backend_get_output(mlperf_backend_ptr_t backend_ptr,
   if (backend_data->snpeOutputLayers_ ==
       "Postprocessor/BatchMultiClassNonMaxSuppression") {
     // Reorder snpeOutputLayers_ for coco process_output
-    std::unordered_map<int, std::string> mapIndexLayer;
-    mapIndexLayer[0] = "boxes";
-    mapIndexLayer[1] = "classes";
-    mapIndexLayer[2] = "scores";
-    mapIndexLayer[3] = "num_detections";
-    const char *outputLayerName;
-
-    for (int idx = 0; idx < backend_data->networkOutputTensorNames_.size();
-         idx++) {
-      if (strstr(backend_data->networkOutputTensorNames_.at(idx),
-                 mapIndexLayer[outputIndex].c_str())) {
-        // layer name found
-        outputLayerName = backend_data->networkOutputTensorNames_.at(idx);
-        break;
-      }
-    }
-
+    const char *outputLayerName =
+        backend_data->odLayerMap[outputIndex].c_str();
     *data = backend_data->bufs_[batchIndex].at(outputLayerName).data();
     return MLPERF_SUCCESS;
   } else if (backend_data->snpeOutputLayers_ == "transpose") {
     *data = backend_data->bufs_[int(batchIndex / backend_data->inputBatch_)]
-                .at(backend_data->networkOutputTensorNames_.at(0))
+                .at(Snpe_StringList_At(
+                    backend_data->networkOutputTensorNamesHandle_, 0))
                 .data() +
             (1 - outputIndex) * 384 * sizeof(float);
     return MLPERF_SUCCESS;
@@ -322,7 +307,8 @@ mlperf_status_t mlperf_backend_get_output(mlperf_backend_ptr_t backend_ptr,
 
   *data =
       backend_data->bufs_[int(batchIndex / backend_data->inputBatch_)]
-          .at(backend_data->networkOutputTensorNames_.at(outputIndex))
+          .at(Snpe_StringList_At(backend_data->networkOutputTensorNamesHandle_,
+                                 outputIndex))
           .data() +
       (batchIndex % backend_data->inputBatch_) *
           int(backend_data->outputBatchBufsize_ / backend_data->inputBatch_) *
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings.h b/mobile_back_qti/cpp/backend_qti/qti_settings.h
index b90ddfb..9955568 100644
--- a/mobile_back_qti/cpp/backend_qti/qti_settings.h
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2021 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -19,646 +19,13 @@ limitations under the License.
 
 const std::string empty_settings = "";
 
-const std::string qti_settings_sdm865 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_aip"
-  accelerator_desc: "AIP"
-  framework: "SNPE"
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_0/SNPE/mobilenet_edgetpu_224_1.0_hta.dlc"
-  model_checksum: "73def045aac5a44a152a093d58e04c96"
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_aip"
-  accelerator_desc: "AIP"
-  framework: "SNPE"
-  batch_size: 3072
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_0/SNPE/mobilenet_edgetpu_224_1.0_hta.dlc"
-  model_checksum: "73def045aac5a44a152a093d58e04c96"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_aip"
-  accelerator_desc: "AIP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_0/SNPE/ssd_mobiledet_qat_hta.dlc"
-  model_checksum: "363d568abb8adc53f3f2480edc7b7f35"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "gpu_f16"
-  accelerator_desc: "GPU (FP16)"
-  framework: "TFLite GPU"
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v0_7/tflite/mobilebert_float_384_gpu.tflite"
-  model_checksum: "36a953d07a8c6f2d3e05b22e87cec95b"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v1"
-  accelerator: "snpe_aip"
-  accelerator_desc: "AIP"
-  framework: "SNPE"
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_0/SNPE/deeplabv3_hta.dlc"
-  model_checksum: "b1237cfdef02887a2205154eb44d0515"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v2"
-  accelerator: "snpe_aip"
-  accelerator_desc: "AIP"
-  framework: "SNPE"
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobile_mosaic_hta.dlc"
-  model_checksum: "d6d74288f81e8d121568e6dff6b771e6"
-})SETTINGS";
-
-const std::string qti_settings_sdm888 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/mobilenet_edgetpu_224_1.0_htp.dlc"
-  model_checksum: "2317f5bed0da67b9a13f1b5da4cdff92"
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  batch_size: 12288
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobilenet_edgetpu_224_1.0_htp_batched.dlc"
-  model_checksum: "d239e3a244da27137ca6dae27facff5a"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/ssd_mobiledet_qat_htp.dlc"
-  model_checksum: "95fbf908912f9af89bf6006890300e9d"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "transpose"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "input_buffer_type"
-    value: "float_32"
-  }
-  custom_setting {
-    id: "use_ion_buffer"
-    value: "false"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/mobilebert_quantized_htp.dlc"
-  model_checksum: "ab97172963ec8a92905c6a2c024557ab"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v1"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/deeplabv3_htp.dlc"
-  model_checksum: "364d536264d0e3263184f4dac88a75d9"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v2"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobile_mosaic_htp.dlc"
-  model_checksum: "ebae961e6f0b53bd839f485b125f5e46"
-})SETTINGS";
-
-const std::string qti_settings_sdm778 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/mobilenet_edgetpu_224_1.0_htp.dlc"
-  model_checksum: "2317f5bed0da67b9a13f1b5da4cdff92"
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  batch_size: 12288
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobilenet_edgetpu_224_1.0_htp_batched.dlc"
-  model_checksum: "d239e3a244da27137ca6dae27facff5a"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/ssd_mobiledet_qat_htp.dlc"
-  model_checksum: "95fbf908912f9af89bf6006890300e9d"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "transpose"
-  }
-  custom_setting {
-    id: "input_buffer_type"
-    value: "float_32"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/mobilebert_quantized_htp.dlc"
-  model_checksum: "ab97172963ec8a92905c6a2c024557ab"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v1"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v1_1/SNPE/deeplabv3_htp.dlc"
-  model_checksum: "364d536264d0e3263184f4dac88a75d9"
-}
-
-benchmark_setting {
-  benchmark_id: "IS_uint8_mosaic"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobile_mosaic_htp.dlc"
-  model_checksum: "ebae961e6f0b53bd839f485b125f5e46"
-})SETTINGS";
-
-const std::string qti_settings_sd7g1 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilenet_edgetpu_224_1.0_htp.dlc"
-  model_checksum: "b0fe84f5d21392198b17b906a97f452d"
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  batch_size: 12288
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.dlc"
-  model_checksum: "9380ed6edcbb9cd05dc41b7188720b88"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/ssd_mobiledet_qat_htp.dlc"
-  model_checksum: "6ac3c718f1b6d39f6e9a7700709aa3ff"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "transpose"
-  }
-  custom_setting {
-    id: "input_buffer_type"
-    value: "float_32"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilebert_quantized_htp.dlc"
-  model_checksum: "896609223af86aefa7f218e515bb977e"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v2"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobile_mosaic_htp.dlc"
-  model_checksum: "7a3f44d5583fae7b2c18fab3e6bcee33"
-})SETTINGS";
-
-const std::string qti_settings_sd8g1 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobilenet_edgetpu_224_1.0_htp.dlc"
-  model_checksum: "4e8c9ec583557f8dc341cdcc45dba241"
-  single_stream_expected_latency_ns: 800000
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  batch_size: 12288
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobilenet_edgetpu_224_1.0_htp_batched.dlc"
-  model_checksum: "862ea4d7623c62d49153bad1a774217c"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/ssd_mobiledet_qat_htp.dlc"
-  model_checksum: "e55ab007c00629f8616a50d0d9becc26"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "transpose"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "input_buffer_type"
-    value: "float_32"
-  }
-  custom_setting {
-    id: "use_ion_buffer"
-    value: "false"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobilebert_quantized_htp.dlc"
-  model_checksum: "ad724f945b3745e88158cc5d5de1c2a5"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v1"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/deeplabv3_htp.dlc"
-  model_checksum: "4f530fef7ae8c7adc0949d371e22f485"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v2"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_0/SNPE/mobile_mosaic_htp.dlc"
-  model_checksum: "ebae961e6f0b53bd839f485b125f5e46"
-})SETTINGS";
-
-const std::string qti_settings_sd8pg1 = R"SETTINGS(
-common_setting {
-  id: "num_threads"
-  name: "Number of threads"
-  value {
-    value: "4"
-    name: "4 threads"
-  }
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilenet_edgetpu_224_1.0_htp.dlc"
-  model_checksum: "b0fe84f5d21392198b17b906a97f452d"
-  single_stream_expected_latency_ns: 600000
-}
-
-benchmark_setting {
-  benchmark_id: "image_classification_offline"
-  accelerator: "psnpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  batch_size: 12288
-  custom_setting {
-    id: "scenario"
-    value: "Offline"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc"
-  model_checksum: "e2fec06f8d3f1bfeb036a7f6ed012aef"
-}
-
-benchmark_setting {
-  benchmark_id: "object_detection"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/ssd_mobiledet_qat_htp.dlc"
-  model_checksum: "6ac3c718f1b6d39f6e9a7700709aa3ff"
-}
-
-benchmark_setting {
-  benchmark_id: "natural_language_processing"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "snpe_output_layers"
-    value: "transpose"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "input_buffer_type"
-    value: "float_32"
-  }
-  custom_setting {
-    id: "use_ion_buffer"
-    value: "false"
-  }
-  custom_setting {
-    id: "perf_profile"
-    value: "high_performance"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobilebert_quantized_htp.dlc"
-  model_checksum: "896609223af86aefa7f218e515bb977e"
-}
-
-benchmark_setting {
-  benchmark_id: "image_segmentation_v2"
-  accelerator: "snpe_dsp"
-  accelerator_desc: "HTP"
-  framework: "SNPE"
-  custom_setting {
-    id: "input_buffer_type"
-    value: "uint_8"
-  }
-  custom_setting {
-    id: "bg_load"
-    value: "true"
-  }
-  custom_setting {
-    id: "output_buffer_type"
-    value: "uint_8"
-  }
-  model_path: "https://github.com/mlcommons/mobile_models/raw/main/v2_1/SNPE/mobile_mosaic_htp.dlc"
-  model_checksum: "7a3f44d5583fae7b2c18fab3e6bcee33"
-})SETTINGS";
+#include "qti_settings_sdm888.h"
+#include "qti_settings_sdm778.h"
+#include "qti_settings_sd7g1.h"
+#include "qti_settings_sd8g1.h"
+#include "qti_settings_sd8pg1.h"
+#include "qti_settings_sd7pg2.h"
+#include "qti_settings_sd8g2.h"
+#include "qti_settings_sd8cxg3.h"
 
 #endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd7g1.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd7g1.h
new file mode 100644
index 0000000..3756869
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd7g1.h
@@ -0,0 +1,144 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD7G1_H
+#define QTI_SETTINGS_SD7G1_H
+
+const std::string qti_settings_sd7g1 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sd7g1.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd7pg2.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd7pg2.h
new file mode 100644
index 0000000..4511c06
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd7pg2.h
@@ -0,0 +1,149 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD7PG2_H
+#define QTI_SETTINGS_SD7PG2_H
+
+const std::string qti_settings_sd7pg2 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+  single_stream_expected_latency_ns: 600000
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd8cxg3.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8cxg3.h
new file mode 100644
index 0000000..c7a635e
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8cxg3.h
@@ -0,0 +1,137 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD8cxG3_H
+#define QTI_SETTINGS_SD8cxG3_H
+
+const std::string qti_settings_sd8cxg3 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+  single_stream_expected_latency_ns: 600000
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sc8280x.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g1.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g1.h
new file mode 100644
index 0000000..68c21d1
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g1.h
@@ -0,0 +1,149 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD8G1_H
+#define QTI_SETTINGS_SD8G1_H
+
+const std::string qti_settings_sd8g1 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+  single_stream_expected_latency_ns: 800000
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g2.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g2.h
new file mode 100644
index 0000000..26ee855
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8g2.h
@@ -0,0 +1,149 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD8G2_H
+#define QTI_SETTINGS_SD8G2_H
+
+const std::string qti_settings_sd8g2 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+  single_stream_expected_latency_ns: 500000
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sd8g2.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "false"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "sustained_high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sd8pg1.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8pg1.h
new file mode 100644
index 0000000..e3c2a73
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sd8pg1.h
@@ -0,0 +1,149 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SD8PG1_H
+#define QTI_SETTINGS_SD8PG1_H
+
+const std::string qti_settings_sd8pg1 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+  single_stream_expected_latency_ns: 600000
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "sustained_high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sdm778.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sdm778.h
new file mode 100644
index 0000000..bfa7110
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sdm778.h
@@ -0,0 +1,144 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SDM778_H
+#define QTI_SETTINGS_SDM778_H
+
+const std::string qti_settings_sdm778 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/qti_settings_sdm888.h b/mobile_back_qti/cpp/backend_qti/qti_settings_sdm888.h
new file mode 100644
index 0000000..fb4d566
--- /dev/null
+++ b/mobile_back_qti/cpp/backend_qti/qti_settings_sdm888.h
@@ -0,0 +1,144 @@
+/* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#ifndef QTI_SETTINGS_SDM888_H
+#define QTI_SETTINGS_SDM888_H
+
+const std::string qti_settings_sdm888 = R"SETTINGS(
+common_setting {
+  id: "num_threads"
+  name: "Number of threads"
+  value {
+    value: "4"
+    name: "4 threads"
+  }
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_classification_offline"
+  accelerator: "psnpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  batch_size: 12288
+  custom_setting {
+    id: "scenario"
+    value: "Offline"
+  }
+  model_path: "local:///mlperf_models/mobilenet_edgetpu_224_1.0_htp_batched.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "object_detection"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "Postprocessor/BatchMultiClassNonMaxSuppression"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  model_path: "local:///mlperf_models/ssd_mobiledet_qat_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "natural_language_processing"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "snpe_output_layers"
+    value: "transpose"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "float_32"
+  }
+  custom_setting {
+    id: "use_ion_buffer"
+    value: "false"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "high_performance"
+  }
+  model_path: "local:///mlperf_models/mobilebert_quantized_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "image_segmentation_v2"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "output_buffer_type"
+    value: "int_32"
+  }
+  model_path: "local:///mlperf_models/mobile_mosaic_htp.dlc"
+  model_checksum: ""
+}
+
+benchmark_setting {
+  benchmark_id: "super_resolution"
+  accelerator: "snpe_dsp"
+  accelerator_desc: "HTP"
+  framework: "SNPE"
+  custom_setting {
+    id: "bg_load"
+    value: "true"
+  }
+  custom_setting {
+    id: "input_buffer_type"
+    value: "uint_8"
+  }
+  custom_setting {
+    id: "perf_profile"
+    value: "burst"
+  }
+  model_path: "local:///mlperf_models/snusr_htp.dlc"
+  model_checksum: ""
+})SETTINGS";
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/rpcmem.cc b/mobile_back_qti/cpp/backend_qti/rpcmem.cc
index 2d28551..6c27da6 100644
--- a/mobile_back_qti/cpp/backend_qti/rpcmem.cc
+++ b/mobile_back_qti/cpp/backend_qti/rpcmem.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -21,7 +21,10 @@ limitations under the License.
 
 RpcMem::RpcMem() {
   if (Socs::needs_rpcmem()) {
+// TODO: Replace dlopen with tflite's shared libs handling
+#ifdef __ANDROID__
     libHandle_ = dlopen("libcdsprpc.so", RTLD_NOW);
+#endif
   } else {
     libHandle_ = nullptr;
   }
@@ -30,10 +33,12 @@ RpcMem::RpcMem() {
     LOG(ERROR) << "Can't open rpc lib";
     isSuccess_ = false;
   } else {
+#ifdef __ANDROID__
     rpcmemAlloc_ =
         reinterpret_cast<RpcMemAllocPtr>(dlsym(libHandle_, "rpcmem_alloc"));
     rpcmemFree_ =
         reinterpret_cast<RpcMemFreePtr>(dlsym(libHandle_, "rpcmem_free"));
+#endif
 
     if (rpcmemAlloc_ && rpcmemFree_) {
       isSuccess_ = true;
@@ -46,7 +51,9 @@ RpcMem::RpcMem() {
 
 RpcMem::~RpcMem() {
   isSuccess_ = false;
+#ifdef __ANDROID__
   dlclose(libHandle_);
+#endif
 }
 
 void *RpcMem::Alloc(int id, uint32_t flags, int size) {
diff --git a/mobile_back_qti/cpp/backend_qti/rpcmem.h b/mobile_back_qti/cpp/backend_qti/rpcmem.h
index 8ee825c..6aa7a06 100644
--- a/mobile_back_qti/cpp/backend_qti/rpcmem.h
+++ b/mobile_back_qti/cpp/backend_qti/rpcmem.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -13,7 +13,9 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
+#ifdef __ANDROID__
 #include <dlfcn.h>
+#endif
 #include <stdint.h>
 
 #include <cstdlib>
diff --git a/mobile_back_qti/cpp/backend_qti/soc_utility.cc b/mobile_back_qti/cpp/backend_qti/soc_utility.cc
index a7c7c49..bfcd730 100644
--- a/mobile_back_qti/cpp/backend_qti/soc_utility.cc
+++ b/mobile_back_qti/cpp/backend_qti/soc_utility.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
@@ -16,8 +16,14 @@ limitations under the License.
 
 #include <fstream>
 #include <thread>
+#include <iostream>
 
 #include "tensorflow/core/platform/logging.h"
+#ifndef __ANDROID__
+#include <unordered_map>
+#include <Windows.h>
+#include "acpitabl.h"
+#endif
 
 SocInfo unsupportedSoc = SocInfo(UNSUPPORTED_SOC_STR);
 SocInfo Socs::m_soc_info;
@@ -32,10 +38,7 @@ std::map<uint32_t, SocInfo> socDetails =
             // hlc,
             // llc,
             // max_cores, needs_rpcmem
-            {356, SocInfo(1, 6, 0, 0, false, qti_settings_sdm865, "SDM865", 1,
-                          std::vector<int>({0, 1, 2, 3}),
-                          std::vector<int>({4, 5, 6, 7}), 8, false)},
-            {415, SocInfo(2, 0, 4, 0, true, qti_settings_sdm888, "SDM888", 1,
+            {415, SocInfo(2, 0, 0, 0, true, qti_settings_sdm888, "SDM888", 1,
                           std::vector<int>({0, 1, 2, 3}),
                           std::vector<int>({4, 5, 6, 7}), 8, true)},
             {475, SocInfo(2, 0, 0, 0, true, qti_settings_sdm778, "SDM778", 1,
@@ -56,12 +59,25 @@ std::map<uint32_t, SocInfo> socDetails =
             {530, SocInfo(2, 0, 0, 0, true, qti_settings_sd8pg1, "SD8PG1", 1,
                           std::vector<int>({0, 1, 2, 3}),
                           std::vector<int>({4, 5, 6, 7}), 8, true)},
+            {519, SocInfo(2, 0, 0, 0, true, qti_settings_sd8g2, "SD8G2", 1,
+                          std::vector<int>({0, 1, 2, 3}),
+                          std::vector<int>({4, 5, 6, 7}), 8, true)},
+            {536, SocInfo(2, 0, 0, 0, true, qti_settings_sd8g2, "SD8G2", 1,
+                          std::vector<int>({0, 1, 2, 3}),
+                          std::vector<int>({4, 5, 6, 7}), 8, true)},
+            {591, SocInfo(2, 0, 0, 0, true, qti_settings_sd7pg2, "SD7PG2", 1,
+                          std::vector<int>({0, 1, 2, 3}),
+                          std::vector<int>({4, 5, 6, 7}), 8, true)},
+            {435, SocInfo(2, 0, 0, 0, true, qti_settings_sd8cxg3, "SD8cxG3", 1,
+                          std::vector<int>({0, 1, 2, 3}),
+                          std::vector<int>({4, 5, 6, 7}), 8, false)},
         })
         .m_soc_details;
 
-void Socs::soc_info_init() {
-  if (is_init_done) return;
 
+#ifdef __ANDROID__
+uint32_t Socs::get_android_soc_id(void) {
+  uint32_t id;
   std::ifstream in_file;
   std::vector<char> line(5);
   in_file.open("/sys/devices/soc0/soc_id");
@@ -71,16 +87,86 @@ void Socs::soc_info_init() {
   if (in_file.fail()) {
     m_soc_info = unsupportedSoc;
     LOG(INFO) << "Failed to read SOC file: ";
-    return;
+    return UNSUPPORTED_SOC_ID;
   }
 
   in_file.read(line.data(), 5);
   in_file.close();
-  uint32_t soc_id = (uint32_t)std::atoi(line.data());
+  id = (uint32_t)std::atoi(line.data());
+
+  return id;
+}
+
+#else
+#define MAX_FADT_PPTT_SIZE    65536
+#define LEVEL_ID(LV1, LV2)    ((LV1<<32) | (LV2))
+
+static std::unordered_map<uint64_t, int> pptt_mappings = {
+  {LEVEL_ID(113ULL, 449ULL), 435},  // SD8cxG3
+};
+
+uint32_t Socs::get_windows_soc_id(void)
+{
+  DWORD bufsize = 0;
+  int ret = 0;
+  PPPTT pptt;
+  BYTE *buf = NULL;
+  int id = 0;
+
+  buf = (BYTE *)malloc(MAX_FADT_PPTT_SIZE);
+  if (!buf) {
+    return 0;
+  }
+
+  // start to try newer approach, level 1 ID, level 2 ID in PPTT
+  ret = GetSystemFirmwareTable('ACPI', 'TTPP', 0, 0);
+  if (!ret) {
+    m_soc_info = unsupportedSoc;
+    free(buf);
+    return 0;
+  }
+
+  bufsize = ret;
+  ret = GetSystemFirmwareTable('ACPI', 'TTPP', buf, bufsize);
+  if (!ret) {
+    m_soc_info = unsupportedSoc;
+    free(buf);
+    return 0;
+  }
+
+  pptt = (PPPTT)buf;
+  PPROC_TOPOLOGY_NODE ptn = (PPROC_TOPOLOGY_NODE)((BYTE*)&(pptt->HeirarchyNodes[0]) +
+                                                           pptt->HeirarchyNodes[0].Length);
+  uint64_t key = (ptn->IdNode.Level1 << 32) | (ptn->IdNode.Level2);
+
+  auto it = pptt_mappings.find(key);
+  if (it != pptt_mappings.end()) {
+    id = it->second;
+  } else {
+    m_soc_info = unsupportedSoc;
+    id = 0;
+    return 0;
+  }
+
+  free(buf);
+  return id;
+}
+#endif
+
+void Socs::soc_info_init() {
+  if (is_init_done) return;
+  
+#ifdef __ANDROID__
+  uint32_t soc_id = get_android_soc_id();
+#else
+  uint32_t soc_id = get_windows_soc_id();
+#endif
 
   LOG(INFO) << "Soc ID: " << soc_id;
   if (socDetails.find(soc_id) != socDetails.end()) {
     m_soc_info = socDetails.find(soc_id)->second;
+  } else {
+    m_soc_info = unsupportedSoc;
   }
 }
 
@@ -110,8 +196,8 @@ int Socs::soc_num_inits() {
 
 bool Socs::isSnapDragon(const char *manufacturer) {
   soc_info_init();
+#ifdef __ANDROID__
   bool is_qcom = false;
-
   if (strncmp("QUALCOMM", manufacturer, 7) == 0) {
     // This is a test device
     LOG(INFO) << "QTI test device detected";
@@ -146,6 +232,11 @@ bool Socs::isSnapDragon(const char *manufacturer) {
     LOG(INFO) << "vendor: " << vendor;
   }
   return is_qcom;
+#else
+  // Always return true for Windows
+  // TODO: Find a way to determine a QTI device on Windows
+  return true;
+#endif
 }
 
 int Socs::soc_check_feature(bool &useIonBuffers_,
@@ -187,7 +278,11 @@ bool Socs::soc_settings(const char **settings,
 
 bool Socs::needs_rpcmem() {
   soc_info_init();
+#ifdef __ANDROID__
   return m_soc_info.m_needs_rpcmem;
+#else 
+  return false;
+#endif
 }
 
 bool Socs::get_use_dsp_features() {
@@ -211,4 +306,4 @@ void Socs::define_soc(std::vector<uint32_t> &allcores,
   low_latency_cores.assign(m_soc_info.m_low_latency_cores.begin(),
                            m_soc_info.m_low_latency_cores.end());
   maxcores = m_soc_info.m_max_cores;
-}
\ No newline at end of file
+}
diff --git a/mobile_back_qti/cpp/backend_qti/soc_utility.h b/mobile_back_qti/cpp/backend_qti/soc_utility.h
index f54763c..04d2445 100644
--- a/mobile_back_qti/cpp/backend_qti/soc_utility.h
+++ b/mobile_back_qti/cpp/backend_qti/soc_utility.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
@@ -13,8 +13,10 @@ limitations under the License.
 #ifndef MOBILE_APP_OPEN_SOC_UTILITY_H
 #define MOBILE_APP_OPEN_SOC_UTILITY_H
 
+#ifdef __ANDROID__
 #include <EGL/egl.h>
 #include <GLES/gl.h>
+#endif
 #include <stdint.h>
 
 #include <map>
@@ -25,6 +27,7 @@ limitations under the License.
 
 #define DEFAULT_SOC_STR "Default"
 #define UNSUPPORTED_SOC_STR "Unsupported"
+#define UNSUPPORTED_SOC_ID 0
 
 class SocInfo {
  public:
@@ -84,6 +87,12 @@ class SocProperties {
 };
 
 class Socs {
+private: 
+#ifdef __ANDROID__
+  static uint32_t get_android_soc_id(void);
+#else
+  static uint32_t get_windows_soc_id(void);
+#endif
  public:
   static void soc_info_init();
 
diff --git a/mobile_back_qti/cpp/backend_qti/tflite_c.cc b/mobile_back_qti/cpp/backend_qti/tflite_c.cc
index 2a31704..5cb8f2d 100644
--- a/mobile_back_qti/cpp/backend_qti/tflite_c.cc
+++ b/mobile_back_qti/cpp/backend_qti/tflite_c.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -15,16 +15,17 @@ limitations under the License.
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-
+#ifdef __ANDROID__
 #include "tensorflow/core/platform/logging.h"
 #include "tensorflow/lite/c/c_api.h"
 #include "tensorflow/lite/c/common.h"
-#if __ANDROID__
+
 #include "tensorflow/lite/delegates/gpu/delegate.h"
 #include "tensorflow/lite/delegates/nnapi/nnapi_delegate.h"
 #endif
 #include "tflite_c.h"
 
+#ifdef __ANDROID__
 void tflite_backend_delete(mlperf_backend_ptr_t backend_ptr);
 
 struct TFLiteBackendData {
@@ -236,3 +237,36 @@ mlperf_status_t tflite_backend_get_output(mlperf_backend_ptr_t backend_ptr,
   }
   return MLPERF_SUCCESS;
 }
+
+#else
+void tflite_backend_delete(mlperf_backend_ptr_t backend_ptr) {}
+mlperf_backend_ptr_t tflite_backend_create(
+    const char* model_path, mlperf_backend_configuration_t* configs) {
+    return NULL;
+}
+mlperf_status_t tflite_backend_issue_query(mlperf_backend_ptr_t backend_ptr) { return MLPERF_SUCCESS; }
+mlperf_status_t tflite_backend_flush_queries(mlperf_backend_ptr_t backend_ptr) { return MLPERF_SUCCESS; }
+int32_t tflite_backend_get_input_count(mlperf_backend_ptr_t backend_ptr) { return NULL; }
+mlperf_data_t tflite_backend_get_input_type(mlperf_backend_ptr_t backend_ptr,
+    int32_t i) {
+    mlperf_data_t type;
+    return type;
+}
+mlperf_status_t tflite_backend_set_input(mlperf_backend_ptr_t backend_ptr,
+    int32_t batchIndex, int32_t i,
+    void* data) {
+    return MLPERF_SUCCESS;
+}
+int32_t tflite_backend_get_output_count(mlperf_backend_ptr_t backend_ptr) { return NULL; }
+mlperf_data_t tflite_backend_get_output_type(mlperf_backend_ptr_t backend_ptr,
+    int32_t i) {
+    mlperf_data_t type;
+    return type;
+}
+mlperf_status_t tflite_backend_get_output(mlperf_backend_ptr_t backend_ptr,
+    uint32_t batchIndex, int32_t i,
+    void** data) {
+    return MLPERF_SUCCESS;
+}
+
+#endif
diff --git a/mobile_back_qti/cpp/backend_qti/tflite_c.h b/mobile_back_qti/cpp/backend_qti/tflite_c.h
index 8e0cb04..164d7c2 100644
--- a/mobile_back_qti/cpp/backend_qti/tflite_c.h
+++ b/mobile_back_qti/cpp/backend_qti/tflite_c.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2020-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+/* Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
diff --git a/mobile_back_qti/docker/mlperf_snusr/Dockerfile b/mobile_back_qti/docker/mlperf_snusr/Dockerfile
new file mode 100644
index 0000000..48b9284
--- /dev/null
+++ b/mobile_back_qti/docker/mlperf_snusr/Dockerfile
@@ -0,0 +1,94 @@
+# Docker image name: mlperf_snusr_docker
+FROM ubuntu:bionic
+LABEL maintainer="quic_aasheesh@quicinc.com"
+
+# Update the apt configuration and set timezone first or image creation waits
+# for selection of timezone
+RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y && \
+    apt-get install -y --no-install-recommends tzdata
+
+RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y && \
+    apt-get install -y --no-install-recommends \
+       python3 python3-pip libpython3.6-dev python3.6-venv libgl1-mesa-glx libglib2.0 cython3 gcc make curl unzip libc++1-8 \
+       git locales openssh-client ca-certificates tar gzip parallel \
+       zip bzip2 gnupg wget python3-six python3-pip libncurses5 openjdk-11-jdk-headless clang-format-10 golang-1.13-go
+
+RUN pip3 install pip==19.3.1 setuptools==31.0.1
+RUN pip3 install tensorflow-cpu==2.4.4
+RUN pip3 install Pillow setuptools matplotlib tensorflow_hub tf-slim \
+                 absl-py numpy pyyaml
+
+RUN ln -s /usr/bin/python3 /usr/bin/python
+RUN apt-get clean
+
+# Protoc 3.6.1
+RUN curl -OL https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip && \
+    unzip protoc-3.6.1-linux-x86_64.zip -d protoc3 && \
+    mv protoc3/bin/* /usr/local/bin/ && \
+    mv protoc3/include/* /usr/local/include/ && \
+    rm -rf protoc-3.6.1-linux-x86_64.zip protoc3
+
+# Install bazel
+RUN echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
+RUN curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
+RUN apt-get update && \
+    apt-get install -y --allow-unauthenticated bazel-3.7.2
+RUN apt-get clean
+
+# Set timezone to UTC by default
+RUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime
+
+# Use unicode
+RUN locale-gen en_US.UTF-8 || true
+ENV LANG=en_US.UTF-8
+
+ARG android_home=/opt/android/sdk
+
+# Install Android SDK and NDK
+RUN mkdir -p ${android_home} && \
+    wget -O /tmp/sdk_tools.zip https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip && \
+    unzip -q /tmp/sdk_tools.zip -d ${android_home}/cmdline-tools/ && \
+    mv ${android_home}/cmdline-tools/cmdline-tools ${android_home}/cmdline-tools/tools && \
+    rm /tmp/sdk_tools.zip
+
+# Set environment variables
+ENV ANDROID_HOME ${android_home}
+ENV ANDROID_NDK_HOME ${android_ndk_home}
+ENV ADB_INSTALL_TIMEOUT 120
+ENV PATH=${ANDROID_HOME}/emulator:${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/29.0.3:${PATH}
+
+RUN mkdir ~/.android && echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg
+
+# Update SDK manager and install system image, platform and build tools
+RUN yes | sdkmanager --licenses && sdkmanager --update
+RUN yes | sdkmanager \
+    "tools" \
+    "platform-tools" \
+    "extras;android;m2repository" \
+    "extras;google;m2repository" \
+    "extras;google;google_play_services" \
+    "build-tools;29.0.3"
+
+ARG android_version=30
+RUN sdkmanager "platforms;android-${android_version}" "cmake;3.6.4111459"
+
+ARG ndk_version=android-ndk-r21e
+ARG android_ndk_home=/opt/android/${ndk_version}
+
+# Install the NDK
+# Use wget instead of curl to avoid "Error in the HTTP2 framing layer"
+RUN cd /tmp &&  wget -nv https://dl.google.com/android/repository/${ndk_version}-linux-x86_64.zip && \
+    unzip -q /tmp/${ndk_version}-linux-x86_64.zip -d /opt/android && \
+    rm /tmp/${ndk_version}-linux-x86_64.zip
+
+ENV ANDROID_NDK_HOME ${android_ndk_home}
+
+# Add Java format checker and buildifier
+ENV GOBIN /opt/formatters/bin
+RUN mkdir -p ${GOBIN} && curl --output `dirname ${GOBIN}`/google-java-format-1.9-all-deps.jar -L https://github.com/google/google-java-format/releases/download/google-java-format-1.9/google-java-format-1.9-all-deps.jar
+RUN /usr/lib/go-1.13/bin/go get github.com/bazelbuild/buildtools/buildifier
+ENV PATH=${PATH}:${GOBIN}
+
+RUN mkdir -p /home/mlperf && chmod 777 /home/mlperf
+ENV HOME /home/mlperf
+ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64
diff --git a/mobile_back_qti/make/qti_backend.mk b/mobile_back_qti/make/qti_backend.mk
index 8108388..60a62e8 100644
--- a/mobile_back_qti/make/qti_backend.mk
+++ b/mobile_back_qti/make/qti_backend.mk
@@ -1,4 +1,4 @@
-# Copyright 2021-2022 The MLPerf Authors. All Rights Reserved.
+# Copyright 2021-2023 The MLPerf Authors. All Rights Reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -24,18 +24,37 @@ else ifeq ($(WITH_QTI),$(filter $(WITH_QTI),1 2))
   backend_qti_android_files=${BAZEL_LINKS_PREFIX}bin/mobile_back_qti/cpp/backend_qti/libqtibackend.so \
     ${BAZEL_LINKS_PREFIX}bin/flutter/android/commonlibs/lib_arm64/libc++_shared.so \
     ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSNPE.so \
-    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libhta.so \
-    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libsnpe_dsp_domains_v2.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV73Stub.so \
     ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV69Stub.so \
     ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV68Stub.so \
     ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpPrepare.so \
-    ${local_snpe_sdk_root}/lib/dsp/libsnpe_dsp_v66_domains_v2_skel.so \
+    ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV73Skel.so \
     ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV69Skel.so \
     ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV68Skel.so
+  backend_qti_cmdline_files=${BAZEL_LINKS_PREFIX}bin/mobile_back_qti/cpp/backend_qti/libqtibackend.so \
+    ${BAZEL_LINKS_PREFIX}bin/flutter/android/commonlibs/lib_arm64/libc++_shared.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSNPE.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV73Stub.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV69Stub.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpV68Stub.so \
+    ${local_snpe_sdk_root}/lib/aarch64-android-clang8.0/libSnpeHtpPrepare.so \
+    ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV73Skel.so \
+    ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV69Skel.so \
+    ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV68Skel.so \
+    mobile_back_qti/run_accuracy_tests.sh \
+    mobile_back_qti/run_performance_tests.sh
   backend_qti_android_target=//mobile_back_qti/cpp/backend_qti:libqtibackend.so \
                                  //flutter/android/commonlibs:commonlibs
   ifeq ($(WITH_QTI),2)
   	backend_qti_android_target+=--//mobile_back_qti/cpp/backend_qti:with_qti=${WITH_QTI}
   endif
+
+  backend_qti_windows_files=${BAZEL_LINKS_PREFIX}bin/mobile_back_qti/cpp/backend_qti/libqtibackend.dll \
+    ${local_snpe_sdk_root}/lib/aarch64-windows-vc19/SNPE.dll \
+    ${local_snpe_sdk_root}/lib/aarch64-windows-vc19/SnpeHtpV68Stub.dll \
+    ${local_snpe_sdk_root}/lib/dsp/libSnpeHtpV68Skel.so \
+    mobile_back_qti/run_performance_tests.bat \
+    mobile_back_qti/run_accuracy_tests.bat
+  backend_qti_windows_target=//mobile_back_qti/cpp/backend_qti:libqtibackend.dll
   backend_qti_filename=libqtibackend
 endif
diff --git a/mobile_back_qti/run_accuracy_tests.bat b/mobile_back_qti/run_accuracy_tests.bat
new file mode 100644
index 0000000..8e80912
--- /dev/null
+++ b/mobile_back_qti/run_accuracy_tests.bat
@@ -0,0 +1,101 @@
+@echo off
+REM ##########################################################################
+REM # Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+REM #
+REM # Licensed under the Apache License, Version 2.0 (the "License");
+REM # you may not use this file except in compliance with the License.
+REM # You may obtain a copy of the License at
+REM #
+REM #     http://www.apache.org/licenses/LICENSE-2.0
+REM #
+REM # Unless required by applicable law or agreed to in writing, software
+REM # distributed under the License is distributed on an "AS IS" BASIS,
+REM # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+REM # See the License for the specific language governing permissions and
+REM # limitations under the License.
+REM ##########################################################################
+set /A cooldown_period=5
+set /A min_query=1000
+set /A min_duration=60000
+set results_prefix=accuracy_results_
+set results_suffix=.txt
+set test_case_suffix=_accuracy_logs
+set results_file=accuracy_results.txt
+del %results_file%
+set dataset_path=""
+set models_path=""
+
+:loop
+IF NOT "%1"=="" (
+    IF "%1"=="--dataset" (
+        SET dataset_path=%2
+        SHIFT
+    )
+    IF "%1"=="--models" (
+        SET models_path=%2
+        SHIFT
+    )
+    SHIFT
+    GOTO :loop
+)
+
+if %dataset_path%=="" (
+    GOTO :dataset_end
+)
+
+if %models_path%=="" (
+    GOTO :models_end
+)
+
+set test_case=image_classification
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL imagenet --mode=AccuracyOnly --images_directory=%dataset_path%\imagenet\img --offset=1 --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path%\imagenet\imagenet_val_full.txt --model_file=%models_path%\mobilenet_edgetpu_224_1.0_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=object_detection
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL coco --mode=AccuracyOnly --images_directory=%dataset_path%\coco\img --offset=1   --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path%\coco\coco_val_full.pbtxt --model_file=%models_path%\ssd_mobiledet_qat_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. --num_classes=91 > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=image_segmentation
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL ade20k --mode=AccuracyOnly --images_directory=%dataset_path%\ade20k\images --num_class=31 --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --ground_truth_directory=%dataset_path%\ade20k\annotations --model_file=%models_path%\mobile_mosaic_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=language_understanding
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL squad --mode=AccuracyOnly --input_file=%dataset_path%\squad\squad_eval.tfrecord --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path%\squad\squad_groundtruth.tfrecord --model_file=%models_path%\mobilebert_quantized_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=super_resolution
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL SNUSR --mode=AccuracyOnly --images_directory=%dataset_path%\snusr\lr --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --ground_truth_directory=%dataset_path%\snusr\hr --model_file=%models_path%\snusr_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=image_classification_offline
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL imagenet --mode=AccuracyOnly --scenario=Offline --batch_size=12288 --images_directory=%dataset_path%\imagenet\img --offset=1 --output_dir=%test_case%%test_case_suffix% --min_query_count=24576 --min_duration=0 --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path%\imagenet\imagenet_val_full.txt --model_file=%models_path%\mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file%  2>&1
+echo #######%test_case%###### >> %results_file%
+findstr "Accuracy" %use_case_results_file% >> %results_file%
+
+:dataset_end
+echo "set dataset path using --dataset"
+
+:models_end
+echo "set models path using --models"
diff --git a/mobile_back_qti/run_accuracy_tests.sh b/mobile_back_qti/run_accuracy_tests.sh
new file mode 100644
index 0000000..43163f3
--- /dev/null
+++ b/mobile_back_qti/run_accuracy_tests.sh
@@ -0,0 +1,102 @@
+#!/bin/bash
+##########################################################################
+# Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+##########################################################################
+
+export cooldown_period=5
+export min_query=1000
+export min_duration=60000
+export results_prefix=accuracy_results_
+export results_suffix=.txt
+export test_case_suffix=_accuracy_logs
+export results_file=accuracy_results.txt
+rm $results_file
+export dataset_path=""
+export models_path=""
+export LD_LIBRARY_PATH=.
+
+while [[ $# -gt 0 ]]
+do
+  if [[ "$1" == "--dataset" ]]
+  then
+    export dataset_path=$2
+    shift 1
+  fi
+  if [[ "$1" == "--models" ]]
+  then
+    export models_path=$2
+    shift 1
+  fi
+  shift 1
+done
+
+if [[ "$dataset_path" == "" ]]
+then
+    echo "set dataset path using --dataset"
+    exit 1
+fi
+
+if [[ "$models_path" == "" ]]
+then
+    echo "set models path using --models"
+    exit 1
+fi
+
+export test_case=image_classification
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL imagenet --mode=AccuracyOnly --images_directory=$dataset_path/imagenet/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file=$dataset_path/imagenet/imagenet_val_full.txt --model_file=$models_path/mobilenet_edgetpu_224_1.0_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=object_detection
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL coco --mode=AccuracyOnly --images_directory=$dataset_path/coco/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file=$dataset_path/coco/coco_val_full.pbtxt --model_file=$models_path/ssd_mobiledet_qat_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. --num_classes=91 > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=image_segmentation
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL ade20k --mode=AccuracyOnly --images_directory=$dataset_path/ade20k/images --num_class=31 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --ground_truth_directory=$dataset_path/ade20k/annotations --model_file=$models_path/mobile_mosaic_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=language_understanding
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL squad --mode=AccuracyOnly --input_file=$dataset_path/squad/squad_eval.tfrecord --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file=$dataset_path/squad/squad_groundtruth.tfrecord --model_file=$models_path/mobilebert_quantized_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=super_resolution
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL SNUSR --mode=AccuracyOnly --images_directory=$dataset_path/snusr/lr --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --ground_truth_directory=$dataset_path/snusr/hr --model_file=$models_path/snusr_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=image_classification_offline
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL imagenet --mode=AccuracyOnly --scenario=Offline --batch_size=12288 --images_directory=$dataset_path/imagenet/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=24576 --min_duration=0 --single_stream_expected_latency_ns=1000000 --groundtruth_file=$dataset_path/imagenet/imagenet_val_full.txt --model_file=$models_path/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Accuracy" $use_case_results_file >> $results_file
diff --git a/mobile_back_qti/run_performance_tests.bat b/mobile_back_qti/run_performance_tests.bat
new file mode 100644
index 0000000..694344c
--- /dev/null
+++ b/mobile_back_qti/run_performance_tests.bat
@@ -0,0 +1,113 @@
+@echo off
+REM ##########################################################################
+REM # Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+REM #
+REM # Licensed under the Apache License, Version 2.0 (the "License");
+REM # you may not use this file except in compliance with the License.
+REM # You may obtain a copy of the License at
+REM #
+REM #     http://www.apache.org/licenses/LICENSE-2.0
+REM #
+REM # Unless required by applicable law or agreed to in writing, software
+REM # distributed under the License is distributed on an "AS IS" BASIS,
+REM # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+REM # See the License for the specific language governing permissions and
+REM # limitations under the License.
+REM ##########################################################################
+
+set /A cooldown_period=300
+set /A min_query=1000
+set /A min_duration=60000
+set results_prefix=performance_results_
+set results_suffix=.txt
+set test_case_suffix=_performance_logs
+set results_file=performance_results.txt
+del %results_file%
+set dataset_path=""
+set models_path=""
+
+:loop
+IF NOT "%1"=="" (
+    IF "%1"=="--dataset" (
+        SET dataset_path=%2
+        SHIFT
+    )
+    IF "%1"=="--models" (
+        SET models_path=%2
+        SHIFT
+    )
+    SHIFT
+    GOTO :loop
+)
+
+if %dataset_path%=="" (
+    GOTO :dataset_end
+)
+
+if %models_path%=="" (
+    GOTO :models_end
+)
+
+set test_case=image_classification
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL imagenet --mode=PerformanceOnly --images_directory=%dataset_path%\imagenet\img --offset=1 --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path% --model_file=%models_path%\mobilenet_edgetpu_224_1.0_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"90th percentile latency (ns)" %use_case_results_file% >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"QPS w/o loadgen overhead" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=object_detection
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL coco --mode=PerformanceOnly --images_directory=%dataset_path%\coco\img --offset=1   --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path% --model_file=%models_path%\ssd_mobiledet_qat_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. --num_classes=91 > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"90th percentile latency (ns)" %use_case_results_file% >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"QPS w/o loadgen overhead" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=image_segmentation
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL ade20k --mode=PerformanceOnly --images_directory=%dataset_path%\ade20k\images --num_class=31 --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --ground_truth_directory= --model_file=%models_path%\mobile_mosaic_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"90th percentile latency (ns)" %use_case_results_file% >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"QPS w/o loadgen overhead" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=language_understanding
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL squad --mode=PerformanceOnly --input_file=%dataset_path%\squad\squad_eval_mini.tfrecord --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --groundtruth_file= --model_file=%models_path%\mobilebert_quantized_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"90th percentile latency (ns)" %use_case_results_file% >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"QPS w/o loadgen overhead" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=super_resolution
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL SNUSR --mode=PerformanceOnly --images_directory=%dataset_path%\snusr\lr --output_dir=%test_case%%test_case_suffix% --min_query_count=%min_query% --min_duration=%min_duration% --single_stream_expected_latency_ns=1000000 --ground_truth_directory=. --model_file=%models_path%\snusr_htp.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"90th percentile latency (ns)" %use_case_results_file% >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"QPS w/o loadgen overhead" %use_case_results_file% >> %results_file%
+timeout /t %cooldown_period% /nobreak
+
+set test_case=image_classification_offline
+mkdir %test_case%%test_case_suffix%
+set use_case_results_file=%results_prefix%%test_case%%results_suffix%
+.\main.exe EXTERNAL imagenet --mode=PerformanceOnly --scenario=Offline --batch_size=12288 --images_directory=%dataset_path%\imagenet\img --offset=1 --output_dir=%test_case%%test_case_suffix% --min_query_count=24576 --min_duration=0 --single_stream_expected_latency_ns=1000000 --groundtruth_file=%dataset_path% --model_file=%models_path%\mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc --lib_path=libqtibackend.dll --native_lib_path=. > %use_case_results_file% 2>&1
+echo #######%test_case%###### >> %results_file%
+findstr /C:"Result is" %use_case_results_file% >> %results_file%
+findstr /C:"Samples per second" %use_case_results_file% >> %results_file%
+
+:dataset_end
+echo "set dataset path using --dataset"
+
+:models_end
+echo "set models path using --models"
diff --git a/mobile_back_qti/run_performance_tests.sh b/mobile_back_qti/run_performance_tests.sh
new file mode 100644
index 0000000..20c70e2
--- /dev/null
+++ b/mobile_back_qti/run_performance_tests.sh
@@ -0,0 +1,114 @@
+#!/bin/bash
+
+##########################################################################
+# Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+##########################################################################
+
+export cooldown_period=300
+export min_query=1000
+export min_duration=60000
+export results_prefix=performance_results_
+export results_suffix=.txt
+export test_case_suffix=_performance_logs
+export results_file=performance_results.txt
+rm $results_file
+export dataset_path=""
+export models_path=""
+export LD_LIBRARY_PATH=.
+
+while [[ $# -gt 0 ]] 
+do
+  if [[ "$1" == "--dataset" ]]
+  then
+    export dataset_path=$2
+    shift 1
+  fi
+  if [[ "$1" == "--models" ]]
+  then
+    export models_path=$2
+    shift 1
+  fi
+  shift 1
+done
+
+if [[ "$dataset_path" == "" ]]
+then
+    echo "set dataset path using --dataset"
+    exit 1
+fi
+
+if [[ "$models_path" == "" ]]
+then
+    echo "set models path using --models"
+    exit 1
+fi
+
+export test_case=image_classification
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL imagenet --mode=PerformanceOnly --images_directory=$dataset_path/imagenet/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file="" --model_file=$models_path/mobilenet_edgetpu_224_1.0_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "90th percentile latency (ns)" $use_case_results_file >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "QPS w/o loadgen overhead" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=object_detection
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL coco --mode=PerformanceOnly --images_directory=$dataset_path/coco/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file="" --model_file=$models_path/ssd_mobiledet_qat_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. --num_classes=91 > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "90th percentile latency (ns)" $use_case_results_file >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "QPS w/o loadgen overhead" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=image_segmentation
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL ade20k --mode=PerformanceOnly --images_directory=$dataset_path/ade20k/images --num_class=31 --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --ground_truth_directory= --model_file=$models_path/mobile_mosaic_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "90th percentile latency (ns)" $use_case_results_file >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "QPS w/o loadgen overhead" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=language_understanding
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL squad --mode=PerformanceOnly --input_file=$dataset_path/squad/squad_eval_mini.tfrecord --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --groundtruth_file= --model_file=$models_path/mobilebert_quantized_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "90th percentile latency (ns)" $use_case_results_file >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "QPS w/o loadgen overhead" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=super_resolution
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL SNUSR --mode=PerformanceOnly --images_directory=$dataset_path/snusr/lr --output_dir=$test_case$test_case_suffix --min_query_count=$min_query --min_duration=$min_duration --single_stream_expected_latency_ns=1000000 --ground_truth_directory= --model_file=$models_path/snusr_htp.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "90th percentile latency (ns)" $use_case_results_file >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "QPS w/o loadgen overhead" $use_case_results_file >> $results_file
+sleep $cooldown_period
+
+export test_case=image_classification_offline
+mkdir -p $test_case$test_case_suffix
+export use_case_results_file=$results_prefix$test_case$results_suffix
+./main EXTERNAL imagenet --mode=PerformanceOnly --scenario=Offline --batch_size=12288 --images_directory=$dataset_path/imagenet/img --offset=1 --output_dir=$test_case$test_case_suffix --min_query_count=24576 --min_duration=0 --single_stream_expected_latency_ns=1000000 --groundtruth_file= --model_file=$models_path/mobilenet_edgetpu_224_1.0_htp_batched_sd8pg1.dlc --lib_path=libqtibackend.so --native_lib_path=. > $use_case_results_file 2>&1
+echo "#######$test_case######" >> $results_file
+grep "Result is" $use_case_results_file >> $results_file
+grep "Samples per second" $use_case_results_file >> $results_file
diff --git a/mobile_back_qti/variables.bzl b/mobile_back_qti/variables.bzl
index 5f3b988..f82557a 100644
--- a/mobile_back_qti/variables.bzl
+++ b/mobile_back_qti/variables.bzl
@@ -1,13 +1,39 @@
+"""Copyright (c) 2020-2023 Qualcomm Innovation Center, Inc. All rights reserved."""
+
+""" Licensed under the Apache License, Version 2.0 (the "License");"""
+""" you may not use this file except in compliance with the License."""
+""" You may obtain a copy of the License at                         """
+
+"""     http://www.apache.org/licenses/LICENSE-2.0                  """
+
+""" Unless required by applicable law or agreed to in writing, software """
+""" distributed under the License is distributed on an "AS IS" BASIS,   """
+""" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. """
+""" See the License for the specific language governing permissions and """
+""" limitations under the License. """
+
 """Find SNPE folder and pass it to bazel build config"""
 
 def _impl(repository_ctx):
     if "windows" in repository_ctx.os.name:
-        fail("building with SNPE on Windows is not supported")
-
-    found = repository_ctx.execute(["find", repository_ctx.attr.workspace_dir + "/mobile_back_qti/", "-maxdepth", "1", "-name", "snpe-*", "-type", "d", "-print", "-quit"])
-    if found.return_code != 0 or found.stdout == "" or found.stdout == "\n":
-        fail("snpe folder is not found in the repo")
-    filepath = found.stdout[:-1]
+        print (repository_ctx.attr.workspace_dir + "/mobile_back_qti/")
+        found = repository_ctx.execute(["ls",repository_ctx.attr.workspace_dir + "/mobile_back_qti"])
+        listoffiles = found.stdout
+        if found.return_code != 0 or found.stdout == "" or found.stdout == "\n":
+            fail("snpe folder is not found in the repo: " + found.stderr)
+        filelist = found.stdout.split("\n")
+        filepath = ""
+        for x in filelist:
+            if x.find("snpe-") == 0:
+                filepath=x
+                break
+        if filepath=="":
+            fail("snpe folder is not found in the repo")
+    else:
+        found = repository_ctx.execute(["find", repository_ctx.attr.workspace_dir + "/mobile_back_qti/", "-maxdepth", "1", "-name", "snpe-*", "-type", "d", "-print", "-quit"])
+        if found.return_code != 0 or found.stdout == "" or found.stdout == "\n":
+            fail("snpe folder is not found in the repo")
+        filepath = found.stdout[:-1]
 
     sdk_version = filepath[found.stdout.rfind("/") + 1:]
     print("Update SNPE version: " + sdk_version)  # buildifier: disable=print
diff --git a/patches/TF-Changes-to-add-windows_arm64.patch b/patches/TF-Changes-to-add-windows_arm64.patch
new file mode 100644
index 0000000..ccc520c
--- /dev/null
+++ b/patches/TF-Changes-to-add-windows_arm64.patch
@@ -0,0 +1,1183 @@
+From 73810f11bd98f3f7dd59b67e769ab0e8ecebdf71 Mon Sep 17 00:00:00 2001
+From: Mohit Mundhra <quic_mmundhra@quicinc.com>
+Date: Fri, 2 Dec 2022 11:50:18 +0530
+Subject: [PATCH] Changes to compile MLPerf cmd line app
+
+---
+ tensorflow/BUILD                              |   4 +-
+ tensorflow/core/BUILD                         |  10 +-
+ tensorflow/core/lib/jpeg/BUILD                |   2 +-
+ tensorflow/core/platform/BUILD                |   2 +-
+ .../core/platform/default/build_config.bzl    |   6 +-
+ tensorflow/core/platform/default/env_time.cc  |   7 +-
+ tensorflow/core/platform/default/port.cc      |   2 +-
+ .../core/platform/profile_utils/cpu_utils.h   |   2 +-
+ tensorflow/lite/BUILD                         |   4 +-
+ tensorflow/lite/build_def.bzl                 |  11 +-
+ tensorflow/lite/delegates/nnapi/BUILD         |   6 +-
+ tensorflow/lite/kernels/internal/BUILD        |  12 +-
+ tensorflow/lite/special_rules.bzl             |   4 +-
+ tensorflow/tensorflow.bzl                     |  54 ++++----
+ tensorflow/tools/proto_text/BUILD             |   2 +-
+ tensorflow/workspace2.bzl                     |   4 +
+ third_party/clog/clog.BUILD                   |   6 +
+ third_party/double_conversion.BUILD           |   6 +
+ ..._conversion_change_for_windows_arm64.patch |  25 ++++
+ third_party/farmhash/farmhash.BUILD           |   2 +-
+ third_party/gif_fix_strtok_r.patch            |  12 ++
+ third_party/jpeg/jpeg.BUILD                   |   9 ++
+ third_party/mkl/build_defs.bzl                |   4 +-
+ ...threadpool_changes_for_windows_arm64.patch |  53 ++++++++
+ third_party/snappy.BUILD                      |  10 +-
+ .../nsync_changes_for_windows_arm64.patch     | 118 ++++++++++++++++++
+ ...xnnpack_changes-to-add-windows_arm64.patch |  89 +++++++++++++
+ third_party/zlib.BUILD                        |   2 +-
+ 28 files changed, 393 insertions(+), 75 deletions(-)
+ create mode 100644 third_party/double_conversion_change_for_windows_arm64.patch
+ create mode 100644 third_party/pthreadpool_changes_for_windows_arm64.patch
+ create mode 100644 third_party/systemlibs/nsync_changes_for_windows_arm64.patch
+ create mode 100644 third_party/xnnpack_changes-to-add-windows_arm64.patch
+
+diff --git a/tensorflow/BUILD b/tensorflow/BUILD
+index fcaecb415a8..ac5a84a8b07 100644
+--- a/tensorflow/BUILD
++++ b/tensorflow/BUILD
+@@ -242,7 +242,7 @@ config_setting(
+ )
+ 
+ config_setting(
+-    name = "windows",
++    name = "windows_arm64",
+     # Internal builds query the target OS.
+     flag_values = if_google(
+         {"//tools/cpp:cc_target_os": "windows"},
+@@ -250,7 +250,7 @@ config_setting(
+     ),
+     # OSS builds query the CPU type.
+     values = if_oss(
+-        {"cpu": "x64_windows"},
++        {"cpu": "x64_arm64_windows"},
+         {},
+     ),
+     visibility = ["//visibility:public"],
+diff --git a/tensorflow/core/BUILD b/tensorflow/core/BUILD
+index 0e849d54ee3..e633ddc28ea 100644
+--- a/tensorflow/core/BUILD
++++ b/tensorflow/core/BUILD
+@@ -394,7 +394,7 @@ cc_library(
+     ],
+     copts = tf_copts(),
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     visibility = ["//visibility:public"],
+@@ -1280,7 +1280,7 @@ cc_library(
+     copts = tf_copts(),
+     linkopts = select({
+         "//tensorflow:freebsd": [],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//tensorflow:android": [],
+         "//conditions:default": [
+             "-ldl",
+@@ -1305,7 +1305,7 @@ cc_library(
+     copts = tf_copts(),
+     linkopts = select({
+         "//tensorflow:freebsd": [],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//tensorflow:android": [],
+         "//conditions:default": [
+             "-ldl",
+@@ -1516,7 +1516,7 @@ cc_library(
+     copts = tf_copts(),
+     linkopts = select({
+         "//tensorflow:freebsd": [],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": [
+             "-ldl",
+         ],
+@@ -1651,7 +1651,7 @@ tf_cuda_library(
+     copts = tf_copts(),
+     linkopts = select({
+         "//tensorflow:freebsd": ["-lm"],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": [
+             "-ldl",
+             "-lm",
+diff --git a/tensorflow/core/lib/jpeg/BUILD b/tensorflow/core/lib/jpeg/BUILD
+index e1b249cffc4..7426cb687a1 100644
+--- a/tensorflow/core/lib/jpeg/BUILD
++++ b/tensorflow/core/lib/jpeg/BUILD
+@@ -33,7 +33,7 @@ cc_library(
+     copts = tf_copts(),
+     linkopts = select({
+         "//tensorflow:freebsd": [],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-ldl"],
+     }),
+     deps = [
+diff --git a/tensorflow/core/platform/BUILD b/tensorflow/core/platform/BUILD
+index c9d6d8779c4..0a16cc0f716 100644
+--- a/tensorflow/core/platform/BUILD
++++ b/tensorflow/core/platform/BUILD
+@@ -1110,7 +1110,7 @@ cc_library(
+     srcs = ["test_main.cc"],
+     copts = tf_copts(),
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     deps = [
+diff --git a/tensorflow/core/platform/default/build_config.bzl b/tensorflow/core/platform/default/build_config.bzl
+index aac2a269e33..c51bba481f3 100644
+--- a/tensorflow/core/platform/default/build_config.bzl
++++ b/tensorflow/core/platform/default/build_config.bzl
+@@ -572,7 +572,7 @@ def tf_additional_lib_hdrs():
+         "//tensorflow/core/platform/default:tracing_impl.h",
+         "//tensorflow/core/platform/default:unbounded_work_queue.h",
+     ] + select({
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "//tensorflow/core/platform/windows:intrinsics_port.h",
+             "//tensorflow/core/platform/windows:stacktrace.h",
+             "//tensorflow/core/platform/windows:subprocess.h",
+@@ -737,11 +737,11 @@ def tf_protobuf_compiler_deps():
+ 
+ def tf_windows_aware_platform_deps(name):
+     return select({
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "//tensorflow/core/platform/windows:" + name,
+         ],
+         "//conditions:default": [
+-            "//tensorflow/core/platform/default:" + name,
++            "//tensorflow/core/platform/windows:" + name,
+         ],
+     })
+ 
+diff --git a/tensorflow/core/platform/default/env_time.cc b/tensorflow/core/platform/default/env_time.cc
+index 8618fe84781..2d6df153ba3 100644
+--- a/tensorflow/core/platform/default/env_time.cc
++++ b/tensorflow/core/platform/default/env_time.cc
+@@ -13,7 +13,7 @@ See the License for the specific language governing permissions and
+ limitations under the License.
+ ==============================================================================*/
+ 
+-#include <sys/time.h>
++//#include <sys/time.h>
+ #include <time.h>
+ 
+ #include "tensorflow/core/platform/env_time.h"
+@@ -24,8 +24,9 @@ namespace tensorflow {
+ uint64 EnvTime::NowNanos() {
+   struct timespec ts;
+   clock_gettime(CLOCK_REALTIME, &ts);
+-  return (static_cast<uint64>(ts.tv_sec) * kSecondsToNanos +
+-          static_cast<uint64>(ts.tv_nsec));
++  //return (static_cast<uint64>(ts.tv_sec) * kSecondsToNanos +
++  //        static_cast<uint64>(ts.tv_nsec));
++  return 0;
+ }
+ 
+ }  // namespace tensorflow
+diff --git a/tensorflow/core/platform/default/port.cc b/tensorflow/core/platform/default/port.cc
+index ae385cebda4..9c0267a5ded 100644
+--- a/tensorflow/core/platform/default/port.cc
++++ b/tensorflow/core/platform/default/port.cc
+@@ -26,7 +26,7 @@ limitations under the License.
+ #include <sched.h>
+ #include <sys/sysinfo.h>
+ #else
+-#include <sys/syscall.h>
++//#include <sys/syscall.h>
+ #endif
+ 
+ #if (__x86_64__ || __i386__)
+diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.h b/tensorflow/core/platform/profile_utils/cpu_utils.h
+index 2586eefceac..639e44ee8af 100644
+--- a/tensorflow/core/platform/profile_utils/cpu_utils.h
++++ b/tensorflow/core/platform/profile_utils/cpu_utils.h
+@@ -60,7 +60,7 @@ class CpuUtils {
+     return GetCpuUtilsHelperSingletonInstance().GetCurrentClockCycle();
+ // ----------------------------------------------------------------
+ #elif defined(_WIN32)
+-    return __rdtsc();
++    return 0; // __rdtsc();
+ // ----------------------------------------------------------------
+ #elif defined(__x86_64__) || defined(__amd64__)
+     uint64_t high, low;
+diff --git a/tensorflow/lite/BUILD b/tensorflow/lite/BUILD
+index 198f949b341..cca00121a39 100644
+--- a/tensorflow/lite/BUILD
++++ b/tensorflow/lite/BUILD
+@@ -279,7 +279,7 @@ cc_library(
+         "//tensorflow:android": [
+             "mmap_allocation.cc",
+         ],
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "mmap_allocation_disabled.cc",
+         ],
+         "//conditions:default": [
+@@ -1184,7 +1184,7 @@ tflite_cc_shared_object(
+         "//tensorflow:macos": [
+             "-Wl,-exported_symbols_list,$(location //tensorflow/lite:tflite_exported_symbols.lds)",
+         ],
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": [
+             "-Wl,-z,defs",
+             "-Wl,--version-script,$(location //tensorflow/lite:tflite_version_script.lds)",
+diff --git a/tensorflow/lite/build_def.bzl b/tensorflow/lite/build_def.bzl
+index 4c8e946f607..fe718417187 100644
+--- a/tensorflow/lite/build_def.bzl
++++ b/tensorflow/lite/build_def.bzl
+@@ -23,12 +23,11 @@ def tflite_copts():
+         clean_dep("//tensorflow:ios_x86_64"): [
+             "-msse4.1",
+         ],
+-        clean_dep("//tensorflow:windows"): [
++        clean_dep("//tensorflow:windows_arm64"): [
+             "/DTFL_COMPILE_LIBRARY",
+             "/wd4018",  # -Wno-sign-compare
+         ],
+         "//conditions:default": [
+-            "-Wno-sign-compare",
+         ],
+     }) + select({
+         clean_dep("//tensorflow:optimized"): ["-O3"],
+@@ -40,7 +39,7 @@ def tflite_copts():
+         ],
+         "//conditions:default": [],
+     }) + select({
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "-fno-exceptions",  # Exceptions are unused in TFLite.
+         ],
+@@ -54,7 +53,7 @@ def tflite_copts_warnings():
+     # TODO(b/155906820): Include with `tflite_copts()` after validating clients.
+ 
+     return select({
+-        clean_dep("//tensorflow:windows"): [
++        clean_dep("//tensorflow:windows_arm64"): [
+             # We run into trouble on Windows toolchains with warning flags,
+             # as mentioned in the comments below on each flag.
+             # We could be more aggressive in enabling supported warnings on each
+@@ -170,7 +169,7 @@ def tflite_jni_binary(
+             "-Wl,-exported_symbols_list,$(location {})".format(exported_symbols),
+             "-Wl,-install_name,@rpath/" + name,
+         ],
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "-Wl,--version-script,$(location {})".format(linkscript),
+             "-Wl,-soname," + name,
+@@ -433,7 +432,7 @@ def tflite_custom_cc_library(
+         ],
+         copts = tflite_copts(),
+         linkopts = select({
+-            "//tensorflow:windows": [],
++            "//tensorflow:windows_arm64": [],
+             "//conditions:default": ["-lm", "-ldl"],
+         }),
+         deps = depset([
+diff --git a/tensorflow/lite/delegates/nnapi/BUILD b/tensorflow/lite/delegates/nnapi/BUILD
+index aeff8a9996d..ca1d8f1594f 100644
+--- a/tensorflow/lite/delegates/nnapi/BUILD
++++ b/tensorflow/lite/delegates/nnapi/BUILD
+@@ -16,7 +16,7 @@ cc_library(
+         "//tensorflow:ios": [
+             "nnapi_delegate_disabled.cc",
+         ],
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "nnapi_delegate_disabled.cc",
+         ],
+         "//conditions:default": [
+@@ -76,7 +76,7 @@ cc_library(
+         "//tensorflow:ios": [
+             "nnapi_delegate_disabled.cc",
+         ],
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "nnapi_delegate_disabled.cc",
+         ],
+         "//conditions:default": [
+@@ -138,7 +138,7 @@ cc_library(
+         "//tensorflow:ios": [
+             "-DNNAPI_DELEGATE_DISABLED",
+         ],
+-        "//tensorflow:windows": [
++        "//tensorflow:windows_arm64": [
+             "-DNNAPI_DELEGATE_DISABLED",
+         ],
+         "//conditions:default": [],
+diff --git a/tensorflow/lite/kernels/internal/BUILD b/tensorflow/lite/kernels/internal/BUILD
+index 3ee17f59d26..1973babd37c 100644
+--- a/tensorflow/lite/kernels/internal/BUILD
++++ b/tensorflow/lite/kernels/internal/BUILD
+@@ -206,7 +206,7 @@ config_setting(
+ )
+ 
+ config_setting(
+-    name = "windows",
++    name = "windows_arm64",
+     values = {
+         "cpu": "x64_windows",
+     },
+@@ -233,7 +233,7 @@ selects.config_setting_group(
+         ":darwin",
+         ":darwin_x86_64",
+         ":freebsd",
+-        ":windows",
++        ":windows_arm64",
+     ],
+ )
+ 
+@@ -401,7 +401,7 @@ cc_library(
+     compatible_with = get_compatible_with_portable(),
+     copts = tflite_copts(),
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     deps = [
+@@ -434,7 +434,7 @@ cc_library(
+         "TFLITE_SINGLE_ROUNDING=1",
+     ],
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     deps = [
+@@ -882,7 +882,7 @@ cc_library(
+     hdrs = ["test_util.h"],
+     copts = tflite_copts(),
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     deps = [
+@@ -1106,7 +1106,7 @@ cc_test(
+     name = "log_quantized_test",
+     srcs = ["log_quantized_test.cc"],
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     deps = [
+diff --git a/tensorflow/lite/special_rules.bzl b/tensorflow/lite/special_rules.bzl
+index 244b7c50d3e..b19eedf401f 100644
+--- a/tensorflow/lite/special_rules.bzl
++++ b/tensorflow/lite/special_rules.bzl
+@@ -85,9 +85,9 @@ def if_nnapi(supported, not_supported = [], supported_android = None):
+         clean_dep("//tensorflow:emscripten"): not_supported,
+         clean_dep("//tensorflow:ios"): not_supported,
+         clean_dep("//tensorflow:macos"): not_supported,
+-        clean_dep("//tensorflow:windows"): not_supported,
++        clean_dep("//tensorflow:windows_arm64"): not_supported,
+         clean_dep("//tensorflow:android"): supported_android,
+-        "//conditions:default": supported,
++        "//conditions:default": not_supported,
+     })
+ 
+ def tflite_hexagon_mobile_test(name):
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index 61490437ba4..51a09955feb 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -258,13 +258,13 @@ def if_not_mobile_or_arm_or_lgpl_restricted(a):
+ 
+ def if_not_windows(a):
+     return select({
+-        clean_dep("//tensorflow:windows"): [],
+-        "//conditions:default": a,
++        clean_dep("//tensorflow:windows_arm64"): [],
++        "//conditions:default": [],
+     })
+ 
+ def if_windows(a, otherwise = []):
+     return select({
+-        clean_dep("//tensorflow:windows"): a,
++        clean_dep("//tensorflow:windows_arm64"): a,
+         "//conditions:default": otherwise,
+     })
+ 
+@@ -289,7 +289,7 @@ def if_override_eigen_strong_inline(a):
+ def if_nccl(if_true, if_false = []):
+     return select({
+         "//tensorflow:no_nccl_support": if_false,
+-        "//tensorflow:windows": if_false,
++        "//tensorflow:windows_arm64": if_false,
+         "//conditions:default": if_true,
+     })
+ 
+@@ -402,7 +402,7 @@ def tf_copts(
+             clean_dep("//tensorflow:android"): android_copts,
+             clean_dep("//tensorflow:emscripten"): [],
+             clean_dep("//tensorflow:macos"): [],
+-            clean_dep("//tensorflow:windows"): get_win_copts(is_external),
++            clean_dep("//tensorflow:windows_arm64"): get_win_copts(is_external),
+             clean_dep("//tensorflow:ios"): [],
+             clean_dep("//tensorflow:no_lgpl_deps"): ["-D__TENSORFLOW_NO_LGPL_DEPS__", "-pthread"],
+             "//conditions:default": ["-pthread"],
+@@ -526,7 +526,7 @@ def _rpath_linkopts(name):
+             "-Wl,%s" % (_make_search_paths("@loader_path", levels_to_root),),
+             "-Wl,-rename_section,__TEXT,text_env,__TEXT,__text",
+         ],
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "-Wl,%s" % (_make_search_paths("$$ORIGIN", levels_to_root),),
+         ],
+@@ -546,7 +546,7 @@ def _rpath_user_link_flags(name):
+             "-Wl,%s" % (_make_search_paths("@loader_path", levels_to_root),),
+             "-Wl,-rename_section,__TEXT,text_env,__TEXT,__text",
+         ],
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "-Wl,%s" % (_make_search_paths("$ORIGIN", levels_to_root),),
+         ],
+@@ -592,7 +592,7 @@ def tf_binary_pybind_deps():
+                 "//tensorflow/python:_pywrap_tensorflow_internal_macos",
+             ),
+         ],
+-        clean_dep("//tensorflow:windows"): [
++        clean_dep("//tensorflow:windows_arm64"): [
+             clean_dep(
+                 "//tensorflow/python:_pywrap_tensorflow_internal_windows",
+             ),
+@@ -613,7 +613,7 @@ def tf_shared_library_deps():
+             clean_dep("//tensorflow:libtensorflow.%s.dylib" % VERSION),
+         ],
+         clean_dep("//tensorflow:macos"): [],
+-        clean_dep("//tensorflow:windows"): [
++        clean_dep("//tensorflow:windows_arm64"): [
+             clean_dep("//tensorflow:tensorflow.dll"),
+             clean_dep("//tensorflow:tensorflow_dll_import_lib"),
+         ],
+@@ -732,7 +732,7 @@ def tf_cc_shared_object(
+                 clean_dep("//tensorflow:macos"): [
+                     "-Wl,-install_name,@rpath/" + soname,
+                 ],
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-Wl,-soname," + soname,
+                 ],
+@@ -746,7 +746,7 @@ def tf_cc_shared_object(
+         native.filegroup(
+             name = name,
+             srcs = select({
+-                clean_dep("//tensorflow:windows"): [":%s.dll" % (name)],
++                clean_dep("//tensorflow:windows_arm64"): [":%s.dll" % (name)],
+                 clean_dep("//tensorflow:macos"): [":lib%s%s.dylib" % (name, longsuffix)],
+                 "//conditions:default": [":lib%s.so%s" % (name, longsuffix)],
+             }),
+@@ -831,7 +831,7 @@ def tf_cc_shared_library(
+                 clean_dep("//tensorflow:macos"): [
+                     "-Wl,-install_name,@rpath/" + soname,
+                 ],
+-                clean_dep("//tensorflow:windows"): [
++                clean_dep("//tensorflow:windows_arm64"): [
+                     "/DEF:$(location :%s)" % win_def_file,
+                     "/ignore:4070",
+                 ] if win_def_file else [],
+@@ -874,7 +874,7 @@ def tf_cc_shared_library(
+         native.filegroup(
+             name = name,
+             srcs = select({
+-                clean_dep("//tensorflow:windows"): [":%s.dll" % (name)],
++                clean_dep("//tensorflow:windows_arm64"): [":%s.dll" % (name)],
+                 clean_dep("//tensorflow:macos"): [":lib%s%s.dylib" % (name, longsuffix)],
+                 "//conditions:default": [":lib%s.so%s" % (name, longsuffix)],
+             }),
+@@ -931,7 +931,7 @@ def tf_cc_binary(
+         native.filegroup(
+             name = name,
+             srcs = select({
+-                "//tensorflow:windows": [":%s.dll" % name],
++                "//tensorflow:windows_arm64": [":%s.dll" % name],
+                 "//tensorflow:macos": [":lib%s.dylib" % name],
+                 "//conditions:default": [":lib%s.so" % name],
+             }),
+@@ -955,7 +955,7 @@ def tf_native_cc_binary(
+         name = name,
+         copts = copts,
+         linkopts = select({
+-            clean_dep("//tensorflow:windows"): [],
++            clean_dep("//tensorflow:windows_arm64"): [],
+             clean_dep("//tensorflow:macos"): [
+                 "-lm",
+             ],
+@@ -995,7 +995,7 @@ def tf_native_cc_shared_library(
+         data = data,
+         shared_lib_name = name,
+         user_link_flags = select({
+-            clean_dep("//tensorflow:windows"): [],
++            clean_dep("//tensorflow:windows_arm64"): [],
+             clean_dep("//tensorflow:macos"): [
+                 "-lm",
+             ],
+@@ -1345,7 +1345,7 @@ def tf_cc_test(
+             clean_dep("//tensorflow:android"): [
+                 "-pie",
+             ],
+-            clean_dep("//tensorflow:windows"): [],
++            clean_dep("//tensorflow:windows_arm64"): [],
+             clean_dep("//tensorflow:macos"): [
+                 "-lm",
+             ],
+@@ -1565,7 +1565,7 @@ def tf_cc_test_mkl(
+                 clean_dep("//tensorflow:android"): [
+                     "-pie",
+                 ],
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-lpthread",
+                     "-lm",
+@@ -2154,7 +2154,7 @@ def tf_custom_op_library(name, srcs = [], gpu_srcs = [], deps = [], linkopts = [
+             "//conditions:default": [
+                 "-lm",
+             ],
+-            clean_dep("//tensorflow:windows"): [],
++            clean_dep("//tensorflow:windows_arm64"): [],
+             clean_dep("//tensorflow:macos"): [],
+         }),
+         **kwargs
+@@ -2293,14 +2293,14 @@ def pywrap_tensorflow_macro(
+             "-Wl,-w",
+             "-Wl,-exported_symbols_list,$(location %s.lds)" % vscriptname,
+         ],
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "-Wl,--version-script",
+             "$(location %s.lds)" % vscriptname,
+         ],
+     })
+     extra_deps += select({
+-        clean_dep("//tensorflow:windows"): [],
++        clean_dep("//tensorflow:windows_arm64"): [],
+         "//conditions:default": [
+             "%s.lds" % vscriptname,
+         ],
+@@ -2378,7 +2378,7 @@ def pywrap_tensorflow_macro(
+         srcs = [":" + name + ".py"],
+         srcs_version = "PY3",
+         data = select({
+-            clean_dep("//tensorflow:windows"): [":" + cc_library_pyd_name],
++            clean_dep("//tensorflow:windows_arm64"): [":" + cc_library_pyd_name],
+             "//conditions:default": [":" + cc_library_name],
+         }),
+     )
+@@ -2945,7 +2945,7 @@ def pybind_extension(
+                 "-fno-strict-aliasing",
+                 "-fexceptions",
+             ] + select({
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-fvisibility=hidden",
+                 ],
+@@ -2957,7 +2957,7 @@ def pybind_extension(
+                     "-Wl,-w",
+                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
+                 ],
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-Wl,--version-script",
+                     "$(location %s)" % version_script_file,
+@@ -3001,7 +3001,7 @@ def pybind_extension(
+                 "-fno-strict-aliasing",
+                 "-fexceptions",
+             ] + select({
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-fvisibility=hidden",
+                 ],
+@@ -3034,7 +3034,7 @@ def pybind_extension(
+                     "-Wl,-w",
+                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
+                 ],
+-                clean_dep("//tensorflow:windows"): [],
++                clean_dep("//tensorflow:windows_arm64"): [],
+                 "//conditions:default": [
+                     "-Wl,--version-script",
+                     "$(location %s)" % version_script_file,
+@@ -3076,7 +3076,7 @@ def pybind_extension(
+     native.py_library(
+         name = name,
+         data = select({
+-            "@org_tensorflow//tensorflow:windows": [pyd_file],
++            "@org_tensorflow//tensorflow:windows_arm64": [pyd_file],
+             "//conditions:default": [so_file],
+         }) + pytype_srcs,
+         deps = pytype_deps,
+diff --git a/tensorflow/tools/proto_text/BUILD b/tensorflow/tools/proto_text/BUILD
+index 713a08f903f..c5f7b792018 100644
+--- a/tensorflow/tools/proto_text/BUILD
++++ b/tensorflow/tools/proto_text/BUILD
+@@ -47,7 +47,7 @@ cc_library(
+     hdrs = ["gen_proto_text_functions_lib.h"],
+     copts = if_ios(["-DGOOGLE_LOGGING"]),
+     linkopts = select({
+-        "//tensorflow:windows": [],
++        "//tensorflow:windows_arm64": [],
+         "//tensorflow:macos": [
+             "-lm",
+             "-lpthread",
+diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
+index 60deadb1962..47d21081dda 100644
+--- a/tensorflow/workspace2.bzl
++++ b/tensorflow/workspace2.bzl
+@@ -135,6 +135,7 @@ def _tf_repositories():
+     # LINT.IfChange
+     tf_http_archive(
+         name = "XNNPACK",
++		patch_file = ["//third_party:xnnpack_changes-to-add-windows_arm64.patch"],
+         sha256 = "8ce46328c9ac5f1b8359e5c4352a2bbafc39614eae7f647d32a6d43cb110ad01",
+         strip_prefix = "XNNPACK-113092317754c7dea47bfb3cb49c4f59c3c1fa10",
+         urls = tf_mirror_urls("https://github.com/google/XNNPACK/archive/113092317754c7dea47bfb3cb49c4f59c3c1fa10.zip"),
+@@ -150,6 +151,7 @@ def _tf_repositories():
+ 
+     tf_http_archive(
+         name = "pthreadpool",
++		patch_file = ["//third_party:pthreadpool_changes_for_windows_arm64.patch"],
+         sha256 = "b96413b10dd8edaa4f6c0a60c6cf5ef55eebeef78164d5d69294c8173457f0ec",
+         strip_prefix = "pthreadpool-b8374f80e42010941bda6c85b0e3f1a1bd77a1e0",
+         urls = tf_mirror_urls("https://github.com/Maratyszcza/pthreadpool/archive/b8374f80e42010941bda6c85b0e3f1a1bd77a1e0.zip"),
+@@ -467,6 +469,7 @@ def _tf_repositories():
+ 
+     tf_http_archive(
+         name = "nsync",
++        patch_file = ["//third_party/systemlibs:nsync_changes_for_windows_arm64.patch"],
+         sha256 = "caf32e6b3d478b78cff6c2ba009c3400f8251f646804bcb65465666a9cea93c4",
+         strip_prefix = "nsync-1.22.0",
+         system_build_file = "//third_party/systemlibs:nsync.BUILD",
+@@ -704,6 +707,7 @@ def _tf_repositories():
+ 
+     tf_http_archive(
+         name = "double_conversion",
++        patch_file = ["//third_party:double_conversion_change_for_windows_arm64.patch"],
+         build_file = "//third_party:double_conversion.BUILD",
+         sha256 = "2f7fbffac0d98d201ad0586f686034371a6d152ca67508ab611adc2386ad30de",
+         strip_prefix = "double-conversion-3992066a95b823efc8ccc1baf82a1cfc73f6e9b8",
+diff --git a/third_party/clog/clog.BUILD b/third_party/clog/clog.BUILD
+index e1d59304299..a9b76ca09b8 100644
+--- a/third_party/clog/clog.BUILD
++++ b/third_party/clog/clog.BUILD
+@@ -17,6 +17,7 @@ cc_library(
+     ],
+     copts = select({
+         ":windows": [],
++        ":windows_arm64": [],
+         "//conditions:default": ["-Wno-unused-result"],
+     }),
+     defines = select({
+@@ -46,6 +47,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "macos_x86_64",
+     values = {
+diff --git a/third_party/double_conversion.BUILD b/third_party/double_conversion.BUILD
+index d875a1a2b5c..b06f50c4bee 100644
+--- a/third_party/double_conversion.BUILD
++++ b/third_party/double_conversion.BUILD
+@@ -9,6 +9,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ cc_library(
+     name = "double-conversion",
+     srcs = [
+@@ -36,6 +41,7 @@ cc_library(
+     includes = ["."],
+     linkopts = select({
+         ":windows": [],
++        ":windows_arm64": [],
+         "//conditions:default": ["-lm"],
+     }),
+     visibility = ["//visibility:public"],
+diff --git a/third_party/double_conversion_change_for_windows_arm64.patch b/third_party/double_conversion_change_for_windows_arm64.patch
+new file mode 100644
+index 00000000000..fa11d0152be
+--- /dev/null
++++ b/third_party/double_conversion_change_for_windows_arm64.patch
+@@ -0,0 +1,25 @@
++From 3b234d4a48995da9883fdbe8d778bf7726a59f54 Mon Sep 17 00:00:00 2001
++From: Mohit Mundhra <quic_mmundhra@quicinc.com>
++Date: Fri, 2 Dec 2022 16:39:44 +0530
++Subject: [PATCH] double_conversion_change_for_windows_arm64
++
++---
++ double-conversion/utils.h | 2 +-
++ 1 file changed, 1 insertion(+), 1 deletion(-)
++
++diff --git a/double-conversion/utils.h b/double-conversion/utils.h
++index d2981ed..06a78b9 100644
++--- a/double-conversion/utils.h
+++++ b/double-conversion/utils.h
++@@ -89,7 +89,7 @@ inline void abort_noreturn() { abort(); }
++ #undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
++ #endif  // _WIN32
++ #else
++-#error Target architecture was not detected as supported by Double-Conversion.
+++#undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
++ #endif
++ 
++ #if defined(__GNUC__)
++-- 
++2.37.3
++
+diff --git a/third_party/farmhash/farmhash.BUILD b/third_party/farmhash/farmhash.BUILD
+index 4b8464684ae..7d8aabb8ccd 100644
+--- a/third_party/farmhash/farmhash.BUILD
++++ b/third_party/farmhash/farmhash.BUILD
+@@ -5,7 +5,7 @@ exports_files(["COPYING"])
+ config_setting(
+     name = "windows",
+     values = {
+-        "cpu": "x64_windows",
++        "cpu": "x64_arm64_windows",
+     },
+ )
+ 
+diff --git a/third_party/gif_fix_strtok_r.patch b/third_party/gif_fix_strtok_r.patch
+index c9c9c30c41f..88a225b7474 100644
+--- a/third_party/gif_fix_strtok_r.patch
++++ b/third_party/gif_fix_strtok_r.patch
+@@ -13,3 +13,15 @@ diff -r -u ./fixed_gif_font.c ./gif_font.c
+  /*****************************************************************************
+   Ascii 8 by 8 regular font - only first 128 characters are supported.
+  *****************************************************************************/
++ diff -r -u a/gif_hash.h b/gif_hash.h
++--- a/gif_hash.h	2022-12-02 16:17:25.324434984 +0530
+++++ b/gif_hash.h	2022-12-02 16:19:33.110906335 +0530
++@@ -9,7 +9,7 @@
++ #ifndef _GIF_HASH_H_
++ #define _GIF_HASH_H_
++
++-#include <unistd.h>
+++//#include <unistd.h>
++ #include <stdint.h>
++
++ #define HT_SIZE			8192	   /* 12bits = 4096 or twice as big! */
+\ No newline at end of file
+diff --git a/third_party/jpeg/jpeg.BUILD b/third_party/jpeg/jpeg.BUILD
+index cc17e06ff17..d2d85eda514 100644
+--- a/third_party/jpeg/jpeg.BUILD
++++ b/third_party/jpeg/jpeg.BUILD
+@@ -20,6 +20,7 @@ libjpegturbo_copts = select({
+         "-w",
+     ],
+     ":windows": WIN_COPTS,
++    ":windows_arm64": WIN_COPTS,
+     "//conditions:default": [
+         "-O3",
+         "-w",
+@@ -131,6 +132,7 @@ cc_library(
+         ":arm64-v8a": [":simd_armv8a"],
+         ":linux_ppc64le": [":simd_altivec"],
+         ":windows": [":simd_win_x86_64"],
++        ":windows_arm64": [":simd_none"],
+         "//conditions:default": [":simd_none"],
+     }),
+ )
+@@ -656,6 +658,7 @@ genrule(
+     outs = ["jconfig.h"],
+     cmd = select({
+         ":windows": "cp $(location jconfig_win.h) $@",
++        ":windows_arm64": "cp $(location jconfig_win.h) $@",
+         ":k8": "cp $(location jconfig_nowin_simd.h) $@",
+         ":armeabi-v7a": "cp $(location jconfig_nowin_simd.h) $@",
+         ":arm64-v8a": "cp $(location jconfig_nowin_simd.h) $@",
+@@ -673,6 +676,7 @@ genrule(
+     outs = ["jconfigint.h"],
+     cmd = select({
+         ":windows": "cp $(location jconfigint_win.h) $@",
++        ":windows_arm64": "cp $(location jconfigint_win.h) $@",
+         "//conditions:default": "cp $(location jconfigint_nowin.h) $@",
+     }),
+ )
+@@ -772,6 +776,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "linux_ppc64le",
+     values = {"cpu": "ppc"},
+diff --git a/third_party/mkl/build_defs.bzl b/third_party/mkl/build_defs.bzl
+index 806b157bad6..1acf4b50929 100644
+--- a/third_party/mkl/build_defs.bzl
++++ b/third_party/mkl/build_defs.bzl
+@@ -34,7 +34,7 @@ def if_mkl(if_true, if_false = []):
+     return select({
+         "@org_tensorflow//third_party/mkl:build_with_mkl_aarch64": if_true,
+         "@org_tensorflow//tensorflow:linux_x86_64": if_true,
+-        "@org_tensorflow//tensorflow:windows": if_true,
++        "@org_tensorflow//tensorflow:windows_arm64": if_true,
+         "//conditions:default": if_false,
+     })
+ 
+@@ -103,7 +103,7 @@ def mkl_deps():
+     return select({
+         "@org_tensorflow//third_party/mkl:build_with_mkl_aarch64": ["@mkl_dnn_acl_compatible//:mkl_dnn_acl"],
+         "@org_tensorflow//tensorflow:linux_x86_64": ["@mkl_dnn_v1//:mkl_dnn"],
+-        "@org_tensorflow//tensorflow:windows": ["@mkl_dnn_v1//:mkl_dnn"],
++        "@org_tensorflow//tensorflow:windows_arm64": ["@mkl_dnn_v1//:mkl_dnn"],
+         "//conditions:default": [],
+     })
+ 
+diff --git a/third_party/pthreadpool_changes_for_windows_arm64.patch b/third_party/pthreadpool_changes_for_windows_arm64.patch
+new file mode 100644
+index 00000000000..c60afe71db1
+--- /dev/null
++++ b/third_party/pthreadpool_changes_for_windows_arm64.patch
+@@ -0,0 +1,53 @@
++From d359755287865b54f8fd96403c675b01b761b6f4 Mon Sep 17 00:00:00 2001
++From: Mohit Mundhra <quic_mmundhra@quicinc.com>
++Date: Fri, 2 Dec 2022 15:05:06 +0530
++Subject: [PATCH] changes_for_windows_arm64
++
++---
++ BUILD.bazel | 10 ++++++++++
++ 1 file changed, 10 insertions(+)
++
++diff --git a/BUILD.bazel b/BUILD.bazel
++index 40c5b9f..44dd5f7 100644
++--- a/BUILD.bazel
+++++ b/BUILD.bazel
++@@ -46,12 +46,14 @@ cc_library(
++         ":watchos": INTERNAL_HDRS + GCD_IMPL_SRCS,
++         ":tvos": INTERNAL_HDRS + GCD_IMPL_SRCS,
++         ":windows_x86_64": INTERNAL_HDRS + WINDOWS_IMPL_SRCS,
+++        ":windows_arm64": INTERNAL_HDRS + WINDOWS_IMPL_SRCS,
++         "//conditions:default": INTERNAL_HDRS + PTHREADS_IMPL_SRCS,
++     }) + select({
++         ":linux_x86_64": ARCH_SPECIFIC_SRCS,
++         ":android_x86": ARCH_SPECIFIC_SRCS,
++         ":android_x86_64": ARCH_SPECIFIC_SRCS,
++         ":windows_x86_64": ARCH_SPECIFIC_SRCS,
+++        ":windows_arm64": ARCH_SPECIFIC_SRCS,
++         ":macos_x86": ARCH_SPECIFIC_SRCS,
++         ":macos_x86_64": ARCH_SPECIFIC_SRCS,
++         ":macos_arm64": ARCH_SPECIFIC_SRCS,
++@@ -107,6 +109,7 @@ cc_library(
++         ":android_x86": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++         ":android_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++         ":windows_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+++        ":windows_arm64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++         ":macos_x86": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++         ":macos_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++         ":macos_arm64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++@@ -401,6 +404,13 @@ config_setting(
++     },
++ )
++ 
+++config_setting(
+++    name = "windows_arm64",
+++    values = {
+++        "cpu": "x64_arm64_windows",
+++    },
+++)
+++
++ config_setting(
++     name = "emscripten",
++     values = {
++-- 
++2.37.3
++
+diff --git a/third_party/snappy.BUILD b/third_party/snappy.BUILD
+index a2ab4924f29..cbf987bbe16 100644
+--- a/third_party/snappy.BUILD
++++ b/third_party/snappy.BUILD
+@@ -19,17 +19,13 @@ cc_library(
+     ],
+     hdrs = ["snappy.h"],
+     copts = ["-DHAVE_CONFIG_H"] + select({
+-        "@org_tensorflow//tensorflow:windows": [],
++        "@org_tensorflow//tensorflow:windows_arm64": [],
+         "//conditions:default": [
+-            "-fno-exceptions",
+-            "-Wno-sign-compare",
+-            "-Wno-shift-negative-value",
+-            "-Wno-implicit-function-declaration",
+         ],
+     }),
+     defines = select({
+-        "@org_tensorflow//tensorflow:windows": [],
+-        "//conditions:default": ["HAVE_SYS_UIO_H"],
++        "@org_tensorflow//tensorflow:windows_arm64": [],
++        "//conditions:default": [],
+     }),
+ )
+ 
+diff --git a/third_party/systemlibs/nsync_changes_for_windows_arm64.patch b/third_party/systemlibs/nsync_changes_for_windows_arm64.patch
+new file mode 100644
+index 00000000000..702ed88a0f5
+--- /dev/null
++++ b/third_party/systemlibs/nsync_changes_for_windows_arm64.patch
+@@ -0,0 +1,118 @@
++From 63aa235923a297f8c6198d59e5775a762410e8b8 Mon Sep 17 00:00:00 2001
++From: Mohit Mundhra <quic_mmundhra@quicinc.com>
++Date: Fri, 2 Dec 2022 15:37:33 +0530
++Subject: [PATCH] changes_for_windows_arm64
++
++---
++ BUILD | 27 +++++++++++++++++++++++++++
++ 1 file changed, 27 insertions(+)
++
++diff --git a/BUILD b/BUILD
++index 8b99116..9b18cc6 100644
++--- a/BUILD
+++++ b/BUILD
++@@ -91,6 +91,11 @@ config_setting(
++     values = {"cpu": "x64_windows"},
++ )
++ 
+++config_setting(
+++    name = "msvc_windows_arm64",
+++    values = {"cpu": "x64_arm64_windows"},
+++)
+++
++ config_setting(
++     name = "freebsd",
++     values = {"cpu": "freebsd"},
++@@ -126,6 +131,7 @@ NSYNC_OPTS_GENERIC = select({
++     ":android_arm": ["-I" + pkg_path_name() + "/platform/arm"],
++     ":android_arm64": ["-I" + pkg_path_name() + "/platform/aarch64"],
++     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/x86_64"],
+++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/aarch64"],
++     "//conditions:default": [],
++ }) + [
++     "-I" + pkg_path_name() + "/public",
++@@ -134,6 +140,8 @@ NSYNC_OPTS_GENERIC = select({
++ ] + select({
++     ":msvc_windows_x86_64": [
++     ],
+++    ":msvc_windows_arm64": [
+++    ],
++     ":freebsd": ["-pthread"],
++     "//conditions:default": [
++         "-D_POSIX_C_SOURCE=200809L",
++@@ -159,6 +167,7 @@ NSYNC_OPTS = select({
++     ":android_arm": ["-I" + pkg_path_name() + "/platform/linux"],
++     ":android_arm64": ["-I" + pkg_path_name() + "/platform/linux"],
++     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/win32"],
+++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/win32"],
++     "//conditions:default": [],
++ }) + select({
++     # Select the compiler include directory.
++@@ -177,6 +186,7 @@ NSYNC_OPTS = select({
++     ":android_arm": ["-I" + pkg_path_name() + "/platform/gcc"],
++     ":android_arm64": ["-I" + pkg_path_name() + "/platform/gcc"],
++     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/msvc"],
+++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/msvc"],
++ }) + select({
++     # Apple deprecated their atomics library, yet recent versions have no
++     # working version of stdatomic.h; so some recent versions need one, and
++@@ -191,6 +201,9 @@ NSYNC_OPTS_CPP = select({
++     ":msvc_windows_x86_64": [
++         "/TP",
++     ],
+++    ":msvc_windows_arm64": [
+++        "/TP",
+++    ],
++     "//conditions:default": [
++         "-x",
++         "c++",
++@@ -222,18 +235,24 @@ NSYNC_OPTS_CPP = select({
++         "-I" + pkg_path_name() + "/platform/win32",
++         "-I" + pkg_path_name() + "/platform/msvc",
++     ],
+++    ":msvc_windows_arm64": [
+++        "-I" + pkg_path_name() + "/platform/win32",
+++        "-I" + pkg_path_name() + "/platform/msvc",
+++    ],
++     "//conditions:default": ["-I" + pkg_path_name() + "/platform/gcc"],
++ }) + NSYNC_OPTS_GENERIC
++ 
++ # Link options (for tests) built in C (rather than C++11).
++ NSYNC_LINK_OPTS = select({
++     ":msvc_windows_x86_64": [],
+++    ":msvc_windows_arm64": [],
++     "//conditions:default": ["-pthread"],
++ })
++ 
++ # Link options (for tests) built in C++11 (rather than C).
++ NSYNC_LINK_OPTS_CPP = select({
++     ":msvc_windows_x86_64": [],
+++    ":msvc_windows_arm64": [],
++     "//conditions:default": ["-pthread"],
++ })
++ 
++@@ -415,6 +434,13 @@ NSYNC_SRC_PLATFORM_CPP = [
++         "platform/win32/src/pthread_key_win32.cc",
++         "platform/win32/src/per_thread_waiter.c",
++     ],
+++    ":msvc_windows_arm64": [
+++        "platform/win32/src/clock_gettime.c",
+++        # Windows has no thread-specific data with thread-exit destructors; we
+++        # must emulate it with C++ per-thread class destructors.
+++        "platform/win32/src/pthread_key_win32.cc",
+++        "platform/win32/src/per_thread_waiter.c",
+++    ],
++     # It's dangerous to use C++ class destructors if we can avoid it, because
++     # nsync may be linked into the address space multiple times.
++     "//conditions:default": ["platform/posix/src/per_thread_waiter.c"],
++@@ -527,6 +553,7 @@ NSYNC_TEST_SRC_PLATFORM = select({
++     ":android_arm": NSYNC_TEST_SRC_ANDROID,
++     ":android_arm64": NSYNC_TEST_SRC_ANDROID,
++     ":msvc_windows_x86_64": NSYNC_TEST_SRC_WINDOWS,
+++    ":msvc_windows_arm64": NSYNC_TEST_SRC_WINDOWS,
++ })
++ 
++ # C++11-specific (OS and architecture independent) test library source.
++-- 
++2.37.3
++
+diff --git a/third_party/xnnpack_changes-to-add-windows_arm64.patch b/third_party/xnnpack_changes-to-add-windows_arm64.patch
+new file mode 100644
+index 00000000000..93eda4be06f
+--- /dev/null
++++ b/third_party/xnnpack_changes-to-add-windows_arm64.patch
+@@ -0,0 +1,89 @@
++From 52d1ad0fab2ac9627c521228417890b8f61cbdce Mon Sep 17 00:00:00 2001
++From: Mohit Mundhra <quic_mmundhra@quicinc.com>
++Date: Fri, 2 Dec 2022 14:15:54 +0530
++Subject: [PATCH] Changes to add windows_arm64
++
++---
++ BUILD.bazel    | 5 +++++
++ build_defs.bzl | 7 +++++++
++ 2 files changed, 12 insertions(+)
++
++diff --git a/BUILD.bazel b/BUILD.bazel
++index 12ba1f2d6..15eb1c04e 100644
++--- a/BUILD.bazel
+++++ b/BUILD.bazel
++@@ -11506,6 +11506,11 @@ config_setting(
++     values = {"cpu": "x64_windows"},
++ )
++ 
+++config_setting(
+++    name = "windows_arm64",
+++    values = {"cpu": "x64_arm64_windows"},
+++)
+++
++ config_setting(
++     name = "windows_x86_64_clang",
++     values = {
++diff --git a/build_defs.bzl b/build_defs.bzl
++index d79ad63ca..5b751c26b 100644
++--- a/build_defs.bzl
+++++ b/build_defs.bzl
++@@ -151,6 +151,7 @@ def xnnpack_cc_library(
++             ":windows_x86_64_mingw": x86_srcs,
++             ":windows_x86_64_msys": x86_srcs,
++             ":windows_x86_64": x86_srcs,
+++            ":windows_arm64": x86_srcs,
++             ":android_armv7": aarch32_srcs,
++             ":android_arm64": aarch64_srcs,
++             ":android_x86": x86_srcs,
++@@ -186,6 +187,7 @@ def xnnpack_cc_library(
++             ":windows_x86_64_mingw": mingw_copts + gcc_x86_copts,
++             ":windows_x86_64_msys": msys_copts + gcc_x86_copts,
++             ":windows_x86_64": msvc_x86_64_copts,
+++            ":windows_arm64": msvc_x86_64_copts,
++             ":android_armv7": aarch32_copts,
++             ":android_arm64": aarch64_copts,
++             ":android_x86": gcc_x86_copts,
++@@ -209,6 +211,7 @@ def xnnpack_cc_library(
++             ":windows_x86_64_mingw": gcc_copts,
++             ":windows_x86_64_msys": gcc_copts,
++             ":windows_x86_64": msvc_copts,
+++            ":windows_arm64": msvc_copts,
++             "//conditions:default": gcc_copts,
++         }) + select({
++             ":optimized_build": optimized_copts,
++@@ -270,6 +273,7 @@ def xnnpack_aggregate_library(
++             ":windows_x86_64_mingw": x86_deps,
++             ":windows_x86_64_msys": x86_deps,
++             ":windows_x86_64": x86_deps,
+++            ":windows_arm64": aarch64_deps,
++             ":android_armv7": aarch32_nonios_deps,
++             ":android_arm64": aarch64_deps,
++             ":android_x86": x86_deps,
++@@ -326,6 +330,7 @@ def xnnpack_unit_test(name, srcs, copts = [], mingw_copts = [], msys_copts = [],
++                 ":windows_x86_64_mingw": ["-Wno-unused-function"],
++                 ":windows_x86_64_msys": ["-Wno-unused-function"],
++                 ":windows_x86_64": [],
+++                ":windows_arm64": [],
++                 "//conditions:default": ["-Wno-unused-function"],
++             }) + copts,
++             linkopts = select({
++@@ -359,6 +364,7 @@ def xnnpack_unit_test(name, srcs, copts = [], mingw_copts = [], msys_copts = [],
++                 ":windows_x86_64_mingw": ["-Wno-unused-function"],
++                 ":windows_x86_64_msys": ["-Wno-unused-function"],
++                 ":windows_x86_64": [],
+++                ":windows_arm64": [],
++                 "//conditions:default": ["-Wno-unused-function"],
++             }) + copts,
++             linkopts = select({
++@@ -426,6 +432,7 @@ def xnnpack_benchmark(name, srcs, copts = [], deps = [], tags = []):
++             ":windows_x86_64_mingw": ["-Wno-unused-function"],
++             ":windows_x86_64_msys": ["-Wno-unused-function"],
++             ":windows_x86_64": [],
+++            ":windows_arm64": [],
++             "//conditions:default": ["-Wno-unused-function"],
++         }) + copts,
++         linkopts = select({
++-- 
++2.37.3
++
+diff --git a/third_party/zlib.BUILD b/third_party/zlib.BUILD
+index 33694eaaaed..22afe53f771 100644
+--- a/third_party/zlib.BUILD
++++ b/third_party/zlib.BUILD
+@@ -33,7 +33,7 @@ cc_library(
+     ],
+     hdrs = ["zlib.h"],
+     copts = select({
+-        "@org_tensorflow//tensorflow:windows": [],
++        "@org_tensorflow//tensorflow:windows_arm64": [],
+         "//conditions:default": [
+             "-Wno-shift-negative-value",
+             "-DZ_HAVE_UNISTD_H",
+-- 
+2.37.3
+
diff --git a/patches/cpuinfo-changes-to-add-windows_arm64.patch b/patches/cpuinfo-changes-to-add-windows_arm64.patch
new file mode 100644
index 0000000..9849c2a
--- /dev/null
+++ b/patches/cpuinfo-changes-to-add-windows_arm64.patch
@@ -0,0 +1,69 @@
+From c38f071c9d3293b5c719b4fb374eb5716f2b451e Mon Sep 17 00:00:00 2001
+From: Mohit Mundhra <quic_mmundhra@quicinc.com>
+Date: Fri, 2 Dec 2022 12:14:46 +0530
+Subject: [PATCH] Changes to add windows_arm64
+
+---
+ BUILD.bazel           | 9 ++++++++-
+ deps/clog/BUILD.bazel | 6 ++++++
+ 2 files changed, 14 insertions(+), 1 deletion(-)
+
+diff --git a/BUILD.bazel b/BUILD.bazel
+index 90bef8d..71516c3 100644
+--- a/BUILD.bazel
++++ b/BUILD.bazel
+@@ -114,6 +114,7 @@ cc_library(
+         ":linux_s390x": COMMON_SRCS + LINUX_SRCS,
+         ":macos_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
+         ":macos_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
++        ":windows_arm64": COMMON_SRCS,
+         ":windows_x86_64": COMMON_SRCS + X86_SRCS + WINDOWS_X86_SRCS,
+         ":android_armv7": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS + ANDROID_ARM_SRCS,
+         ":android_arm64": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM64_SRCS + ANDROID_ARM_SRCS,
+@@ -135,6 +136,7 @@ cc_library(
+     }),
+     copts = select({
+         ":windows_x86_64": [],
++        ":windows_arm64": [],
+         "//conditions:default": C99OPTS,
+     }) + [
+         "-Iexternal/cpuinfo/include",
+@@ -253,6 +255,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "android_armv7",
+     values = {
+diff --git a/deps/clog/BUILD.bazel b/deps/clog/BUILD.bazel
+index 7dc52ea..ad8736c 100644
+--- a/deps/clog/BUILD.bazel
++++ b/deps/clog/BUILD.bazel
+@@ -20,6 +20,7 @@ cc_library(
+     ],
+     copts = select({
+         ":windows": [],
++        ":windows_arm64": [],
+         "//conditions:default": ["-Wno-unused-result"],
+     }),
+     defines = select({
+@@ -49,6 +50,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "macos_x86_64",
+     values = {
+-- 
+2.37.3
+
diff --git a/platform.bzl b/platform.bzl
new file mode 100644
index 0000000..77e6216
--- /dev/null
+++ b/platform.bzl
@@ -0,0 +1,20 @@
+"""Find platform and decide TF patch and pass it to bazel build config"""
+
+def _impl(repository_ctx):
+    if "windows" in repository_ctx.os.name:
+        patch_file="[\"//patches:TF-Changes-to-add-windows_arm64.patch\"]"
+    else:
+        patch_file=[]
+
+    repository_ctx.file("BUILD", "")
+    repository_ctx.file(
+        "patch_win_arm64.bzl",
+        "PATCH_FILE=%s" % patch_file,
+    )
+
+tf_patch_finder = repository_rule(
+    implementation = _impl,
+    environ = ["PATCH_FILE"],
+    local = True,
+    attrs = {"workspace_dir": attr.string(mandatory = True)},
+)
-- 
2.25.1

